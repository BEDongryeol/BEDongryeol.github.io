<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fintech - Backend Developer</title>
  
  <subtitle>Dongryeol Jeong</subtitle>
  <link href="http://bedongryeol.github.io/atom.xml" rel="self"/>
  
  <link href="http://bedongryeol.github.io/"/>
  <updated>2021-10-14T10:31:24.061Z</updated>
  <id>http://bedongryeol.github.io/</id>
  
  <author>
    <name>Dongryeol Jeong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OS (Operating System)</title>
    <link href="http://bedongryeol.github.io/10/14/os1/"/>
    <id>http://bedongryeol.github.io/10/14/os1/</id>
    <published>2021-10-14T10:24:28.000Z</published>
    <updated>2021-10-14T10:31:24.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="프로세스와-스레드-차이"><a href="#프로세스와-스레드-차이" class="headerlink" title="프로세스와 스레드 차이"></a>프로세스와 스레드 차이</h2></blockquote><p>프로세스는 프로그램이 OS로부터 메모리를 할당받은 동적인 상태의 프로그램 (OS 입장에서 최소 작업단위)</p><p>스레드는 프로세스가 할당받은 자원을 이용하는 실행 흐름의 단위 (CPU 입장에서 최소 작업단위)</p><p>프로세스 별로 최소 1개의 스레드를 보유하며, PCB라는 별도의 독립적인 주소 공간을 할당 받는다</p><p>프로세스 내의 스레드는 stack 영역을 독립적으로 갖으며, 나머지 영역은 서로 공유하게 됩니다.</p><p><strong>✚ alpha</strong></p><ul><li>PCB : stack, heap, data, code<ul><li>OS가 프로세스를 제어하기 위해 프로세스의 상태 정보를 저장하는 곳<ul><li>PID, state, 포인터, 레지스터 관련 정보, priority, account(CPU 관련), 입출력 상태 정보</li></ul></li><li>프로세스 생성 시 만들어지며 주 기억장치에 저장된다.</li><li>interrupt시 context switching 에 사용</li></ul></li><li>프로그램이 복잡해지면서 단일 프로세스를 이용하여 프로그램을 실행해지기 힘들어짐 <ul><li>안정성때문에 여러 프로세스를 사용하지않고 더 작은 실행 단위 개념인 스레드를 만들었다.</li></ul></li><li>data영역에는 무엇이 저장되는가 <ul><li>전역 변수(정적 변수, 배열, 구조체 등), 프로그램 종료 시 시스템에 반환한다.</li><li>초기화된 변수를 저장하는 data와, 초기화 되지 않은 변수를 저장하는 bss로 나뉜다.</li></ul></li></ul><blockquote><h2 id="멀티-프로세스로-처리-가능한-것을-멀티-스레드로-처리하는-이유"><a href="#멀티-프로세스로-처리-가능한-것을-멀티-스레드로-처리하는-이유" class="headerlink" title="멀티 프로세스로 처리 가능한 것을 멀티 스레드로 처리하는 이유"></a>멀티 프로세스로 처리 가능한 것을 멀티 스레드로 처리하는 이유</h2></blockquote><p>프로세스는 생성할 때마다 자원을 할당하는 system call을 호출하게 되고, IPC를 통해 interrupt를 발생시키며 통신하게 됩니다.</p><p>멀티 스레드로 처리할 시 system call이 감소하고, IPC보다 스레드간의 통신비용이 더 적기 때문에 자원의 효율성을 위해 멀티스레드로 처리합니다.</p><p>하지만 스레드들은 PCB 중 stack 영역을 제외한 자원을 공유하기 때문에, 이를 해결하기 위해 동기화에 신경써야합니다.</p><p><strong>✚ alpha</strong></p><p>프로세스를 생성할 때 어떤 system call을 필요로 하는가</p><ul><li>fork() : 부모와 완전히 독립된, 새로운 pid를 갖는 자식 프로세스 생성</li><li>exec() : 프로세스의 메모리 영역을 덮어씌워 다른 프로세스로 변환 -&gt; 프로세스 유지를 위해 fork를 하여 자식에서 주로 사용된다.</li></ul><blockquote><h2 id="교착-상태-Dead-Lock"><a href="#교착-상태-Dead-Lock" class="headerlink" title="교착 상태 (Dead Lock)"></a>교착 상태 (Dead Lock)</h2></blockquote><p>교착 상태는 시스템적으로 한정된 자원을 여러 곳에서 사용하려고 할 때 발생하며, 프로세스가 자원을 얻지 못해 작업을 수행하지 못하는 상태입니다.</p><p><strong>✚ alpha</strong></p><p>조건에는 프로세스들이 필요로 하는 자원에 대해 배타적인 통제권을 요구하는 상호배제 ,<br>프로세스가 할당된 자원을 가진 상태에서 다른 자원을 기다리는 점유대기,<br>자원의 사용이 끝날 때까지 자원을 가져올 수 없는 비선점,<br>순환적으로 다음 프로세스가 요구하는 자원을 갖는 순환대기가 있습니다.</p><p>해결 방법으로는 예방, 회피, 무시, 발견이 있습니다.</p><blockquote><h2 id="메모리-계층"><a href="#메모리-계층" class="headerlink" title="메모리 계층"></a>메모리 계층</h2></blockquote><p>피라미드 구조로 위에서부터 레지스터 - 캐시 - 메모리 - 하드디스크의 구조를 가지고있습니다.<br>이 구조는 CS 관점과, 경제성 관점에서 확립될 수 있습니다.</p><p>레지스터와 캐시는 CPU 내부에 존재하여 빠르게 접근이 가능하고, 메모리는 CPU 외부에 존재하여 비교적 느리게 접근합니다. </p><p>하드 디스크에는 CPU가 직접적으로 접근할 수 없다. 접근하기 위해서는 하드 디스크의 데이터를 메모리로 이동시켜서 접근가능한데 느리다.</p><p><strong>✚ alpha</strong></p><p>왜 이렇게 구조화되어 있는가?</p><ul><li>컴퓨터 과학계에서 증명된 ‘참조의 지역성’의 관점에서 자주 쓰일 거 같은 데이터를 하드디스크에서 메모리로, 메모리에서 캐시로 읽어 오는데, 이 크기는 점진적으로 작아진다.</li><li>비용적인 측면에서도 비싼 레지스터, 캐시는 필요한만큼의 크기만 사용하고, 저렴한 하드디스크는 넉넉하게 사용하여 피라미드 형태로 나타난다.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Interview" scheme="http://bedongryeol.github.io/categories/Interview/"/>
    
    
    <category term="면접" scheme="http://bedongryeol.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
    <category term="OS" scheme="http://bedongryeol.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Shell Script와 서버 작업 자동화</title>
    <link href="http://bedongryeol.github.io/10/14/shell/"/>
    <id>http://bedongryeol.github.io/10/14/shell/</id>
    <published>2021-10-14T06:37:09.000Z</published>
    <updated>2021-10-14T06:46:57.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h2 id="쉘-스크립트를-통한-서버-작업-자동화-및-운영-DevOps"><a href="#쉘-스크립트를-통한-서버-작업-자동화-및-운영-DevOps" class="headerlink" title="쉘 스크립트를 통한 서버 작업 자동화 및 운영(DevOps)"></a>쉘 스크립트를 통한 서버 작업 자동화 및 운영(DevOps)</h2><blockquote><h3 id="Why-왜-필요한가"><a href="#Why-왜-필요한가" class="headerlink" title="Why? 왜 필요한가?"></a>Why? 왜 필요한가?</h3></blockquote><p>서버는 일반적으로 로그파일을 생성한다. 생성 도중 용량 문제 등으로 작업이 중지되어 프로그램이 비정상적인 동작을 하여 다운되었다고 가정했을 때, 어떻게 문제를 해결할 수 있을까?</p><p>간단한 쉘 스크립트를 통해 일정 시간이 경과한 로그파일을 자동으로 삭제해주면 저장 공간에 대한 오류는 해결할 수 있다.</p><blockquote><h3 id="쉘-스크립트"><a href="#쉘-스크립트" class="headerlink" title="쉘 스크립트"></a>쉘 스크립트</h3></blockquote><p>쉘 명령어를 기본으로 하되, 몇 가지 문법이 추가된 형태이다.</p><p>쉘 스크립트는 <code>filename.sh</code> 형태의 파일로 작성 후, 파일을 실행한다.</p><blockquote><h3 id="기본-문법"><a href="#기본-문법" class="headerlink" title="기본 문법"></a>기본 문법</h3></blockquote><p>파일의 가장 첫 라인은 <code>#!/bin/bash</code>로 시작한다.</p><p>쉘 스크립트 파일은 실행 시 권한을 가지고 있어야한다.<br>    - <code>chmod 777 &lt;FileName&gt;</code>등과 같이 실행 권한을 부여해준다.</p><h4 id="1-변수"><a href="#1-변수" class="headerlink" title="1. 변수"></a>1. 변수</h4><ul><li><p><code>변수명=&#39;text&#39;</code> 와 같이 띄어쓰기 없이 입력해준다. text 내의 띄어쓰기는 가능하다.</p></li><li><p><code>$</code> 기호를 통해 변수임을 알려준다.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">my_name=<span class="string">&#x27;Dongryeol Jeong&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_name</span></span><br></pre></td></tr></table></figure><h4 id="2-배열"><a href="#2-배열" class="headerlink" title="2. 배열"></a>2. 배열</h4><ul><li><p><code>변수명=(데이터1 데이터2 데이터3)</code> 과 같이 배열을 선언할 수 있다.</p></li><li><p><code>$&#123;변수명[인덱스번호])</code> 로 배열을 출력할 수 있다.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>=(<span class="string">&quot;http&quot;</span> <span class="string">&quot;sqld&quot;</span> <span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 모든 데이터 출력 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test[@]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test[*]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 특정 인덱스 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test[1]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 크기 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#test[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 디렉토리의 파일 리스트를 배열로 입력받는 법</span></span><br><span class="line">file = $(ls)</span><br><span class="line"><span class="comment"># 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file[*]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-지역변수"><a href="#3-지역변수" class="headerlink" title="3. 지역변수"></a>3. 지역변수</h4><ul><li><p><code>$$</code> : 쉘의 프로세스 번호, pid</p></li><li><p><code>ls -al -z</code>를 실행했을 때</p><ul><li><p><code>$0</code> : 쉘 스크립트 이름 (<code>ls</code>)</p></li><li><p><code>$1 ~ $9</code> : 명령 줄의 인수 (<code>$1</code> : <code>-al</code> , <code>$2</code> : <code>-z</code>)</p></li><li><p><code>$*</code> : 모든 명령줄 인수 리스트 (<code>-al -z</code>)</p></li><li><p><code>$#</code> : 인수의 개수 (2개)</p></li><li><p><code>$?</code> : 최근 실행한 명령어의 종료 값</p><ul><li>0 : 성공</li><li>1 ~ 255 : 에러 메세지</li></ul></li></ul></li></ul><h4 id="4-연산"><a href="#4-연산" class="headerlink" title="4. 연산"></a>4. 연산</h4><ul><li><p><code>`expr`</code> : 숫자 계산</p></li><li><p>피 연산자와 연산 기호를 expr 뒤에 붙혀준다.</p></li><li><p><strong>괄호에는 항상 <code>\</code>(역슬래쉬)를 붙여주어야한다.</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ret=`expr \( 10 + 20 \) / 8 + 1`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ret</span></span><br></pre></td></tr></table></figure><h4 id="5-조건문"><a href="#5-조건문" class="headerlink" title="5. 조건문"></a>5. 조건문</h4><ul><li><p><code>if</code>로 시작하여 <code>fi</code>로 끝내준다.</p></li><li><p><strong>값 비교 문법</strong></p><ul><li><code>-z</code> : 문자가 null이면 true</li><li><code>-n</code> : 문자가 null이면 false</li><li><code>-eq</code> : equal (같으면 참)</li><li><code>-ne</code> : not equal (다르면 참)</li><li><code>-lt</code> : less than</li><li><code>-le</code> : less or equal</li><li><code>-gt</code> : greater than</li><li><code>-ge</code> : greater or equal</li></ul></li></ul><p><strong>파일 검사 문법</strong></p><ul><li><code>-e</code> : 파일이 존재하면 true<ul><li><code>-d</code> : 파일이 디렉토리이면 true</li><li><code>-h</code> : 심볼링 링크파일이면 true</li><li><code>-f</code> : 일반 파일이면 true</li><li><code>-r</code> : 읽기 가능하면 true</li><li><code>-s</code> : 파일 크기가 0이 아니면 true</li><li><code>-u</code> : 파일이 set-user-id가 설정되면 true</li><li><code>-w</code> : 파일이 쓰기 가능 상태이면 true</li><li><code>-x</code> : 파일이 실행 가능 상태이면 true</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -eq <span class="variable">$2</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Same Values&quot;</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Different Values&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="6-반복문"><a href="#6-반복문" class="headerlink" title="6. 반복문"></a>6. 반복문</h4><h5 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h5><ul><li><p><code>for 변수 in 변수값1 변수값 2 ...</code> 로 범위를 설정하고, <code>do</code> 다음 줄에 실행구문을 작성하고 <code>done</code>으로 반복문을 종료한다.</p></li><li><p><code>ls</code>를 통해 디렉토리에 있는 모든 파일을 출력해주고 끝내는 반복문</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> $(ls)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$data</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h5 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">list=$(ls)</span><br><span class="line">num=<span class="variable">$&#123;#list[*]&#125;</span></span><br><span class="line">index=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$num</span> -ge 0 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list[$index]&#125;</span></span><br><span class="line">index=`expr <span class="variable">$index</span> + 1`</span><br><span class="line">num=`expr <span class="variable">$num</span> - 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="서버에서-쉘-스크립트-사용"><a href="#서버에서-쉘-스크립트-사용" class="headerlink" title="서버에서 쉘 스크립트 사용"></a>서버에서 쉘 스크립트 사용</h3></blockquote><p>ping 명령어를 통해 ip에 요청을 보내고 응답이 돌아올 시 “GateWay ping succeed” 구문을 출력하고, 실패 시 “GateWay ping failed” 구문을 출력하게 하여 서버가 열려있는지 확인할 수 있다.</p><p>타 컴퓨터와 협업을 할 때 ping을 통해 확인하고, 성공 시 작업을 수행하게 할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ping -c 1 192.168.0.3 1&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GateWay ping succeed&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GateWay ping failed&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="백업하기"><a href="#백업하기" class="headerlink" title="백업하기"></a>백업하기</h4><p>두 개의 인자를 받았을 때 null이면 파일을 만들어서 폴더에 넣어주고, 아니면 각각 디렉토리에 날짜를 포함한 이름을 설정하여 저장</p><h5 id="압축-명령"><a href="#압축-명령" class="headerlink" title="압축 명령"></a>압축 명령</h5><ul><li><code>tar</code> : 과게어는 여러 파일을 묶기만 했었지만, 현재는 파일을 묶고 압축할 수 있다.</li><li>주요 옵션<ul><li>x : 묶음 해제</li><li>c : 파일 묶음</li><li>v : 묶음 / 해제 과정을 화면에 표시</li><li>z : gunzip 사용</li><li>f : v파일 이름 지정</li><li>압축 시 주로 사용하는 옵션 : <code>tar -cvzf [압축파일 이름] [압축할 파일 or 폴더명]</code></li><li>해제 시 주로 사용하는 옵션 : <code>tar -xvzf [압출 해제할 아카이브 이름]</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ]||[ -z <span class="variable">$2</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> usage: <span class="variable">$0</span> sourcedir targetdir</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">SRCDIR=<span class="variable">$1</span></span><br><span class="line">DSTDIR=<span class="variable">$2</span></span><br><span class="line">BACKUPFILE=backup.$(date +%y$m$d$H$M<span class="variable">$S</span>).tar.gz</span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$DSTDIR</span> ]; <span class="keyword">then</span></span><br><span class="line">tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mkdir <span class="variable">$DSTDIR</span></span><br><span class="line">tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="Logfile-정리하기"><a href="#Logfile-정리하기" class="headerlink" title="Logfile 정리하기"></a>Logfile 정리하기</h3></blockquote><p><strong>정책을 먼저 정하고, 그에 따라 파일을 어떻게 관리해줄 것인지 구현한다.</strong></p><p>2일이 경과한 log파일은 gz파일로 압축시켜주고, 압축된 지 3일이 경과한 파일은 삭제하도록한다.</p><p>find 함수를 통해 아래와 같이 구현할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LOGDIR=/var/<span class="built_in">log</span></span><br><span class="line">GZIPDAY=1</span><br><span class="line">DELDAY=2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$LOGDIR</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cd <span class="variable">$LOGDIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line">sudo find . -<span class="built_in">type</span> f -name <span class="string">&#x27;*log.*&#x27;</span> -mtime +<span class="variable">$GZIPDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;gzip &#123;&#125;&quot;</span> \; 2&gt; /dev/null</span><br><span class="line">sudo find . -<span class="built_in">type</span> f -name <span class="string">&#x27;*.gz&#x27;</span>  -mtime +<span class="variable">$DELDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;rm -f &#123;&#125;&quot;</span> \; 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="System Programming" scheme="http://bedongryeol.github.io/categories/Basic/System-Programming/"/>
    
    
    <category term="서버 자동화" scheme="http://bedongryeol.github.io/tags/%EC%84%9C%EB%B2%84-%EC%9E%90%EB%8F%99%ED%99%94/"/>
    
    <category term="shell" scheme="http://bedongryeol.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>IPC - 파이프 (Pipe)</title>
    <link href="http://bedongryeol.github.io/10/12/realpipe/"/>
    <id>http://bedongryeol.github.io/10/12/realpipe/</id>
    <published>2021-10-12T13:30:09.000Z</published>
    <updated>2021-10-12T13:49:50.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Pipe-파이프-기법"><a href="#Pipe-파이프-기법" class="headerlink" title="Pipe(파이프) 기법"></a>Pipe(파이프) 기법</h2></blockquote><p><img src="https://miro.medium.com/max/4800/1*O9f0bRS5cPfLQBM1-SpbIQ.png" alt="image"></p><p>기본적인 파이프 기법은 <strong>단방향 통신</strong>으로 구성되어 있습니다. Half-Duplex 통신이라고 불리기도 합니다.</p><p>두 개의 프로세스를 연결하여 한 쪽에서는 데이터를 write하고, 다른 한 쪽에서는 read만 할 수 있습니다. 또는 <strong>한 프로세스의 출력 스트림을 다른 프로세스의 입력 스트림으로 사용할 때 사용됩니다.</strong></p><p>C언어에서 <code>fork()</code>로 자식 프로세스를 생성했을 때, <strong>부모와 자식간의 통신</strong>도 파이프를 통해 이루어지게 됩니다.</p><p>아래 예제를 통해 파이프 코드를 살펴보도록 하겠습니다.</p><blockquote><h2 id="Pipe-예제-코드"><a href="#Pipe-예제-코드" class="headerlink" title="Pipe 예제 코드"></a>Pipe 예제 코드</h2></blockquote><h3 id="1-출력-스트림을-입력-스트림으로-사용"><a href="#1-출력-스트림을-입력-스트림으로-사용" class="headerlink" title="1. 출력 스트림을 입력 스트림으로 사용"></a>1. 출력 스트림을 입력 스트림으로 사용</h3><p>Mac OS의 iterm에서 디렉토리 내 디렉토리, 파일을 보여주는 ls코드로 예제를 만들어 보겠습니다.</p><p><code>ls -al</code>를 입력하여 아래와 같은 화면이 출력되었습니다. </p><p><img src="/image/lsal.png" alt="img.png"></p><p>위 폴더 중 <strong>단어 code</strong>가 포함된 결과물만을 출력할 때 파이프 라인을 사용할 수 있습니다.</p><p><code>ls -al | grep code</code> </p><ul><li>파이프 라인을 통하여 위 1차 출력을 입력으로 받고, 그 중 code가 포함된 결과물을 가져 옵니다.</li><li>여기서 <code>|</code>가 파이프 라인을 의미합니다.</li></ul><p><img src="/image/grep.png" alt="img_1.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="System Programming" scheme="http://bedongryeol.github.io/categories/Basic/System-Programming/"/>
    
    
    <category term="IPC" scheme="http://bedongryeol.github.io/tags/IPC/"/>
    
    <category term="Pipe" scheme="http://bedongryeol.github.io/tags/Pipe/"/>
    
  </entry>
  
  <entry>
    <title>IPC (Inter-Process Communication)</title>
    <link href="http://bedongryeol.github.io/10/12/pipe/"/>
    <id>http://bedongryeol.github.io/10/12/pipe/</id>
    <published>2021-10-12T13:16:06.000Z</published>
    <updated>2021-10-12T13:31:31.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="IPC란-무엇인가"><a href="#IPC란-무엇인가" class="headerlink" title="IPC란 무엇인가?"></a>IPC란 무엇인가?</h2></blockquote><p><img src="https://static.packt-cdn.com/products/9781785883057/graphics/0af92d22-6bef-42c8-84cf-528fa13becf0.jpg" alt="image"></p><p>IPC는 <span class="highlight-text success">Inter-Process Communication의 약어</span>로 프로세스간 통신의 약어이다.</p><p><strong>프로세스는 서로 독립되어 있어 다른 프로세스의 영향을 받지 않습니다.</strong> 이는 보는 관점에 따라 장점이 될 수도, 단점이 될 수도 있습니다. </p><p>서로 독립되어 있어 다른 프로세스의 영향을 받지 않을 수 있다는 장점이 있지만, 이는 서로 간의 통신이 어려운 것으로 해석할 수 있습니다.</p><p>이를 위해 OS의 커널 영역에서는 IPC를 제공하고, 이를 통해 프로세스간 통신이 가능해집니다.</p><h3 id="IPC-표준"><a href="#IPC-표준" class="headerlink" title="IPC 표준"></a>IPC 표준</h3><h4 id="1-System-V-IPC"><a href="#1-System-V-IPC" class="headerlink" title="1. System V IPC"></a>1. System V IPC</h4><ul><li>오랜 역사를 가지고 있다.</li><li>서로 다른 기종간의 코드 호환성을 안정적으로 보장해준다.</li><li>불명확한 함수명과 API의 버전이 오래되었다.</li></ul><h4 id="2-POSIX-IPC"><a href="#2-POSIX-IPC" class="headerlink" title="2. POSIX IPC"></a>2. POSIX IPC</h4><ul><li>유닉스 시스템 프로그래밍 인터페이스 표준이다.</li><li>IEEE (Institute of Electronic and Electronics Engineers)에서 표준화를 시도함</li><li>직관적인 API로 인해 비교적 사용하기 쉽다.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="System Programming" scheme="http://bedongryeol.github.io/categories/Basic/System-Programming/"/>
    
    
    <category term="IPC" scheme="http://bedongryeol.github.io/tags/IPC/"/>
    
    <category term="POSIX" scheme="http://bedongryeol.github.io/tags/POSIX/"/>
    
  </entry>
  
  <entry>
    <title>Object Mapper</title>
    <link href="http://bedongryeol.github.io/10/07/obejctmapper/"/>
    <id>http://bedongryeol.github.io/10/07/obejctmapper/</id>
    <published>2021-10-07T11:23:28.000Z</published>
    <updated>2021-10-07T13:24:37.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Object-Mapper"><a href="#Object-Mapper" class="headerlink" title="Object Mapper"></a>Object Mapper</h2></blockquote><p>Object Mapper를 통하여 Java에서 JSON 값을 가공 및 활용할 수 있습니다.</p><p>Java Object를 JSON으로 <strong>Serializing</strong> 하거나 반대로 JSON 객체를 Object로 <strong>Deserializing</strong> 할 수 있습니다.</p><blockquote><h2 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h2></blockquote><p>저는 <strong>Gradle</strong>과 <strong>Jackson Databind 2.12.3</strong> API를 사용하였습니다.</p><p>maven repository 홈페이지에서 <code>object mapper</code>키워드를 검색해서 찾을 수 있습니다.</p><p>편의를 위해 아래 코드 블럭에 위 버전의 dependency를 복사해두었습니다.</p><p>다른 버전 이용은 아래 링크를 참고해주세요</p><p><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind">MVN REPOSITORY - jackson databind</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind</span></span><br><span class="line"><span class="attr">implementation</span> <span class="string">group: &#x27;com.fasterxml.jackson.core&#x27;, name: &#x27;jackson-databind&#x27;, version: &#x27;2.12.3&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>build.gradle</strong>에 dependency를 추가하면 jar파일을 온라인에서 불러와 클래스 패스에 자체적으로 추가시켜줍니다.</p><blockquote><h2 id="Using-Case"><a href="#Using-Case" class="headerlink" title="Using Case"></a>Using Case</h2></blockquote><p>User 객체가 내부적으로 Car 객체의 배열을 갖는 형태로 구성하였습니다.</p><p>이해를 돕기 위해 아래 사진을 첨부하였습니다.</p><p><img src="/image/json.png" alt="img.png"></p><p><strong>User 클래스 멤버 변수</strong></p><ul><li>String name</li><li>int age</li><li>List<Car> cars</li></ul><p><strong>Car 클래스 멤버 변수</strong></p><ul><li>String name</li><li>String carNumber</li><li>String type</li></ul><details><summary>User 객체 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Car&gt; cars;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Car&gt; <span class="title">getCars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCars</span><span class="params">(List&lt;Car&gt; cars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cars = cars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, cars=&quot;</span> + cars +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>Car 객체 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String carNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCarNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarNumber</span><span class="params">(String car_number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carNumber = car_number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, car_number=&#x27;&quot;</span> + carNumber + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><blockquote><h3 id="0-객체-준비"><a href="#0-객체-준비" class="headerlink" title="0. 객체 준비"></a>0. 객체 준비</h3></blockquote><ol><li><p><strong>User 객체</strong>에 나이와 이름을 <code>setter</code>를 통해 입력해줍니다.</p></li><li><p><strong>car 객체</strong> 2개를 생성하여 이름, 차량 번호, type을 입력해줍니다.</p><ul><li>User 객체에 보유한 차들을 List 형태로 가지고 있기 때문에 2개를 생성하였습니다.</li></ul></li><li><p>생성한 car 객체 2개를 Array 형태로 변환하여 User 객체에 넣어줍니다.</p></li></ol><details><summary>객체 생성 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">&quot;홍길동&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car1 = <span class="keyword">new</span> Car();</span><br><span class="line">car1.setName(<span class="string">&quot;K5&quot;</span>);</span><br><span class="line">car1.setCarNumber(<span class="string">&quot;11가 1111&quot;</span>);</span><br><span class="line">car1.setType(<span class="string">&quot;sedan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car2 = <span class="keyword">new</span> Car();</span><br><span class="line">car2.setName(<span class="string">&quot;Q5&quot;</span>);</span><br><span class="line">car2.setCarNumber(<span class="string">&quot;22가 2222&quot;</span>);</span><br><span class="line">car2.setType(<span class="string">&quot;SUV&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Car&gt; carList = Arrays.asList(car1,car2);</span><br><span class="line">user.setCars(carList);</span><br></pre></td></tr></table></figure></details><blockquote><h3 id="1-Object를-JSON-등의-타입으로-변환"><a href="#1-Object를-JSON-등의-타입으로-변환" class="headerlink" title="1. Object를 JSON 등의 타입으로 변환"></a>1. Object를 JSON 등의 타입으로 변환</h3></blockquote><ol><li>ObjectMapper 객체를 생성해줍니다.</li><li><code>writeValueAsString()</code>메서드를 통하여 객체를 String으로 변환하고 String 변수에 담아줍니다.<ul><li>User 객체를 JSON 형태로 설계하였기 때문에 JSON 형태의 String이 출력됩니다.</li><li>객체의 Value를 String으로 저장한다라고 해석하시면 이해하기 편합니다.</li></ul></li></ol><p><img src="/image/json2.png" alt="img.png"></p><details><summary>Object Mapper 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = objectMapper.writeValueAsString(user);</span><br><span class="line">    System.out.println(json);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과값</span></span><br><span class="line"><span class="comment">// &#123;&quot;name&quot;:&quot;홍길동&quot;,&quot;age&quot;:10,&quot;cars&quot;:[&#123;&quot;name&quot;:&quot;K5&quot;,&quot;carNumber&quot;:&quot;11가 1111&quot;,&quot;type&quot;:&quot;sedan&quot;&#125;,&#123;&quot;name&quot;:&quot;Q5&quot;,&quot;carNumber&quot;:&quot;22가 2222&quot;,&quot;type&quot;:&quot;SUV&quot;&#125;]&#125;</span></span><br></pre></td></tr></table></figure></details><blockquote><h3 id="1-1-JSON-특정-key의-value-조회"><a href="#1-1-JSON-특정-key의-value-조회" class="headerlink" title="1-1. JSON 특정 key의 value 조회"></a>1-1. JSON 특정 key의 value 조회</h3></blockquote><h4 id="readTree-메서드"><a href="#readTree-메서드" class="headerlink" title="readTree() 메서드"></a>readTree() 메서드</h4><p>JSON의 가장 바깥부분의 key들은 JsonNode를 가지고 있어, 이를 통해 JSON 객체에 직접적인 접근을 할 수 있습니다.</p><p>JSON은 트리 구조와 같이 생겨서 Node를 읽어올 때는 <code>readTree(객체)</code> 메서드를 사용합니다.</p><details><summary>JsonNode 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JsonNode jsonNode = objectMapper.readTree(json);</span><br><span class="line">String _name = jsonNode.get(<span class="string">&quot;name&quot;</span>).asText();</span><br><span class="line"><span class="keyword">int</span> _age = jsonNode.get(<span class="string">&quot;age&quot;</span>).asInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;name : &quot;</span> + _name);</span><br><span class="line">System.out.println(<span class="string">&quot;age : &quot;</span> + _age);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과값</span></span><br><span class="line"><span class="comment">// name : 홍길동</span></span><br><span class="line"><span class="comment">// age : 10</span></span><br></pre></td></tr></table></figure></details><p><strong>하지만, 일반적인 key, value 쌍과는 다르게 cars는 내부적으로 배열 형태를 띄고 있습니다.</strong><br>내부의 배열은 <strong>ArrayNode</strong>라는 타입을 이용하여 접근할 수 있습니다.</p><p><strong>순서</strong></p><ol><li>JsonNode로 cars 배열의 Node 불러오기</li><li>JsonNode를 ArrayNode로 명시적 형변환</li></ol><details><summary>ArrayNode 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JsonNode _cars = jsonNode.get(<span class="string">&quot;cars&quot;</span>);</span><br><span class="line">ArrayNode arrayNode = (ArrayNode)_cars;</span><br><span class="line">System.out.println(<span class="string">&quot;cars : &quot;</span> + arrayNode);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과값</span></span><br><span class="line"><span class="comment">// cars : [&#123;&quot;name&quot;:&quot;K5&quot;,&quot;carNumber&quot;:&quot;11가 1111&quot;,&quot;type&quot;:&quot;sedan&quot;&#125;,&#123;&quot;name&quot;:&quot;Q5&quot;,&quot;carNumber&quot;:&quot;22가 2222&quot;,&quot;type&quot;:&quot;SUV&quot;&#125;]</span></span><br></pre></td></tr></table></figure></details><blockquote><h3 id="1-2-JSON-특정-key의-value-변경"><a href="#1-2-JSON-특정-key의-value-변경" class="headerlink" title="1-2. JSON 특정 key의 value 변경"></a>1-2. JSON 특정 key의 value 변경</h3><p><strong>JsonNode는 value를 변경할 수 없도록 되어 있습니다.</strong> </p></blockquote><p>따라서 값을 변경하고 싶을 때는 JsonNode를 <strong>ObjectNode로 명시적 형변환</strong> 해준 뒤에 값을 변경할 수 있습니다.</p><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectNode objectNode = (ObjectNode) jsonNode;</span><br><span class="line">objectNode.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;정동렬&quot;</span>);</span><br></pre></td></tr></table></figure></details><p>추가 적으로 objectNode의 값을 보기 편하게 출력하려면 <code>toPrettyString()</code>메서드를 사용하면 됩니다.</p><ul><li><code>System.out.println(objectNode.toPrettyString());</code></li></ul><blockquote><h3 id="2-JSON을-Object로-변환"><a href="#2-JSON을-Object로-변환" class="headerlink" title="2. JSON을 Object로 변환"></a>2. JSON을 Object로 변환</h3><p>바로 위 <strong>ArrayNode 코드 확인하기</strong>에서 cars의 값을 arrayNode에 초기화시켜주었습니다.</p></blockquote><p>이번에는 역으로 JSON 형태로 존재하는 arrayNode를 기존 User객체에 넣어주었던 List<Cars> 객체로 mapping 해보겠습니다.</p><p><strong>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)</strong></p><ul><li>fromValue : 변환하고 싶은 객체 (JSON형태의 값)</li><li>TypeReference<T> : mapping하고 싶은 객체의 타입 (List<Car>)</li></ul><details><summary>Object로 mapping하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = objectMapper.convertValue(arrayNode, <span class="keyword">new</span> TypeReference&lt;List&lt;Car&gt;&gt;() &#123;&#125;);</span><br><span class="line">System.out.println(cars);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과값</span></span><br><span class="line"><span class="comment">// [Car&#123;name=&#x27;K5&#x27;, car_number=&#x27;11가 1111&#x27;, type=&#x27;sedan&#x27;&#125;, Car&#123;name=&#x27;Q5&#x27;, car_number=&#x27;22가 2222&#x27;, type=&#x27;SUV&#x27;&#125;]</span></span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Spring" scheme="http://bedongryeol.github.io/categories/Basic/Spring/"/>
    
    
    <category term="Object Mapper" scheme="http://bedongryeol.github.io/tags/Object-Mapper/"/>
    
  </entry>
  
  <entry>
    <title>싱글톤 패턴 (Singleton Pattern)</title>
    <link href="http://bedongryeol.github.io/10/04/singleton/"/>
    <id>http://bedongryeol.github.io/10/04/singleton/</id>
    <published>2021-10-04T14:59:07.000Z</published>
    <updated>2021-10-07T11:27:17.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Singleton-Pattern-이란-무엇인가"><a href="#Singleton-Pattern-이란-무엇인가" class="headerlink" title="Singleton Pattern 이란 무엇인가?"></a>Singleton Pattern 이란 무엇인가?</h2><p>프로그램 내에서 오로지 1개만 존재하는 객체를 생성하여, 내부에서 이를 호출하여 사용하는 경우가 있습니다.</p></blockquote><p>이벤트의 스케줄링, 환경설정, 로그 파일의 생성, 하드웨어 기기의 인터페이스, 캐시 등의 다양한 케이스가 있습니다.</p><p>위와 같은 상황에서 <strong>Singleton 패턴</strong>을 이용하여 객체를 프로그램 내부에서 단 1개만 생성하고,<br>멀티 쓰레드 환경에서 이 객체를 공유하고, 동시 접근으로 인해 발생하는 동시성 문제도 해결할 수 있습니다.</p><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><ul><li><h4 id="Singleton-패턴"><a href="#Singleton-패턴" class="headerlink" title="Singleton 패턴"></a><strong>Singleton 패턴</strong></h4><ol><li>프로그램 내에 특정 객체가 단 1개가 존재한다.</li><li>프로그램 내부의 다른 부분에서 이 객체를 공유하며 사용한다.</li></ol></li></ul><blockquote><h2 id="Singleton를-사용하는-이유"><a href="#Singleton를-사용하는-이유" class="headerlink" title="Singleton를 사용하는 이유"></a>Singleton를 사용하는 이유</h2></blockquote><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>인스턴스를 1개만 생성함으로써, 메모리 공간을 절약할 수 있다.</li><li>호출할 때마다 생성하지 않아도 되므로, 로딩 시간이 절약된다.</li><li>어디서든 전역 변수처럼 사용할 수 있고, 다른 인스턴스들과 데이터 공유가 잘 이루어진다.</li></ul><h3 id="유의-사항"><a href="#유의-사항" class="headerlink" title="유의 사항"></a>유의 사항</h3><ul><li><p>클래스 내부에서 객체를 직접 생성하기 때문에 DIP(Dependency Inversion Principle) 를 위배하게 된다.</p><ul><li>특정 인터페이스에 의존하는 것이 아닌 한 개의 인스턴스에 의존, 전역적으로 직접 참조하게 됩니다.</li><li>이는 의존성 주입(Dependency Injection)을 통해 피할 수 있습니다.</li></ul></li><li><p>멀티 쓰레드 환경에서 안전하게 구현하려면 <strong>Thread-Safe</strong>, <strong>동기화</strong> 처리를 해주어야한다.</p></li></ul><blockquote><h2 id="Singleton-구현"><a href="#Singleton-구현" class="headerlink" title="Singleton 구현"></a>Singleton 구현</h2></blockquote><h3 id="기본-구현"><a href="#기본-구현" class="headerlink" title="기본 구현"></a>기본 구현</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체에 대한 직접적인 접근을 막기위해 private으로 생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CentralBank centralBank;</span><br><span class="line"><span class="comment">// 생성자를 외부에서 접근할 수 없도록 private으로 설정</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">CentralBank</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 객체에 접근할 수 있는 public 코드 작성</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CentralBank <span class="title">getCentralBank</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 객체가 null이면 객체 생성</span></span><br><span class="line">    <span class="keyword">if</span> (centralBank == <span class="keyword">null</span>) &#123;</span><br><span class="line">        centralBank = <span class="keyword">new</span> CentralBank();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 객체 return</span></span><br><span class="line">    <span class="keyword">return</span> centralBank;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>인스턴스와 생성자 모두 private으로 설정하여 외부에서 직접적인 접근을 막아줍니다.</p><p>getCentralBank() 메서드를 통해서만 인스턴스에 접근이 가능합니다.</p><p><strong>하지만 위 코드는 멀티 쓰레드 환경에서 Thread-safe</strong>를 보장하지 않습니다.</p><p>인스턴스가 null인 상태에서 두 개의 쓰레드에서 동시에 getInstance를 호출하면 instance를 두 번 생성할 수 있게 됩니다.</p><p>이를 해결하기 위해서는 <strong>동기화</strong>가 필요합니다.</p><h3 id="동기화-구현"><a href="#동기화-구현" class="headerlink" title="동기화 구현"></a>동기화 구현</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체에 대한 직접적인 접근을 막기위해 private으로 생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CentralBank centralBank;</span><br><span class="line"><span class="comment">// 생성자를 외부에서 접근할 수 없도록 private으로 설정</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">CentralBank</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 객체에 접근할 수 있는 public 코드 작성</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> CentralBank <span class="title">getCentralBank</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 객체가 null이면 객체 생성</span></span><br><span class="line">    <span class="keyword">if</span> (centralBank == <span class="keyword">null</span>) &#123;</span><br><span class="line">        centralBank = <span class="keyword">new</span> CentralBank();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 객체 return</span></span><br><span class="line">    <span class="keyword">return</span> centralBank;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여러 쓰레드가 동시 접근이 가능한 메서드에 <code>synchronized</code> 키워드를 추가하여 이를 해결할 수 있습니다.</p><p>위 코드에서는 Thread-safe는 보장되지만 <strong>속도가 저하된다는 문제가 발생합니다.</strong></p><p>반갑게도 Thread-safe와 속도를 모두 보장하는 방법이 존재합니다.</p><p>아래에서 두 가지 예시로 살펴보도록 하겠습니다.</p><h3 id="Double-Check-Lock-DCL-방식"><a href="#Double-Check-Lock-DCL-방식" class="headerlink" title="Double Check Lock(DCL) 방식"></a>Double Check Lock(DCL) 방식</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CentralBank</span> </span>&#123;</span><br><span class="line">  <span class="comment">// volatile 키워드를 통해 cache가 아닌 main memory에서 데이터를 읽고 쓴다.</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> CentralBank centralBank;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">CentralBank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CentralBank <span class="title">getCentralBank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// null인지 1번 체크</span></span><br><span class="line">    <span class="keyword">if</span> (centralBank == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (CentralBank.class) &#123;</span><br><span class="line">        <span class="comment">// 동기화 후에 null인지 다시 한번 체크 (Double check)</span></span><br><span class="line">        <span class="keyword">if</span> (centralBank == <span class="keyword">null</span>) &#123;</span><br><span class="line">          centralBank = <span class="keyword">new</span> CentralBank();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> centralBank;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여러 쓰레드가 접근하는 인스턴스에 <code>volatile</code> 키워드를 추가해줍니다.</p><ul><li>volatile 키워드가 없을 때, 멀티 쓰레드 어플리케이션에서는 작업을 수행하는 동안 <strong>성능 향상</strong>을 위해 메인 메모리에서 읽은 변수의 값을 Cache에 저장합니다.</li><li>이 때, 각 CPU Cache에 저장되는 값이 불일치하는 상황이 발생할 수 있습니다.</li><li>volatile 키워드를 추가하여 각 CPU의 Cache가 아닌 메인 메모리에 값을 저장하고 읽어오기 때문에, 불일치 문제를 해결할 수 있습니다.</li></ul><p>인스턴스를 return해주는 <code>getCentralBank()</code>함수에서 <strong>Double-Check</strong>를 수행하게 됩니다.</p><ol><li><strong>First Check</strong></li></ol><ul><li>인스턴스를 호출할 때 null이면 동기화를 통해 class에 대한 접근을 Lock합니다.</li></ul><ol start="2"><li><strong>Second Check</strong></li></ol><ul><li>접근을 막은 상태에서 다시 한 번 인스턴스가 null인지 확인하고, null이면 객체를 생성합니다.</li></ul><h3 id="LazyHolder-방식"><a href="#LazyHolder-방식" class="headerlink" title="LazyHolder 방식"></a>LazyHolder 방식</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CentralBank</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 외부에서의 생성을 막기위해 private으로 설정</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">CentralBank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="comment">// private한 내부 클래스를 만들고, 그 안에서 final로 인스턴스를 상수화시켜 생성</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CentralBank centralBank = <span class="keyword">new</span> CentralBank();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 호출 시 클래스에서 인스턴스를 호출</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CentralBank <span class="title">getCentralBank</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LazyHolder.centralBank;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LazyHolder 방식은 <strong>윌리엄 푸</strong>가 제안한 방법으로 <strong>Bill Pugh Solution</strong>으로 불리기도 합니다.</p><p>클래스 내부에 private static class를 만들어 사용하고 싶을 때 public static 메서드를 통해 호출하게 됩니다.</p><p>이는 <code>private static class</code>의 특징을 이용하였습니다.</p><ul><li><strong>private static class</strong><ul><li>static이지만 메모리에 바로 올라가지 않고, 누군가가 getCentralBank() 메서드를 호출할 때만 호출이 되게 됩니다.</li><li>처음 호출할 때 JVM이 LazyHolder를 load하여 초기화합니다.</li><li>LazyHolder 클래스를 초기화하면 인스턴스(centralBank)가 초기화시키기 위해 생성자를 호출합니다.</li><li>클래스 초기화 단계는 <strong>JLS에 의해 순차적으로 보장</strong>되므로, 호출 시에 추가적인 동기화는 불필요하게 됩니다.</li><li>또한 static 변수인 centralBank를 순차적으로 입력하기 때문에 동기화가 불필요합니다.</li></ul></li></ul><p>내부 변수 또한 <code>final</code>키워드를 통해 차후에 값이 변하지 않도록 설정하였습니다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="DesignPattern" scheme="http://bedongryeol.github.io/categories/DesignPattern/"/>
    
    
    <category term="singleton" scheme="http://bedongryeol.github.io/tags/singleton/"/>
    
    <category term="디자인 패턴" scheme="http://bedongryeol.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>LINUX의 사용</title>
    <link href="http://bedongryeol.github.io/09/29/Aboutlinux/"/>
    <id>http://bedongryeol.github.io/09/29/Aboutlinux/</id>
    <published>2021-09-29T12:51:03.000Z</published>
    <updated>2021-10-07T11:28:31.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="리눅스-파일-및-권한-관리"><a href="#리눅스-파일-및-권한-관리" class="headerlink" title="리눅스 파일 및 권한 관리"></a>리눅스 파일 및 권한 관리</h1></blockquote><h4 id="리눅스의-default-editor로-주로-사용되는-bash를-통해-관련-명령을-알아보자"><a href="#리눅스의-default-editor로-주로-사용되는-bash를-통해-관련-명령을-알아보자" class="headerlink" title="리눅스의 default editor로 주로 사용되는 bash를 통해 관련 명령을 알아보자."></a>리눅스의 default editor로 주로 사용되는 <code>bash</code>를 통해 관련 명령을 알아보자.</h4><blockquote><h2 id="User-관련-명령어"><a href="#User-관련-명령어" class="headerlink" title="User 관련 명령어"></a>User 관련 명령어</h2></blockquote><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><ul><li>super user do의 약어로 관리자 권한으로 실행할 때 명령어 앞에 붙여 사용한다.</li></ul><p><img src="/image/img.png" alt="img.png"></p><h3 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h3><ul><li>로그인한 사용자의 ID를 알려준다.</li></ul><p><img src="/image/img_1.png" alt="img_1.png"></p><h3 id="useradd-adduser"><a href="#useradd-adduser" class="headerlink" title="useradd | adduser"></a>useradd | adduser</h3><ul><li>사용자를 추가할 때 사용된다.</li><li>useradd : 사용자 기본 설정을 자동으로 하지 않고 추가한다.<ul><li>계정을 생성할 때 필요한 모든 설정들을 명시해주어야 한다.</li></ul></li><li>adduser : 사용가 기본 설정을 자동으로 수행한다.<ul><li>/etc/adduser.conf 에 있는 정보를 물어보고 설정하게 해준다.</li><li>사용자 홈 디렉토리 생성 등<br><img src="/image/img_2.png" alt="img_2.png"></li></ul></li></ul><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><ul><li>로그인한 사용자 ID의 암호를 설정 / 변경한다.</li></ul><p><img src="/image/img_3.png" alt="img_3.png"></p><h3 id="su-su"><a href="#su-su" class="headerlink" title="su | su -"></a>su | su -</h3><ul><li>사용자를 변경할 때 사용한다.</li><li>su user : 현재 로그인 되어있는 사용자의 환경 설정을 기반으로, 계정만 user로 전환한다.</li><li>su - user : user의 환경설정을 기반으로 계정을 user로 전환한다.</li></ul><blockquote><h2 id="Directory-File-일반-명령어"><a href="#Directory-File-일반-명령어" class="headerlink" title="Directory/File 일반 명령어"></a>Directory/File 일반 명령어</h2></blockquote><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><ul><li>현재 디렉토리 확인</li></ul><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><ul><li>폴더 이동</li><li><code>cd ~</code> : home으로 이동</li><li><code>cd -</code> : 이전 폴더로 이동</li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul><li>현재 디렉토리의 파일 목록 출력</li><li><code>ls -al</code>로 주로 사용된다.<br><img src="/image/img_4.png" alt="img_4.png"></li><li>디렉토리 내 파일의 다양한 정보를 포함하고 있다.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   (1)    (2) (3)  (4)  (5)   (6)   (7)  (8)  </span><br><span class="line">drwxr-xr-x 4 root root 4096 Sep 29 11:55 ..</span><br></pre></td></tr></table></figure></li></ul><ol><li>10개의 문자로 이루어지며, <strong>1, 3, 3, 3개의 문자</strong>로 구분하여 읽는다.<ul><li>첫 번째 그룹(1) : d, l, - 이 위치할 수 있다.<ul><li>d : directory, 폴더(디렉토리)</li><li>l : link, 링크</li><li>f : file, 파일</li></ul></li><li>두 번째 그룹(2~4) : 소유자가 갖는 권한</li><li>세 번째 그룹(5~7) : 그룹이 갖는 권한</li><li>네 번째 그룹(8~10) : 기타 사용자가 갖는 권한<ul><li>권한을 표현하는 방법 중에는 rwx로 표현하는 기호 표기법과 숫자 표기법이 있다. </li></ul></li></ul></li><li>하드링크 번호 : 링크된 파일의 수를 의미한다.</li><li>소유자</li><li>소유 그룹 (소유자의 소유 그룹이 없을 때는 소유자를 나타낸다.)</li><li>파일의 크기(Byte)</li><li>파일이 생성, 수정된 날짜</li><li>파일이 생성, 수정된 시간</li><li>파일 및 디렉토리 이름</li></ol><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul><li>파일 내용 출력<br><img src="/image/img_5.png" alt="img_5.png"></li></ul><h3 id="head-tail"><a href="#head-tail" class="headerlink" title="head | tail"></a>head | tail</h3><ul><li>파일 내용 출력 (출력되는 라인 수 설정 가능)</li><li>기본 값 : 10</li></ul><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><ul><li>파일 내용 출력</li><li>파일 내용을 터미널 화면의 크기에 맞춰 페이지 단위로 보여준다.</li><li>스페이스바로 다음 페이지를 확인할 수 있으며 끝까지 확인하면 화면이 종료된다.<br><img src="/image/img_6.png" alt="img_6.png"></li></ul><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul><li>삭제</li><li>LINUX에는 휴지통이 없으므로 파일이 바로 삭제된다.</li><li><code>rm -rf</code>로 디렉토리를 삭제하면 하위 모든 파일과 함께 강제로 삭제된다.</li><li>r : recursive</li><li>f : force</li></ul><blockquote><h2 id="Directory-File-권한-관련-명령어"><a href="#Directory-File-권한-관련-명령어" class="headerlink" title="Directory/File 권한 관련 명령어"></a>Directory/File 권한 관련 명령어</h2></blockquote><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><ul><li>change mode : 파일 권한 변경</li><li><code>ls -al</code>에서 나타났던 권한을 변경한다.</li><li>기호 표기법<ul><li>누구에게 : u(사용자), g(그룹), o(기타 사용자), a(전부)</li><li>권한을 : +(준다), -(뺐는다), =(설정)</li><li>권한 : r(읽기), w(쓰기), x(실행)</li><li>모두에게 profile 파일에 대한 읽기 권한을 준다.</li><li><code>chmode a+r profile</code></li></ul></li><li>숫자 표기법<ul><li>소유자, 그룹, 기타 사용자에 대한 권한을 3개의 숫자로 표현한다.</li><li>3비트로 구성되어 r = 4, w = 2 , x = 1를 뜻한다.</li><li>rwxrwxrwx :777</li><li>rwx—— : 700</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="LINUX" scheme="http://bedongryeol.github.io/categories/Basic/LINUX/"/>
    
    
    <category term="LINUX" scheme="http://bedongryeol.github.io/tags/LINUX/"/>
    
  </entry>
  
  <entry>
    <title>M1 환경에서 LINUX 설치</title>
    <link href="http://bedongryeol.github.io/09/29/linux/"/>
    <id>http://bedongryeol.github.io/09/29/linux/</id>
    <published>2021-09-29T12:10:49.000Z</published>
    <updated>2021-10-07T11:28:31.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="Virtual-Machine"><a href="#Virtual-Machine" class="headerlink" title="Virtual Machine"></a>Virtual Machine</h1><h3 id="Parallels-Desktop-for-Mac-버전-17"><a href="#Parallels-Desktop-for-Mac-버전-17" class="headerlink" title="Parallels Desktop for Mac 버전 17"></a>Parallels Desktop for Mac 버전 17</h3></blockquote><p>Intel 등의 CPU는 가상화 기술을 지원하지만 M1은 아직 안정적으로 지원하지 않고 있었다.</p><p>하지만 지난 8월 가상화 소프트웨어 전문 기업인 <strong>Parallels</strong>에서 애플 M1칩 기반 맥에서 정식적으로 가상화를 지원하는 <strong>Parallels Desktop for Mac 버전 17</strong>을 공개하였다.</p><div class="figure fig-75 center" style="width:;"><img class="fig-img" src="https://it.donga.com/media/__sized__/images/2021/8/13/e0ac8508028840e7-thumbnail-1920x1080-70.jpg" alt=""></div><div style="clear:both;"></div><p>출처 : Parallels 공식 홈페이지</p><p>M1 칩 맥에서도 Linux의 Ubuntu, Fedora, Windows 11버전 등의 가상화를 지원한다.</p><blockquote><h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1></blockquote><p><a href="https://www.parallels.com/products/desktop/">Parallels 다운로드 링크</a></p><p><a href="https://ubuntu.com/download/server/arm">Ubuntu Server 다운로드 링크</a></p><h4 id="위-링크를-통해-Parallels와-Ubuntu-Server-이미지를-다운로드하였다"><a href="#위-링크를-통해-Parallels와-Ubuntu-Server-이미지를-다운로드하였다" class="headerlink" title="위 링크를 통해 Parallels와 Ubuntu Server 이미지를 다운로드하였다."></a>위 링크를 통해 Parallels와 Ubuntu Server 이미지를 다운로드하였다.</h4><p><img src="/image/linux1.PNG" alt="img_1.png"></p><p><img src="/image/linux.PNG" alt="img_3.png"></p><h4 id="안정적으로-가상화가-되었다"><a href="#안정적으로-가상화가-되었다" class="headerlink" title="안정적으로 가상화가 되었다."></a>안정적으로 가상화가 되었다.</h4>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="LINUX" scheme="http://bedongryeol.github.io/categories/Basic/LINUX/"/>
    
    
    <category term="M1" scheme="http://bedongryeol.github.io/tags/M1/"/>
    
    <category term="Linux" scheme="http://bedongryeol.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>REST(Representational State Transfer)</title>
    <link href="http://bedongryeol.github.io/09/29/rest/"/>
    <id>http://bedongryeol.github.io/09/29/rest/</id>
    <published>2021-09-29T05:54:36.000Z</published>
    <updated>2021-09-29T05:56:38.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="REST-Representational-State-Transfer"><a href="#REST-Representational-State-Transfer" class="headerlink" title="REST (Representational State Transfer)"></a>REST (Representational State Transfer)</h1></blockquote><h2 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h2><ol><li>Client와 Server의 분리<ul><li>서로 독립적으로 분리되어 있어야 한다.</li></ul></li><li>Stateless<ul><li>요청에 대해서 클라이언트의 상태를 서버에 저장하지 않는다.</li><li>매 요청을 새롭게 처리한다</li></ul></li><li>Cache (캐시)<ul><li>클라이언트는 서버의 응답을 임시 저장하여, 재사용하고 부하를 낮추어야한다.</li></ul></li><li>Layered System (계층화)<ul><li>서버와 클라이언트 사이를 다양한 계층 형태로 구성하고, 이를 확장할 수 있어야한다.</li></ul></li><li>인터페이스 일관성<ul><li>인터페이스의 일관성을 지킨다.</li><li>아키텍처를 단순화, 작은 단위로 분리하여 클라이언트, 서버를 독립적으로 개선할 수 있어야한다.</li></ul></li></ol><blockquote><p>인터페이스의 일관성을 기초로 REST를 잘 사용하였는지 판단할 수 있다.</p><ul><li>자원의 식별<ul><li>URI를 통하여 리소스에 접근한다.</li></ul></li><li>메시지를 통한 리소스 조작<ul><li>데이터의 타입을 알려주는 header부분의 content-type</li></ul></li><li>자기 서술적 메시지<ul><li>요청하는 데이터가 어떻게 처리되어야하는지 충분한 데이터 포함</li></ul></li><li>애플리케이션 상태에 대한 엔진으로써 하이퍼미디어<ul><li>요청에 대한 데이터만이 아닌 관련된 리소스에 대한 Link정보 포함</li></ul></li></ul></blockquote><ol start="6"><li>Code On Demand<ul><li>특정 기능을 서버로부터 전달받아 클라이언트가 실행할 수 있어야한다.</li></ul></li></ol><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><ol><li>GET<ul><li>리소스 취득</li><li>CRUD 중 R(Read)</li></ul></li><li>POST<ul><li>리소스 생성, 추가</li><li>CRUD 중 C(Create)</li></ul></li><li>PUT<ul><li>리소스 갱신, 생성</li><li>CRUD 중 C(Create)/U(Update)</li><li>데이터가 없으면 생성하고, 있으면 갱신한다.</li></ul></li><li>DELETE<ul><li>리소스 삭제</li><li>CRUD 중 D(Delete)</li></ul></li><li>HEAD<ul><li>헤더 데이터 취득</li></ul></li><li>OPTIONS<ul><li>지원하는 메소드 취득</li></ul></li><li>TRACE<ul><li>요청메시지 반환</li></ul></li><li>CONNECT<ul><li>프록시 동작의 터널 접속으로 변경</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Web" scheme="http://bedongryeol.github.io/categories/Basic/Web/"/>
    
    
    <category term="REST" scheme="http://bedongryeol.github.io/tags/REST/"/>
    
    <category term="Web" scheme="http://bedongryeol.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>gRPC (Google Remote Procedure Call)</title>
    <link href="http://bedongryeol.github.io/09/16/gRPC/"/>
    <id>http://bedongryeol.github.io/09/16/gRPC/</id>
    <published>2021-09-16T10:44:25.000Z</published>
    <updated>2021-09-16T12:45:28.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="gRPC는-무엇인가"><a href="#gRPC는-무엇인가" class="headerlink" title="gRPC는 무엇인가?"></a>gRPC는 무엇인가?</h1></blockquote><p>Google사에서 개발한 RPC(Remote Procedure Call) 시스템으로, HTTP 2.0, TCP/IP 프로토콜을 사용한다.</p><ul><li>RPC는 원격 프로시저 호출로 별도의 코딩없이 다른 주소의 메서드나 프로시저를 실행할 수 있게하는 프로세스 간의 통신 기술이다.</li></ul><p>프로토콜 버퍼(protocol buffer)를 인터페이스 정의어(IDL),  메세지 교환 형식으로 사용한다.</p><ul><li>프로토콜 버퍼를 사용하여 보다 빠르고, 편리하게 통신할 수 있다.</li><li><a href="https://jeong-pro.tistory.com/190">프로토콜 버퍼란?</a> (개인적으로 프로토콜 버퍼를 이해할 때 참고한 블로그입니다.)<ul><li>장점<ul><li>통신이 빠르다</li><li>파싱을 할 필요가 없다</li></ul></li><li>단점<ul><li>프로토콜 버퍼에서 독자적으로 쓰이는 proto 문법을 익혀야한다.</li><li>모든 클라이언트에서 proto파일이 있어야 하기 때문에 내부 서비스 데이터 교환에서 주로 쓰인다.</li></ul></li></ul></li></ul><p>gRPC를 사용하면 클라이언트 단에서 서버 단의 메소드를 로컬 객체처럼 바로 호출할 수 있다.</p><ul><li>Server side : 인터페이스를 구현하여 Client 요청을 handling할 수 있다.</li><li>Client side : 서버에 있는 메소드와 동일한 stub을 제공한다.<ul><li>stub을 client라 칭하는 언어도 있다.</li></ul></li></ul><div class="figure center" style="width:;"><img class="fig-img" src="https://grpc.io/img/landing-2.svg" alt=""></div><div style="clear:both;"></div><p>출처 : <a href="https://grpc.io/">https://grpc.io/</a></p><p>서버와 클라이언트 구글 내부 서버부터 데스크톱까지 다양한 환경에서 실행도 가능하다.</p><p>API에서도 지원하여 기능 구현에 용이하다.  </p><p>지원하는 언어로 서버와 클라이언트를 구현할 수 있다.</p><ul><li>서버는 java, 클라이언트는 python과 같이 다른 언어로 구현할 수 있다.</li></ul><span class="highlight-text success">빠른 데이터 처리, 편리하고 유연한 환경을 계속해서 강조하고 있다. </span> <blockquote><h1 id="RPC-Life-Cycle"><a href="#RPC-Life-Cycle" class="headerlink" title="RPC Life Cycle"></a>RPC Life Cycle</h1></blockquote><h2 id="Unary-RPC-단항-RPC"><a href="#Unary-RPC-단항-RPC" class="headerlink" title="Unary RPC (단항 RPC)"></a>Unary RPC (단항 RPC)</h2><p>클라이언트에서 <strong>단일 요청</strong>을 보내고 <strong>단일 응답</strong> 받는다.</p><ol><li>클라이언트가 stub 메서드를 호출하면 이에 대한 메타데이터(요청, 메소드명, 대기시간 등)를 서버에 알린다.<ul><li>서버는 response를 보내기 전에 초기 메타데이터를 클라이언트에 바로 되돌려주거나, 요청 메시지를 기다린다.    </li><li>어떤 것이 먼저 발생할 지는 application마다 다르다.</li></ul></li><li>클라이언트의 요청 메시지를 받으면 서버에서는 응답 생성에 필요한 모든 실행을 한다.<ul><li>성공적으로 생성 시 status code, message 등과 함께 response를 보낸다.</li></ul></li></ol><h2 id="Server-Streaming-RPC"><a href="#Server-Streaming-RPC" class="headerlink" title="Server Streaming RPC"></a>Server Streaming RPC</h2><ul><li>클라이언트가 <strong>단일 요청</strong> 시 서버는 응답에 대해 <strong>stream을 응답</strong>하는 것을 제외하면 단항 RPC와 동일하다.</li></ul><h2 id="Client-streaming-RPC"><a href="#Client-streaming-RPC" class="headerlink" title="Client streaming RPC"></a>Client streaming RPC</h2><ul><li>클라이언트가 단일 요청이 아닌 메시지의 <strong>stream으로 요청</strong>하는 것을 제외하면 단항 RPC와 동일하다.</li></ul><h2 id="Bidirectional-streaming-RPC"><a href="#Bidirectional-streaming-RPC" class="headerlink" title="Bidirectional streaming RPC"></a>Bidirectional streaming RPC</h2><p>클라이언트가 메서드를 호출하고, 서버가 client의 메타데이터를 받으면 시작된다.</p><ul><li>서버는 초기 메타데이터를 응답하거나, 클라이언트가 메시지를 streaming할 때 까지 대기한다.</li></ul><p>Client side와 Server side의 스트림 처리는 애플리케이션마다 다르다.<br>    - 두 스트림이 독립적이므로 순서에 상관없이 메시지를 읽고 쓸 수 있다.<br>        - 클라이언트의 모든 메시지를 수신할 때까지 서버는 대기하거나, 계속 해서 요청과 응답을 주고받을 수 있다.</p><blockquote><h1 id="Terminate-Cancel"><a href="#Terminate-Cancel" class="headerlink" title="Terminate | Cancel"></a>Terminate | Cancel</h1></blockquote><h2 id="Terminate-종료"><a href="#Terminate-종료" class="headerlink" title="Terminate (종료)"></a>Terminate (종료)</h2><p>클라이언트와 서버에서는 <strong>호출에 대한 성공 여부</strong>를 각각 독립적이고, local하게 결정을 내린다.</p><ul><li>서버에서는 성공, 클라이언트에서는 실패가 나올 수 있다.</li><li>서버에서 모든 response를 성공적으로 보내도, 클라이언트의 Deadline이 지나서 응답하면 클라이언트는 실패로 인식한다.<ul><li>클라이언트는 요청에 대한 응답까지의 시간을 지정할 수 있으며, 시간이 지나면 <code>DEADLINE_EXCEEDED</code> Error로 종료된다.  </li><li>서버에서는 DeadLine까지 남은 시간과 시간이 만료된 요청이 있는지 query를 통해 확인할 수 있다.</li></ul></li></ul><p>클라이언트의 요청이 끝나지않아도 서버에서 완료 처리를 할 수 있다.</p><h2 id="Cancel-취소"><a href="#Cancel-취소" class="headerlink" title="Cancel (취소)"></a>Cancel (취소)</h2><p>클라이언트와 서버단에서 언제든 RPC에 대해 취소할 수 있고, 취소할 시 RPC가 즉시 종료된다.</p><ul><li>취소 이전의 내용은 복구할 수 없음에 유의하여야 한다.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Docs" scheme="http://bedongryeol.github.io/categories/Docs/"/>
    
    
    <category term="gRPC" scheme="http://bedongryeol.github.io/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>AOP (Aspect Oriented Programming)</title>
    <link href="http://bedongryeol.github.io/09/13/AOP/"/>
    <id>http://bedongryeol.github.io/09/13/AOP/</id>
    <published>2021-09-13T12:49:28.000Z</published>
    <updated>2021-10-07T11:28:31.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="AOP-Aspect-Oriented-Programming"><a href="#AOP-Aspect-Oriented-Programming" class="headerlink" title="AOP (Aspect Oriented Programming)"></a>AOP (Aspect Oriented Programming)</h1></blockquote><p>관점 지향 프로그래밍이라고도 불리는 AOP는 로직을 <span class="highlight-text success">핵심, 부가적인 관점을 나누어 각각 모듈화하는 프로그래밍</span>이다.</p><ul><li>핵심적인 관점 : 핵심 비즈니스 로직</li><li>부가적인 관점 : DB 연결, 로깅, 파일 입출력 등</li></ul><p>AOP를 통해 스프링 IoC와 연동하여 중복 코드, 객체 간 복잡도 등에 대한 해결책을 지원한다.</p><ul><li>중복되는 코드를 Aspect로 모듈화하여 재사용성을 높일 수 있다.</li><li><p>중복되는 코드들을 <span class="highlight-text success">흩어진 관심사(Crosscutting Concerns)</span> 라고 칭한다.</p></li><li>실행 전 후 특정 기능 추가(method의 실행시간 체크 등), response 정보 저장 등    </li></ul><p>Spring Bean(스프링 빈)에만 적용 가능하며, 접근 제어와 부가 기능 추가를 위해 proxy패턴 기반의 구현체를 사용한다.</p><blockquote><h2 id="AOP-구성-요소"><a href="#AOP-구성-요소" class="headerlink" title="AOP 구성 요소"></a>AOP 구성 요소</h2></blockquote><div class="figure fig-50 center" style="width:;"><img class="fig-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--6mjjk9E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pe617dbmwowpyyo1ycgw.png" alt=""></div><div style="clear:both;"></div><p>출처 : cloudinary</p><ul><li><p><strong>Aspect</strong></p><ul><li>중복되는 코드(흩어진 관심사)를 모듈화한 것</li></ul></li><li><p><strong>Target Object</strong> </p><ul><li>Aspect가 적용되는 클래스, 메서드 등의 객체</li></ul></li><li><p><strong>Proxy</strong> </p><ul><li>Aspect와 Target을 연결해주는 클래스</li></ul></li><li><p><strong>Join Point</strong> </p><ul><li>Advice가 적용되는 지점 (실행 전 후 특정 기능 추가와 관련)</li></ul></li><li><p><strong>Point Cut</strong> </p><ul><li>JointPoint를 구체화한 Advice가 실행 될 지점 </li></ul></li><li><p><strong>Advice</strong> </p><ul><li>Joint Point, Point Cut에서 실행되는 코드, 실질적인 구현부</li></ul></li><li><p><strong>Weaving</strong> </p><ul><li>Joint Point에 Advice를 적용하는 방법</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Spring" scheme="http://bedongryeol.github.io/categories/Basic/Spring/"/>
    
    
    <category term="AOP" scheme="http://bedongryeol.github.io/tags/AOP/"/>
    
    <category term="DesignPattern" scheme="http://bedongryeol.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>데코레이터 패턴 (Decorator Pattern)</title>
    <link href="http://bedongryeol.github.io/09/06/DecoratorPattern/"/>
    <id>http://bedongryeol.github.io/09/06/DecoratorPattern/</id>
    <published>2021-09-06T12:36:13.000Z</published>
    <updated>2021-10-07T11:27:20.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="데코레이터-패턴"><a href="#데코레이터-패턴" class="headerlink" title="데코레이터 패턴"></a>데코레이터 패턴</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>여러 decorator들을 활용하여 다양한 기능을 제공한다.<ul><li>상속보다 유연한 방식을 갖는다.</li><li>지속적인 기능의 추가 제거가 용이하다.</li></ul></li><li>다른 데코레이터나 컴포넌트를 포함하여야한다.    <ul><li>기반 스트림 클래스 : 직접 읽고 쓸 수 있다. (Component)</li><li>보조 스트림 : 추가 기능 제공 (Decorator)</li></ul></li></ul><h2 id="구성"><a href="#구성" class="headerlink" title="구성"></a>구성</h2><ul><li><p>최상위 컴포넌트 (예시 : Coffee)</p></li><li><p>하위 컴포넌트 (예시 : EtiopiaAmericano)</p></li><li><p>데코레이터 (예시 : Decorator)</p></li><li><p>하위 데코레이터 (예시 : Moch, Latte)</p></li><li><p>하위 컴포넌트와 데코레이터는 최상위 컴포넌트를 상속받는다.</p></li><li><p>데코레이터는 혼자 쓰이지않고, 상속용(abstract)으로 구현한다.</p><blockquote><p>@Decorator</p><ul><li>최상위 컴포넌트의 default Constructor가 없으므로, 생성자를 명시해준다.</li></ul><p>@하위 Decorator</p><ul><li>상위 클래스 Decorator의 default 생성자가 없으므로 매개변수가 있는 super를 명시적으로 호출해야한다.</li></ul></blockquote></li><li><p>하위 데코레이터는 데코레이터는 상속받아 각 기능을 구현한다.</p><blockquote><p>하위 컴포넌트 생성시 하위 데코레이터를 wrapper 형식을 통해 원하는 기능을 추가한다.</p></blockquote></li></ul><details><summary>최상위 컴포넌트 예제코드</summary><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package ch17;</span><br><span class="line"></span><br><span class="line">public abstract class Coffee &#123;</span><br><span class="line"></span><br><span class="line"><span class="code">    public abstract void brewing();</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure></details><details><summary>하위 컴포넌트 예제 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EtiopiaAmericano</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Etiopia Americano&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>데코레이터 예제코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"><span class="comment">// 데코레이터는 혼자 쓰이지 않는다. (상속용으로 쓰인다.)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// component를 멤버 변수, 생성자 parameter로 갖는다.</span></span><br><span class="line">    Coffee coffee;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Coffee coffee)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        coffee.brewing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>하위 데코레이터 예제코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Moch</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Moch</span><span class="params">(Coffee coffee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.brewing();</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding Moch syrup&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Latte</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="comment">// 상위 클래스 Decorator의 default 생성자가 없으므로 매개변수가 있는 super를 명시적으로 호출해야한다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Latte</span><span class="params">(Coffee coffee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.brewing();</span><br><span class="line">        System.out.print(<span class="string">&quot;Adding Milk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>테스트 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 하위(상세) 컴포넌트 생성</span></span><br><span class="line">        Coffee etio = <span class="keyword">new</span> EtiopiaAmericano();</span><br><span class="line">        etio.brewing();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 하위(상세) Decorator로 기능을 추가한 컴포넌트</span></span><br><span class="line">        Coffee mochEtio = <span class="keyword">new</span> Moch(<span class="keyword">new</span> EtiopiaAmericano());</span><br><span class="line">        mochEtio.brewing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="DesignPattern" scheme="http://bedongryeol.github.io/categories/DesignPattern/"/>
    
    
    <category term="데코레이터 패턴" scheme="http://bedongryeol.github.io/tags/%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4/"/>
    
    <category term="Decorator Pattern" scheme="http://bedongryeol.github.io/tags/Decorator-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>직렬화 (Serialization)</title>
    <link href="http://bedongryeol.github.io/09/06/Serial/"/>
    <id>http://bedongryeol.github.io/09/06/Serial/</id>
    <published>2021-09-06T12:36:07.000Z</published>
    <updated>2021-09-09T14:05:51.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="직렬화-Serialization"><a href="#직렬화-Serialization" class="headerlink" title="직렬화 (Serialization)"></a>직렬화 (Serialization)</h1><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><ul><li>인스턴스의 상태를 그대로 저장(파일), 전송(네트워크), 복원하는 방식</li><li>바이트 스트림의 연속으로 객체 정보를 저장하고, 복원한다.</li><li>보조 스트림을 활용한다.</li></ul><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><ul><li>직렬화는 인스턴스의 정보가 외부로 유출되는 것이다.</li><li>직렬화를 하려면 명시해줘야한다. (Marker interface)<ul><li><code>implements Serializable</code></li><li>구현코드가 없는 interface</li></ul></li><li>클래스 내에서 직렬화하고 싶지 않은 변수, 불가능한 변수는 <code>transient</code>로 명시한다.<ul><li> default 값으로 출력된다. (String = null)</li></ul></li></ul><details><summary>예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">transient</span> String job;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String job)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;,&quot;</span> + job;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person personLee = <span class="keyword">new</span> Person(<span class="string">&quot;이순신&quot;</span>, <span class="string">&quot;대표&quot;</span>);</span><br><span class="line">        Person personKim = <span class="keyword">new</span> Person(<span class="string">&quot;김유신&quot;</span>, <span class="string">&quot;상무이사&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;serial.txt&quot;</span>);</span><br><span class="line">             ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Serialization</span></span><br><span class="line">            oos.writeObject(personLee);</span><br><span class="line">            oos.writeObject(personKim);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;serial.txt&quot;</span>);</span><br><span class="line">             ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis))</span><br><span class="line">        &#123;</span><br><span class="line">            Person pLee = (Person)ois.readObject();</span><br><span class="line">            Person pKim = (Person)ois.readObject();</span><br><span class="line">            System.out.println(pLee);</span><br><span class="line">            System.out.println(pKim);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li><code>implements Externalizable</code><ul><li>읽고 쓰는 메서드를 구현해주어야 한다.</li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String job;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, String job)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;, &quot;</span> + job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeUTF(name);</span><br><span class="line">        out.writeUTF(job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        name = in.readUTF();</span><br><span class="line">        job = in.readUTF();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalizableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People peopleLee = <span class="keyword">new</span> People(<span class="string">&quot;이순신&quot;</span>, <span class="string">&quot;대표&quot;</span>);</span><br><span class="line">        People peopleKim = <span class="keyword">new</span> People(<span class="string">&quot;김유신&quot;</span>, <span class="string">&quot;상무이사&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;external.txt&quot;</span>);</span><br><span class="line">             ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos))</span><br><span class="line">        &#123;</span><br><span class="line">            oos.writeObject(peopleLee);</span><br><span class="line">            oos.writeObject(peopleKim);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;external.txt&quot;</span>);</span><br><span class="line">             ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis))&#123;</span><br><span class="line">            People peopleL = (People)ois.readObject();</span><br><span class="line">            People peopleK = (People)ois.readObject();</span><br><span class="line">            System.out.println(peopleL);</span><br><span class="line">            System.out.println(peopleK);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Java" scheme="http://bedongryeol.github.io/categories/Basic/Java/"/>
    
    
    <category term="Serialization" scheme="http://bedongryeol.github.io/tags/Serialization/"/>
    
    <category term="직렬화" scheme="http://bedongryeol.github.io/tags/%EC%A7%81%EB%A0%AC%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>쓰레드 (Thread)</title>
    <link href="http://bedongryeol.github.io/09/06/Thread/"/>
    <id>http://bedongryeol.github.io/09/06/Thread/</id>
    <published>2021-09-06T12:36:02.000Z</published>
    <updated>2021-09-09T14:06:32.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="쓰레드"><a href="#쓰레드" class="headerlink" title="쓰레드"></a>쓰레드</h1><h2 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h2><h3 id="프로세스-Process"><a href="#프로세스-Process" class="headerlink" title="프로세스 (Process)"></a>프로세스 (Process)</h3><ul><li>실행 중인 프로그램이 실행되면 OS로부터 메모리를 할당받아 프로세스 상태가 된다.</li><li>프로그램이 메모리에 올라간 상태</li><li>프로세스는 하나 이상의 쓰레드를 가지게 된다.</li></ul><h3 id="쓰레드-Thread"><a href="#쓰레드-Thread" class="headerlink" title="쓰레드 (Thread)"></a>쓰레드 (Thread)</h3><ul><li>프로세스가 메모리를 점유하고 CPU에서 수행이 된다.</li><li>쓰레드 : CPU에서 프로세스가 실행되는 단위</li><li>스케줄러 : 쓰레드의 배분</li><li>웹서버에 멀티쓰레드가 구현되어 있기 때문에 웹프로그래밍에서는 멀티쓰레드를 구현할 일이 없다.</li><li>쓰레드는 자신만의 작업 공간인 context(변수 정보 등)를 가지고 있다.</li></ul><h4 id="쓰레드-상태-Thread-Status"><a href="#쓰레드-상태-Thread-Status" class="headerlink" title="쓰레드 상태 (Thread Status)"></a>쓰레드 상태 (Thread Status)</h4><ul><li><p>Runnable  </p><ul><li>쓰레드가 start 되면 쓰레드 풀에서 대기하게 된다.</li><li>언제든지 CPU가 배분되면 실행될 수 있는 상태</li></ul></li><li><p>Not Runnable</p><ul><li>CPU를 절대 점유할 수 없는 상태</li><li>자바에서 메서드를 통해 Not Runnable로 만들 수 있다.<ol><li><strong>sleep(millisecond)</strong><ul><li>millisecond후에 Runnable로 변경 </li></ul></li><li><strong>wait()</strong><ul><li>자원이 한정되어 있을 때, 유효한 thread가 생길 때 까지 대기상태</li><li>유효한 상태가 되면 <strong>notify</strong>, <strong>notifyAll</strong>을 통해 쓰레드를 불러온다.</li></ul></li><li><strong>join()</strong><ul><li>한 개의 쓰레드가 다른 쓰레드를 참조할 때 join()을 하면 참조하는 쓰레드가 끝날 때 까지 자기 자신을 Not Runnable 상태로 만든다.</li></ul></li></ol></li></ul></li><li><p>Dead</p><ul><li>쓰레드가 다 수행된 상태, 종료된 상태</li></ul></li></ul><h4 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait() / notify()"></a>wait() / notify()</h4><ul><li>리소스가 유효하지 않은 경우 유효할 때 까지 Thread는 wait상태가 된다.</li><li>유효한 리소스가 생기면 <code>notify()</code>/<code>notifyAll()</code>를 통해 Thread가 호출된다.<ul><li>notify() : 무작위 쓰레드 호출</li><li>notifyAll() : wait상태의 Thread 모두 호출<ul><li>유효한 리소스만큼 호출되며, 자원을 갖지 못하면 다시 wait상태가 된다.</li></ul></li></ul></li><li>예제<ul><li>도서관(공유 자원)에서 책을 빌리려하는 학생(Thread)이 있다.</li><li>책(자원)은 한정되어 있고, 학생(쓰레드)들이 책(자원)을 빌리려 할 때 책이 없으면 wait()</li><li>책(자원)이 반납되면 다른 학생(쓰레드)가 빌림</li></ul></li></ul><details><summary>notify 예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;String&gt; shelf = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Library</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥1&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥2&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">lendBook</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shelf.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : waiting start&quot;</span>);</span><br><span class="line">            wait();</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : waiting end&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shelf.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            String book = shelf.remove(<span class="number">0</span>);</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : &quot;</span> + book + <span class="string">&quot; lend&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> book;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">returnBook</span><span class="params">(String book)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        shelf.add(book);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; : &quot;</span> + book + <span class="string">&quot; return&quot;</span>);</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String title = LibraryMain.library.lendBook();</span><br><span class="line">            <span class="keyword">if</span> (title == <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot; : 빌리지 못했음&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sleep(<span class="number">5000</span>);</span><br><span class="line">            LibraryMain.library.returnBook(title);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LibraryMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Library library = <span class="keyword">new</span> Library();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student std1 = <span class="keyword">new</span> Student(<span class="string">&quot;std1&quot;</span>);</span><br><span class="line">        Student std2 = <span class="keyword">new</span> Student(<span class="string">&quot;std2&quot;</span>);</span><br><span class="line">        Student std3 = <span class="keyword">new</span> Student(<span class="string">&quot;std3&quot;</span>);</span><br><span class="line">        Student std4 = <span class="keyword">new</span> Student(<span class="string">&quot;std4&quot;</span>);</span><br><span class="line">        Student std5 = <span class="keyword">new</span> Student(<span class="string">&quot;std5&quot;</span>);</span><br><span class="line">        Student std6 = <span class="keyword">new</span> Student(<span class="string">&quot;std6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        std1.start();</span><br><span class="line">        std2.start();</span><br><span class="line">        std3.start();</span><br><span class="line">        std4.start();</span><br><span class="line">        std5.start();</span><br><span class="line">        std6.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>notifyAll() 예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;String&gt; shelf = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Library</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥1&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥2&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">lendBook</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (shelf.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : waiting start&quot;</span>);</span><br><span class="line">            wait();</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : waiting end&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shelf.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            String book = shelf.remove(<span class="number">0</span>);</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : &quot;</span> + book + <span class="string">&quot; lend&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> book;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">returnBook</span><span class="params">(String book)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        shelf.add(book);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; : &quot;</span> + book + <span class="string">&quot; return&quot;</span>);</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String title = LibraryMain.library.lendBook();</span><br><span class="line">            <span class="keyword">if</span> (title == <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot; : 빌리지 못했음&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sleep(<span class="number">5000</span>);</span><br><span class="line">            LibraryMain.library.returnBook(title);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LibraryMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Library library = <span class="keyword">new</span> Library();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student std1 = <span class="keyword">new</span> Student(<span class="string">&quot;std1&quot;</span>);</span><br><span class="line">        Student std2 = <span class="keyword">new</span> Student(<span class="string">&quot;std2&quot;</span>);</span><br><span class="line">        Student std3 = <span class="keyword">new</span> Student(<span class="string">&quot;std3&quot;</span>);</span><br><span class="line">        Student std4 = <span class="keyword">new</span> Student(<span class="string">&quot;std4&quot;</span>);</span><br><span class="line">        Student std5 = <span class="keyword">new</span> Student(<span class="string">&quot;std5&quot;</span>);</span><br><span class="line">        Student std6 = <span class="keyword">new</span> Student(<span class="string">&quot;std6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        std1.start();</span><br><span class="line">        std2.start();</span><br><span class="line">        std3.start();</span><br><span class="line">        std4.start();</span><br><span class="line">        std5.start();</span><br><span class="line">        std6.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="멀티-쓰레딩-Multi-Threading"><a href="#멀티-쓰레딩-Multi-Threading" class="headerlink" title="멀티 쓰레딩 (Multi-Threading)"></a>멀티 쓰레딩 (Multi-Threading)</h3><ul><li>여러 thread가 동시에 수행되는 프로그래밍, 여러 작업이 동시에 실행되는 효과</li><li>thread는 각각 자신만의 작업 공간을 가짐 (context)</li><li>각 thread 사이에서 공유하는 자원이 있을 수 있음 (자바에서는 static instance)</li><li>여러 thread가 자원을 공유하여 작업이 수행되는 경우 서로 자원을 차지하려는 <code>race condition</code>이 발생할 수 있음</li><li>이렇게 여러 thread가 공유하는 자원 중 경쟁이 발생하는 부분을 <code>critical section</code>이라고 함</li><li>critical section에 대한 <code>동기화(일종의 순차적 수행)</code>를 구현하지 않으면 오류가 발생할 수 있음<ul><li>관련 : Synchronization, Monitor, Semaphore 등</li></ul></li></ul><h3 id="동기화-Synchronization"><a href="#동기화-Synchronization" class="headerlink" title="동기화 (Synchronization)"></a>동기화 (Synchronization)</h3><ul><li>공유 자원을 사용할 때 한 쓰레드가 사용 중이면 Lock을 걸어서 다른 쓰레드의 접근을 막는다<ol><li>메서드에 <code>synchronized</code> 키워드 입력</li><li>synchronized 블록 생성 @쓰레드, 메서드<ul><li><code>synchronized(참조형 수식) &#123;&#125;</code></li></ul></li></ol></li></ul><details><summary>예제 코드1 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">saveMoney</span><span class="params">(<span class="keyword">int</span> save)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = getMoney();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setMoney(m + save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">minusMoney</span><span class="params">(<span class="keyword">int</span> minus)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = getMoney();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setMoney(m-minus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Park</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start save&quot;</span>);</span><br><span class="line">        SyncMain.myBank.saveMoney(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;saveMoney : &quot;</span> + SyncMain.myBank.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParkWife</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start minus&quot;</span>);</span><br><span class="line">        SyncMain.myBank.minusMoney(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;minusMoney : &quot;</span> + SyncMain.myBank.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bank myBank = <span class="keyword">new</span> Bank();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Park p = <span class="keyword">new</span> Park();</span><br><span class="line">        p.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ParkWife pw = <span class="keyword">new</span> ParkWife();</span><br><span class="line">        pw.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>예제 코드 2 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveMoney</span><span class="params">(<span class="keyword">int</span> save)</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = getMoney();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setMoney(m + save);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h2><h3 id="우선순위"><a href="#우선순위" class="headerlink" title="우선순위"></a>우선순위</h3><ul><li><code>Thread.MIN_PRIORITY(=1) ~ Thread.MAX_PRIORITY(=10)</code></li><li>디폴트 우선순위 : Thread.NORMAL_PRIORITY(=5)</li><li>우선 순위가 높은 Thread가 CPU의 배분을 받을 <strong>확률이 높다</strong></li><li>우선순위 설정 및 호출이 가능하다<ul><li><code>setPriority()/getPriority()</code></li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line">System.out.println( t + <span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;=<span class="number">1000000</span>; i++)&#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println( t.getPriority() + <span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=Thread.MIN_PRIORITY; i&lt;= Thread.MAX_PRIORITY; i++)&#123;</span><br><span class="line"></span><br><span class="line">PriorityThread pt = <span class="keyword">new</span> PriorityThread();</span><br><span class="line">pt.setPriority(i);</span><br><span class="line">pt.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><ul><li>동시에 두 개 이상의 Thread가 실행 될 때 다른 Thread의 결과를 참조 하여 실행해야 하는 경우 join() 함수를 사용</li><li>join() 함수를 호출한 Thread가 not-runnable 상태가 감</li><li>다른 Thread의 수행이 끝나면 runnable 상태로 돌아옴</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">int</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JoinTest</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = start; i &lt;= end; i++)&#123;</span><br><span class="line">            total += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JoinTest jt1 = <span class="keyword">new</span> JoinTest(<span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line">        JoinTest jt2 = <span class="keyword">new</span> JoinTest(<span class="number">51</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        jt1.start();</span><br><span class="line">        jt2.start();</span><br><span class="line">        <span class="comment">// jt1, jt2가 끝날 때까지 main thread는 Not Runnable 상태가 된다.</span></span><br><span class="line">        <span class="comment">// 무한 루프 등 hang을 해결하기 위해 Exception을 날려준다.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jt1.join();</span><br><span class="line">            jt2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 아직 계산하고 있는 중이라서 값이 할당되지 않을 수 있다.</span></span><br><span class="line">        <span class="keyword">int</span> lastTotal = jt1.total + jt2.total;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;jt1.total = &quot;</span> + jt1.total);</span><br><span class="line">        System.out.println(<span class="string">&quot;jt2.total = &quot;</span> + jt2.total);</span><br><span class="line">        System.out.println(<span class="string">&quot;LastTotal = &quot;</span> + lastTotal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h3><ul><li>다른 Thread에 예외를 발생시키는 interrupt를 보낸다.</li><li>join(), sleep(), wait()에 의해 Not Runnable 상태일 때, 호출하면 다시 runnable 상태가 된다.</li></ul><h3 id="쓰레드-종료"><a href="#쓰레드-종료" class="headerlink" title="쓰레드 종료"></a>쓰레드 종료</h3><ul><li>무한 반복의 경우 while(flag)의 flag를 false로 바꾸어 종료시킨다.</li><li>while(true)가 아닌 다른 값을 입력해주기 위해 변수를 사용한다.</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminateThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TerminateThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!flag)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println( getName() + <span class="string">&quot; end&quot;</span> );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.flag = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">TerminateThread threadA = <span class="keyword">new</span> TerminateThread(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">TerminateThread threadB = <span class="keyword">new</span> TerminateThread(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">TerminateThread threadC = <span class="keyword">new</span> TerminateThread(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"></span><br><span class="line">threadA.start();</span><br><span class="line">threadB.start();</span><br><span class="line">threadC.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">in = System.in.read();</span><br><span class="line"><span class="keyword">if</span> ( in == <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">threadA.setFlag(<span class="keyword">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(in == <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">threadB.setFlag(<span class="keyword">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( in == <span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">threadC.setFlag(<span class="keyword">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( in == <span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">threadA.setFlag(<span class="keyword">true</span>);</span><br><span class="line">threadB.setFlag(<span class="keyword">true</span>);</span><br><span class="line">threadC.setFlag(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;type again&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><h3 id="extends-Thread"><a href="#extends-Thread" class="headerlink" title="extends Thread"></a>extends Thread</h3><ul><li>Thread가 수행이되면 run 메서드가 실행된다.</li><li>기본적으로 메인 쓰레드가 수행이된다.</li><li>예제에서 쓰레드 2개를 추가하여 테스트 (메인 포함 총 3개 쓰레드)</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;=<span class="number">200</span>; i++)&#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 현재 main 내의 thread확인</span></span><br><span class="line">        <span class="comment">// [호출한 함수, priority, threadGroup]</span></span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;start&quot;</span>);</span><br><span class="line">        MyThread th1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread th2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="implements-Runnable"><a href="#implements-Runnable" class="headerlink" title="implements Runnable"></a>implements Runnable</h3><ul><li><code>run 메서드</code>를 override 해주어어야 한다.</li><li>Main에서 Thread를 생성할 때 <code>runnable 객체</code>를 생성하여 <code>생성자의 parameter</code>로 넣어준다. </li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">200</span>; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="comment">// runnable 객체 생성</span></span><br><span class="line">        MyThread runnable = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">// runnable기반으로 쓰레드가 돌아간다.</span></span><br><span class="line">        Thread th1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        Thread th2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line"></span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>        ]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Java" scheme="http://bedongryeol.github.io/categories/Basic/Java/"/>
    
    
    <category term="Thread" scheme="http://bedongryeol.github.io/tags/Thread/"/>
    
    <category term="쓰레드" scheme="http://bedongryeol.github.io/tags/%EC%93%B0%EB%A0%88%EB%93%9C/"/>
    
  </entry>
  
  <entry>
    <title>IOStream</title>
    <link href="http://bedongryeol.github.io/09/02/IOStream/"/>
    <id>http://bedongryeol.github.io/09/02/IOStream/</id>
    <published>2021-09-02T12:44:47.000Z</published>
    <updated>2021-09-09T14:07:06.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="IO-스트림"><a href="#IO-스트림" class="headerlink" title="IO 스트림"></a>IO 스트림</h1><h2 id="IO-Stream-입출력-스트림"><a href="#IO-Stream-입출력-스트림" class="headerlink" title="IO Stream (입출력 스트림)"></a>IO Stream (입출력 스트림)</h2><ul><li>스트림 : 네트워크에서 자료의 흐름이 물의 흐름과 같다는 비유에서 유래</li><li>java의 입출력을 위한 스트림</li><li>입출력 매개체에 독립적으로 일관성있는 입출력을 제공한다.<ul><li>키보드, 마우스, 네트워크, 메모리 등</li></ul></li></ul><h2 id="구분"><a href="#구분" class="headerlink" title="구분"></a>구분</h2><h3 id="대상-기준"><a href="#대상-기준" class="headerlink" title="대상 기준"></a>대상 기준</h3><ul><li>입력과 출력 스트림은 독립적으로 구분된다.</li></ul><details><Summary>대상 기준에 따른 스트림</Summary><h4 id="입력-스트림-입력용"><a href="#입력-스트림-입력용" class="headerlink" title="입력 스트림(입력용)"></a>입력 스트림(입력용)</h4><ul><li>FileInputStream</li><li>FileReader</li><li>BufferedInputStream</li><li>BufferedReader …</li></ul><h4 id="출력-스트림-출력용"><a href="#출력-스트림-출력용" class="headerlink" title="출력 스트림(출력용)"></a>출력 스트림(출력용)</h4><ul><li>FileOutputStream</li><li>FileWriter</li><li>BufferedOutputStream</li><li>BufferedWriter …</details></li></ul><h3 id="자료의-종류"><a href="#자료의-종류" class="headerlink" title="자료의 종류"></a>자료의 종류</h3><details><summary>자료의 종류에 따른 스트림</summary><h4 id="바이트-스트림"><a href="#바이트-스트림" class="headerlink" title="바이트 스트림"></a>바이트 스트림</h4><ul><li>동영상, 음악 파일, 실행 파일 등을 읽고 쓸 때 사용</li><li>FileInputStream</li><li>FileOutputStream</li><li>BufferedInputStream</li><li>BufferedOutputStream …</li></ul><h4 id="문자-스트림"><a href="#문자-스트림" class="headerlink" title="문자 스트림"></a>문자 스트림</h4><ul><li>바이트 단위로 자료를 처리하면 문자는 깨진다.</li><li>인코딩에 맞게 2바이트 이상으로 처리할 때 사용</li><li>FileReader</li><li>FileWriter</li><li>BufferedReader</li><li>BufferedWriter …</details></li></ul><h3 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h3><details><summary>기능에 따른 스트림</summary><h4 id="기반-스트림"><a href="#기반-스트림" class="headerlink" title="기반 스트림"></a>기반 스트림</h4><ul><li>대상에 직접 자료를 읽고 쓰는 기능의 스트림</li><li>FileInputStream</li><li>FileOutputStream</li><li>FileReader</li><li>FileWriter</li></ul><h4 id="보조-스트림"><a href="#보조-스트림" class="headerlink" title="보조 스트림"></a>보조 스트림</h4><ul><li>실제로 읽고 쓰는 기능은 없으나, 다른 스트림을 감싸서(wrap), 다른 스트림이 하는 일을 보조해준다.</li><li>다른 기반 스트림이나, 보조 스트림을 생성자의 매개변수로 갖는다.</li><li>InputStreamReader</li><li>OutputStreamWriter</li><li>BufferedInputStream</li><li>BufferedOutputStream</details></li></ul><h2 id="표준-입출력-스트림"><a href="#표준-입출력-스트림" class="headerlink" title="표준 입출력 스트림"></a>표준 입출력 스트림</h2><ul><li><p>System.out</p><ul><li>표준 출력(모니터) 스트림</li><li><code>System.out.println(&quot;출력 메세지&quot;);</code></li></ul></li><li><p>System.in</p><ul><li>표준 입력(키보드) 스트림</li><li><code>int d = System.in.read() // 한 바이트 읽기</code><blockquote><p>한 바이트로 읽으면 한글과 같은 2바이트 이상은 불러올 수 없기 때문에 보조스트림으로 감싸주어야한다.</p></blockquote></li></ul></li><li><p>System.err</p><ul><li>표준 에러 출력(모니터) 스트림</li><li><code>System.err.println(&quot;에러 메세지&quot;);</code></li></ul></li></ul><details><summary>한 바이트 읽기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;알파벳 여러 개를 쓰고 [Enter]를 누르세요&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader irs = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">            <span class="keyword">while</span> ((i = irs.read()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>보조 스트림으로 감싸기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;알파벳 여러 개를 쓰고 [Enter]를 누르세요&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader irs = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">            <span class="keyword">while</span> ((i = irs.read()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="바이트-단위-입출력-스트림"><a href="#바이트-단위-입출력-스트림" class="headerlink" title="바이트 단위 입출력 스트림"></a>바이트 단위 입출력 스트림</h2><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><ul><li>바이트 단위 입력 스트림의 최상위 추상 클래스</li><li>다양한 추상 메서드들이 선언되어 있고, 하위 스트림 클래스가 상속받아서 구현한다.</li></ul><h4 id="하위-클래스"><a href="#하위-클래스" class="headerlink" title="하위 클래스"></a>하위 클래스</h4><ul><li>FileInputStream<ul><li>파일에서 바이트 단위로 자료를 읽는다.</li></ul></li><li>ByteArrayInputStream<ul><li>바이트 배열 메모리에서 바이트 단위로 자료를 읽는다.</li></ul></li><li>FilterInputStream<ul><li>기반 스트림에서 자료를 읽을 때 추가 기능을 제공하는 보조 스트림의 상위 클래스</li></ul></li></ul><h4 id="주요-메서드"><a href="#주요-메서드" class="headerlink" title="주요 메서드"></a>주요 메서드</h4><ul><li>int read() <ul><li>입력 스트림으로부터 한 바이트의 자료를 읽고, 바이트 수를 반환</li></ul></li><li>int read(byte b[])<ul><li>b 크기의 자료를 읽고, 바이트 수를 반환</li></ul></li><li>int read(byte b[], int off, int len)<ul><li>b 크기 자료에서의 인덱스 0으로부터 Off만큼 떨어진 곳부터 len까지 자료를 읽고, 바이트 수를 반환</li></ul></li><li>void close()<ul><li>파일, 스트림을 불러왔을 때는 항상 close를 해주어야한다.</li></ul></li></ul><details><summary>int read() 하나씩 출력하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)fis.read());</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)fis.read());</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)fis.read());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                System.out.println(ioException);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                System.out.println(e2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                System.out.println(e2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>파일 내 데이터 모두 불러오기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// try의 resource에 파일을 넣어주면 AutoClosable이 되어 close를 하지 않아도 된다.</span></span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;input.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// read()메서드는 파일의 끝에서 -1을 반환해준다.</span></span><br><span class="line">            <span class="keyword">while</span> ( (i = fis.read()) != -<span class="number">1</span> )&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>int read(바이트 배열) 출력하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;input2.txt&quot;</span>);)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">while</span> ((i = fis.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; i ; j++) &#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>)bs[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot; : &quot;</span> + i + <span class="string">&quot;바이트 읽음&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><ul><li>바이트 단위 출력 스트림의 최상위 클래스</li><li>InputStream과 같이 하위 스트림이 상속받아 구현한다.</li></ul><h4 id="하위-클래스-1"><a href="#하위-클래스-1" class="headerlink" title="하위 클래스"></a>하위 클래스</h4><ul><li><p>FileOutputStream</p><ul><li>파일에서 바이트 단위로 자료를 쓴다.<blockquote><p>파일을 불러올 때 해당 이름의 파일이 없으면 생성한다.</p><ul><li>default : Overwrite(덮어쓰기, 기존 데이터는 무시한다.)</li><li>append를 true로 설정하여 이어서 작성할 수 있다.<ul><li><code>new FileOutputStrem(&quot;a.txt&quot;, true);</code></li></ul></li></ul></blockquote></li></ul></li><li><p>ByteArrayOutputStream</p><ul><li>byte배열에서 바이트 단위로 자료를 쓴다.</li></ul></li><li><p>FilterOutputStream</p><ul><li>기반 스트림에서 자료를 쓸 때 추가 기능을 제공하는 보조 스트림의 상위 클래스</li></ul></li></ul><h4 id="주요-메서드-1"><a href="#주요-메서드-1" class="headerlink" title="주요 메서드"></a>주요 메서드</h4><ul><li>int write() <ul><li>한 바이트를 출력한다.</li></ul></li><li>int write(byte b[])<ul><li>b[] 크기의 자료를 출력한다.</li></ul></li><li>int write(byte b[], int off, int len)<ul><li>b 크기 자료에서의 인덱스 0으로부터 Off만큼 떨어진 곳부터 len까지 자료를 출력</li></ul></li><li>int flush()<ul><li>네트워크에서 socket을 쓰면 socket의 출력용 버퍼테 일정 크기의 데이터가 쌓이면 전송이된다.</li><li>강제적으로 버퍼를 비워 자료를 출력하게한다.</li></ul></li><li>void close()<ul><li>리소스를 닫으면서 flush()를 수행한다.</li></ul></li></ul><details><summary>Byte별로 write하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>))&#123;</span><br><span class="line">            fos.write(<span class="number">65</span>);</span><br><span class="line">            fos.write(<span class="number">66</span>);</span><br><span class="line">            fos.write(<span class="number">67</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>Byte 배열 write하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(fos)&#123; <span class="comment">//java9 이후로 제공</span></span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="keyword">byte</span> data = <span class="number">65</span>; <span class="comment">// ASCII &#x27;A&#x27;값</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; bs.length ; j++)&#123;</span><br><span class="line">                bs[j] = data;</span><br><span class="line">                data++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fos.write(bs);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;완료되었습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="문자단위-입출력-스트림"><a href="#문자단위-입출력-스트림" class="headerlink" title="문자단위 입출력 스트림"></a>문자단위 입출력 스트림</h2><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><ul><li>문자 단위 입력 스트림의 최상위 추상 클래스</li><li>추상 메서드를 하위 스트림이 상속받아 구현한다.</li></ul><h4 id="하위-클래스-2"><a href="#하위-클래스-2" class="headerlink" title="하위 클래스"></a>하위 클래스</h4><ul><li>FileReader<ul><li>파일에서 문자 단위로 읽는 스트림 클래스</li></ul></li><li>InputStreamReader<ul><li>보조 스트림</li><li>바이트 단위로 읽은 자료(스트림)를 문자로 변환</li></ul></li><li>BufferedReader<ul><li>보조 스트림</li><li>배열을 제공하여 한꺼번에 읽을 수 있는 기능을 제공</li></ul></li></ul><h4 id="주요-메서드-2"><a href="#주요-메서드-2" class="headerlink" title="주요 메서드"></a>주요 메서드</h4><ul><li>문자, 문자열을 읽어 온다.</li><li>int read()</li><li>int read(char[] buf)</li><li>int read(char[] buf, int off, int len)</li><li>void close()</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;reader.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">while</span> ((i = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h3><ul><li>문자 단위 출력 스트림의 최상위 클래스</li><li>추상 메서드를 하위 스트림이 상속받아 구현한다.</li></ul><h4 id="하위-클래스-3"><a href="#하위-클래스-3" class="headerlink" title="하위 클래스"></a>하위 클래스</h4><ul><li>FileWriter</li><li>OutputStreamWriter</li><li>Buffered Writer</li></ul><h4 id="주요-메서드-3"><a href="#주요-메서드-3" class="headerlink" title="주요 메서드"></a>주요 메서드</h4><ul><li>int write(int c)</li><li>int write(char[] buf)</li><li>int write(char[] buf, int off, int len)</li><li>int write(String str)</li><li>int write(String str, int off, int len)</li><li>int flush()</li><li>void close()</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;writer.txt&quot;</span>)) &#123;</span><br><span class="line">            fw.write(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            <span class="keyword">char</span> buf[] = &#123;<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line">            fw.write(buf);</span><br><span class="line">            fw.write(<span class="string">&quot;안녕하세요.&quot;</span>);</span><br><span class="line">            fw.write(buf, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            fw.write(<span class="string">&quot;65&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="보조-스트림-1"><a href="#보조-스트림-1" class="headerlink" title="보조 스트림"></a>보조 스트림</h2><ul><li>실제 읽고 쓰는 스트림이 아닌 보조 기능을 제공하는 스트림이다.<ul><li>FileInputStream과 FileOutputStream의 하위 클래스</li></ul></li><li>여러 기능을 조합하여 사용할 수 있는 Decorator Pattern으로 구현된다.</li><li>생성자의 매개 변수로 파일 이름이 아닌 기반 스트림, 보조 스트림을 갖는다.</li></ul><h3 id="InputStreamReader-OutputStreamReader"><a href="#InputStreamReader-OutputStreamReader" class="headerlink" title="InputStreamReader, OutputStreamReader"></a>InputStreamReader, OutputStreamReader</h3><details><summary>예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;reader.txt&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">while</span>( (i = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="BufferedInputStream-BufferedOutputStream"><a href="#BufferedInputStream-BufferedOutputStream" class="headerlink" title="BufferedInputStream, BufferedOutputStream"></a>BufferedInputStream, BufferedOutputStream</h3><details><summary>예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> millisecond = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;reader.txt&quot;</span>));</span><br><span class="line">             BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;copy.txt&quot;</span>))) &#123;</span><br><span class="line"></span><br><span class="line">            millisecond = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">while</span> ((i = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            millisecond = System.currentTimeMillis() - millisecond;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(millisecond + <span class="string">&quot;소요되었습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="DataInputStream-DataOutputStream"><a href="#DataInputStream-DataOutputStream" class="headerlink" title="DataInputStream, DataOutputStream"></a>DataInputStream, DataOutputStream</h3><ul><li>자료가 메모리에 저장된 상태 그대로 읽거나 쓰는 스트림<ul><li>자료형, 크기를 유지하여 읽고 쓴다.</li></ul></li><li>기록한 자료형 그대로 불러와야한다.</li></ul><details><summary></summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataIOTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">             DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(fos)) &#123;</span><br><span class="line"></span><br><span class="line">            dos.writeByte(<span class="number">100</span>);</span><br><span class="line">            dos.writeChar(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            dos.writeInt(<span class="number">10</span>);</span><br><span class="line">            dos.writeFloat(<span class="number">3.14f</span>);</span><br><span class="line">            dos.writeUTF(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">             DataInputStream dis = <span class="keyword">new</span> DataInputStream(fis))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(dis.readByte());</span><br><span class="line">            System.out.println(dis.readChar());</span><br><span class="line">            System.out.println(dis.readInt());</span><br><span class="line">            System.out.println(dis.readFloat());</span><br><span class="line">            System.out.println(dis.readUTF());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Java" scheme="http://bedongryeol.github.io/categories/Basic/Java/"/>
    
    
    <category term="IOStream" scheme="http://bedongryeol.github.io/tags/IOStream/"/>
    
    <category term="입출력 스트림" scheme="http://bedongryeol.github.io/tags/%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%8A%A4%ED%8A%B8%EB%A6%BC/"/>
    
  </entry>
  
  <entry>
    <title>로그 (Log)</title>
    <link href="http://bedongryeol.github.io/08/31/Log/"/>
    <id>http://bedongryeol.github.io/08/31/Log/</id>
    <published>2021-08-31T07:06:50.000Z</published>
    <updated>2021-09-09T14:07:03.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="Log-로그"><a href="#Log-로그" class="headerlink" title="Log (로그)"></a>Log (로그)</h1><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><ul><li>시스템 운영에 대한 기록<ul><li>오류가 발생했을 때 오류에 대한 기록을 남겨 디버깅을 용이하게 할 수 있다.</li></ul></li><li><code>java.util.logging.Logger</code> 활용</li><li>Exception을 handling할 때 로그를 남겨주어야 한다.<ul><li>Log가 너무 많으면 빈번한 file 입출력의 오버헤드 및 백업 문제 등이 발생할 수 있다.</li></ul></li></ul><h2 id="레벨"><a href="#레벨" class="headerlink" title="레벨"></a>레벨</h2><ul><li>severe</li><li>warning</li><li>info</li><li>config</li><li>fine</li><li>finer</li><li>finest</li></ul><h2 id="사용"><a href="#사용" class="headerlink" title="사용"></a>사용</h2><ul><li>처음 System을 오픈할 때는 모든 level을 찍고, 안정화된 후에 info level부터 찍는 등 다양한 방법이 있다.</li><li>logger의 level을 ALL로 설정하면 다른 FileHandler는 모든 범위 내에서 설정이 가능하다.</li><li>같은 패키지 내에 로그 파일이 저장된다.</li></ul><details><summary>예제코드1 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.FileHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLog</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Singleton과 유사하게 인스턴스 생성</span></span><br><span class="line">    Logger logger = Logger.getLogger(<span class="string">&quot;mylogger&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyLog instance = <span class="keyword">new</span> MyLog();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 파일 이름 설정</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String errorLog = <span class="string">&quot;log.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String warningLog = <span class="string">&quot;warning.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String fineLog = <span class="string">&quot;fine.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 위 파일별 log를 설정할 FileHandler 객체 생성</span></span><br><span class="line">    <span class="comment">// 객체명은 오류 레벨과 맞춰서 설정하였음</span></span><br><span class="line">    <span class="keyword">private</span> FileHandler logFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler warningFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler fineFile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 생성자 구현</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4-1. 인스턴스 생성 (파일이름, append 여부)</span></span><br><span class="line">            logFile = <span class="keyword">new</span> FileHandler(errorLog, <span class="keyword">true</span>);</span><br><span class="line">            warningFile = <span class="keyword">new</span> FileHandler(warningLog, <span class="keyword">true</span>);</span><br><span class="line">            fineFile = <span class="keyword">new</span> FileHandler(fineLog, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4-2. Log기록의 형식 지정 (SimpleFormatter : 기본 형식)</span></span><br><span class="line">        logFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        warningFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        fineFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-3. 로그 레벨 설정</span></span><br><span class="line">        <span class="comment">// 모든 로그 레벨 기록</span></span><br><span class="line">        logger.setLevel(Level.ALL);</span><br><span class="line">        <span class="comment">// FileHandler마다 레벨을 다르게 설정할 수 있다.</span></span><br><span class="line">        warningFile.setLevel(Level.WARNING);</span><br><span class="line">        fineFile.setLevel(Level.FINE);;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-4. 4-1에서 생성한 Handler 추가</span></span><br><span class="line">        logger.addHandler(logFile);</span><br><span class="line">        logger.addHandler(warningFile);</span><br><span class="line">        logger.addHandler(fineFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4-5. getter 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyLog <span class="title">getLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 로그 기록 남기는 함수</span></span><br><span class="line">    <span class="comment">// logger에 설정한 레벨에 해당하는 log만 사용가능</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// logger가 finest level을 handle 할 수 있도록 addHandler를 해주었으므로 가능하다.</span></span><br><span class="line">        logger.finest(msg);</span><br><span class="line">        logger.finer(msg);</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">        logger.config(msg);</span><br><span class="line">        logger.info(msg);</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">        logger.severe(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5-1. fine level 메세지 출력함수</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fine</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5-2. warning level 메시지 출력함수</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>logger의 level을 INFO로 설정하면 다른 FileHandler는 INFO 내에서 설정이 가능하다.<ul><li>FileHandler 중 fineFile은 범위를 fine부터 설정하였지만 INFO 범위 내에 포함되지 않으므로 INFO 레벨부터 로그가 기록된다.</li></ul></li></ul><details><summary>예제코드2 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.FileHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLog</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Singleton과 유사하게 인스턴스 생성</span></span><br><span class="line">    Logger logger = Logger.getLogger(<span class="string">&quot;mylogger&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyLog instance = <span class="keyword">new</span> MyLog();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 파일 이름 설정</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String errorLog = <span class="string">&quot;log.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String warningLog = <span class="string">&quot;warning.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String fineLog = <span class="string">&quot;fine.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 위 파일별 log를 설정할 FileHandler 객체 생성</span></span><br><span class="line">    <span class="comment">// 객체명은 오류 레벨과 맞춰서 설정하였음</span></span><br><span class="line">    <span class="keyword">private</span> FileHandler logFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler warningFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler fineFile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 생성자 구현</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4-1. 인스턴스 생성 (파일이름, append 여부)</span></span><br><span class="line">            logFile = <span class="keyword">new</span> FileHandler(errorLog, <span class="keyword">true</span>);</span><br><span class="line">            warningFile = <span class="keyword">new</span> FileHandler(warningLog, <span class="keyword">true</span>);</span><br><span class="line">            fineFile = <span class="keyword">new</span> FileHandler(fineLog, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4-2. Log기록의 형식 지정 (SimpleFormatter : 기본 형식)</span></span><br><span class="line">        logFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        warningFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        fineFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-3. 로그 레벨 설정</span></span><br><span class="line">        <span class="comment">// 모든 로그 레벨 기록</span></span><br><span class="line">        logger.setLevel(Level.INFO);</span><br><span class="line">        <span class="comment">// FileHandler마다 레벨을 다르게 설정할 수 있다.</span></span><br><span class="line">        warningFile.setLevel(Level.WARNING);</span><br><span class="line">        fineFile.setLevel(Level.FINE);;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-4. 4-1에서 생성한 Handler 추가</span></span><br><span class="line">        logger.addHandler(logFile);</span><br><span class="line">        logger.addHandler(warningFile);</span><br><span class="line">        logger.addHandler(fineFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4-5. getter 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyLog <span class="title">getLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 로그 기록 남기는 함수</span></span><br><span class="line">    <span class="comment">// logger에 설정한 레벨에 해당하는 log만 사용가능</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// logger가 finest level을 handle 할 수 있도록 addHandler를 해주었으므로 가능하다.</span></span><br><span class="line">        logger.finest(msg);</span><br><span class="line">        logger.finer(msg);</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">        logger.config(msg);</span><br><span class="line">        logger.info(msg);</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">        logger.severe(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5-1. fine level 메세지 출력함수</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fine</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5-2. warning level 메시지 출력함수</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>테스트 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Singleton으로 구현하였으므로 getLog를 통해서 호출</span></span><br><span class="line">        MyLog logger = MyLog.getLog();</span><br><span class="line">        logger.log(<span class="string">&quot;Log Test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>콘솔 파일은 Mac OS 기준으로 <code>jre 내의 conf 폴더</code>에 properties파일이 저장된다.</li><li>파일 내에서 정보 date, Thread Name 등을 설정할 수 있다.</li></ul><details><summary>콘솔 파일 내용 확인하기</summary><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#  Default Logging Configuration File</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can use a different file by specifying a filename</span></span><br><span class="line"><span class="comment"># with the java.util.logging.config.file system property.  </span></span><br><span class="line"><span class="comment"># For example java -Djava.util.logging.config.file=myfile</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#  Global properties</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># &quot;handlers&quot; specifies a comma separated list of log Handler </span></span><br><span class="line"><span class="comment"># classes.  These handlers will be installed during VM startup.</span></span><br><span class="line"><span class="comment"># Note that these classes must be on the system classpath.</span></span><br><span class="line"><span class="comment"># By default we only configure a ConsoleHandler, which will only</span></span><br><span class="line"><span class="comment"># show messages at the INFO and above levels.</span></span><br><span class="line"><span class="attr">handlers</span>= <span class="string">java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># To also add the FileHandler, use the following line instead.</span></span><br><span class="line"><span class="comment">#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Default global logging level.</span></span><br><span class="line"><span class="comment"># This specifies which kinds of events are logged across</span></span><br><span class="line"><span class="comment"># all loggers.  For any given facility this global level</span></span><br><span class="line"><span class="comment"># can be overriden by a facility specific level</span></span><br><span class="line"><span class="comment"># Note that the ConsoleHandler also has a separate level</span></span><br><span class="line"><span class="comment"># setting to limit messages printed to the console.</span></span><br><span class="line"><span class="meta">.level</span>= <span class="string">INFO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Handler specific properties.</span></span><br><span class="line"><span class="comment"># Describes specific configuration info for Handlers.</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># default file output is in user&#x27;s home directory.</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.pattern</span> = <span class="string">%h/java%u.log</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.limit</span> = <span class="string">50000</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.count</span> = <span class="string">1</span></span><br><span class="line"><span class="comment"># Default number of locks FileHandler can obtain synchronously.</span></span><br><span class="line"><span class="comment"># This specifies maximum number of attempts to obtain lock file by FileHandler</span></span><br><span class="line"><span class="comment"># implemented by incrementing the unique field %u as per FileHandler API documentation.</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.maxLocks</span> = <span class="string">100</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.formatter</span> = <span class="string">java.util.logging.XMLFormatter</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Limit the message that are printed on the console to INFO and above.</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.level</span> = <span class="string">INFO</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.formatter</span> = <span class="string">java.util.logging.SimpleFormatter</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Example to customize the SimpleFormatter output format </span></span><br><span class="line"><span class="comment"># to print one-line log message like this:</span></span><br><span class="line"><span class="comment">#     &lt;level&gt;: &lt;log message&gt; [&lt;date/time&gt;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Facility specific properties.</span></span><br><span class="line"><span class="comment"># Provides extra control for each logger.</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># For example, set the com.xyz.foo logger to only log SEVERE</span></span><br><span class="line"><span class="comment"># messages:</span></span><br><span class="line"><span class="comment"># com.xyz.foo.level = SEVERE</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="Exception과-함께-사용"><a href="#Exception과-함께-사용" class="headerlink" title="Exception과 함께 사용"></a>Exception과 함께 사용</h2><ul><li>Exception 상황에서는 항상 적절한 level의 log를 남겨야한다.</li></ul><details><summary>Custom Exception 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentNameFormatException</span> <span class="keyword">extends</span> <span class="title">IllegalArgumentException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentNameFormatException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><details><summary>예제 클래스 </summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String studentName;</span><br><span class="line">  MyLog myLog = MyLog.getLog();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String studentName)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (studentName == <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> StudentNameFormatException(<span class="string">&quot;Name must not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (studentName.split(<span class="string">&quot; &quot;</span>).length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> StudentNameFormatException(<span class="string">&quot;너무 긴 이름입니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.studentName = studentName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getStudentName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    myLog.fine(<span class="string">&quot;begin getStudentName&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> studentName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>생성자에는 Exception을 throws하지 않는다.</li><li>Custom Exception의 extends에 Exception이 아닌 <code>IllegalArgumentException</code>을 extends하여 핸들링할 수 있다.</li></ul><details><summary>테스트 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyLog myLog = MyLog.getLog();</span><br><span class="line"></span><br><span class="line">        String name = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 1. 예외상황1 테스트</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (StudentNameFormatException e) &#123;</span><br><span class="line">            myLog.warning(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 예외상황2 테스트</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student(<span class="string">&quot;Edward John Kim Test&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (StudentNameFormatException e) &#123;</span><br><span class="line">            myLog.warning(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="string">&quot;James&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>결과 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>월 <span class="number">31</span>, <span class="number">2021</span> <span class="number">3</span>:<span class="number">24</span>:<span class="number">58</span> 오후 Online.MyLog warning</span><br><span class="line">WARNING: Name must not be <span class="keyword">null</span></span><br><span class="line"><span class="number">8</span>월 <span class="number">31</span>, <span class="number">2021</span> <span class="number">3</span>:<span class="number">24</span>:<span class="number">58</span> 오후 Online.MyLog warning</span><br><span class="line">WARNING: 너무 긴 이름입니다.</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Java" scheme="http://bedongryeol.github.io/categories/Basic/Java/"/>
    
    
    <category term="Java" scheme="http://bedongryeol.github.io/tags/Java/"/>
    
    <category term="Log" scheme="http://bedongryeol.github.io/tags/Log/"/>
    
    <category term="로그" scheme="http://bedongryeol.github.io/tags/%EB%A1%9C%EA%B7%B8/"/>
    
  </entry>
  
  <entry>
    <title>예외처리</title>
    <link href="http://bedongryeol.github.io/08/25/Exception/"/>
    <id>http://bedongryeol.github.io/08/25/Exception/</id>
    <published>2021-08-25T12:23:20.000Z</published>
    <updated>2021-09-09T14:06:51.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="예외처리-Exception"><a href="#예외처리-Exception" class="headerlink" title="예외처리 (Exception)"></a>예외처리 (Exception)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>Java에서 발생하는 문제는 오류(Error)와 예외(Exception)로 구분할 수 있다.</li></ul><h2 id="오류-Error"><a href="#오류-Error" class="headerlink" title="오류 (Error)"></a>오류 (Error)</h2><ul><li>시스템 오류(Error) : 가상머신에서 발생하고, 개발자가 처리할 수 없는 오류<ul><li>동적 메모리가 없는 경우, 스택 오버플로우 등</li></ul></li></ul><h3 id="컴파일-오류-Compile-Error"><a href="#컴파일-오류-Compile-Error" class="headerlink" title="컴파일 오류 (Compile Error)"></a>컴파일 오류 (Compile Error)</h3><ul><li>프로그램 코드 작성 중 발생하는 문법적인 오류</li><li>IDE에서 컴파일 오류를 detection할 수 있다.</li></ul><h3 id="실행-오류-Runtime-Error"><a href="#실행-오류-Runtime-Error" class="headerlink" title="실행 오류 (Runtime Error)"></a>실행 오류 (Runtime Error)</h3><ul><li>실행 중인 프로그램이 중단되거나 의도하지 않은 동작(bug)을 하는 오류</li></ul><h2 id="예외-Exception"><a href="#예외-Exception" class="headerlink" title="예외 (Exception)"></a>예외 (Exception)</h2><ul><li>프로그램에서 제어할 수 있는 오류</li><li>DB, Network Connection 등</li></ul><h3 id="중요성"><a href="#중요성" class="headerlink" title="중요성"></a>중요성</h3><ul><li>프로그램의 비정상적인 종료를 피할 수 있다.</li><li>log를 적절하게 남기고, 분석을 통해 원인을 파악하고 bug를 수정하여야 한다.<ul><li>상세하게 level별로 남겨야한다.</li></ul></li></ul><h3 id="예외-클래스"><a href="#예외-클래스" class="headerlink" title="예외 클래스"></a>예외 클래스</h3><blockquote><p><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html">https://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html</a></p></blockquote><h2 id="예외-처리"><a href="#예외-처리" class="headerlink" title="예외 처리"></a>예외 처리</h2><h3 id="try-catch문"><a href="#try-catch문" class="headerlink" title="try-catch문"></a>try-catch문</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    예외가 발생할 수 있는 코드</span><br><span class="line">&#125; <span class="keyword">catch</span> (처리할 예외 타입) &#123;</span><br><span class="line">    <span class="keyword">try</span> 블록 안에서 예외가 발생했을 때 예외처리 코드</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayindexExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;=<span class="number">5</span> ; i++)&#123;</span><br><span class="line">                System.out.println(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="try-catch-finally문"><a href="#try-catch-finally문" class="headerlink" title="try-catch-finally문"></a>try-catch-finally문</h3><ul><li>try()블럭이 수행되면 finally() 블럭은 항상 수행된다.<ul><li>return이 포함되어 있어도 수행된다.</li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileExceptionHandling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="try-with-resource문"><a href="#try-with-resource문" class="headerlink" title="try-with-resource문"></a>try-with-resource문</h3><ul><li>java7 이후로 <code>FileInputStream</code>클래스가 <code>AutoCloseable</code> 인터페이스를 implement하여 close를 하지 않아도 자동으로 해제된다.</li><li>java9부터 리소스는 try() 외부에서 선언하고 try(var)와 같이 사용할 수 있다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.text&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>(fis)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileExceptionHandling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 자동으로 close가 된다.</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">        <span class="comment">// file을 불러올 때 생길 수 있는 에러</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        <span class="comment">// file을 close할 때 생길 수 있는 에러</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="예외처리-미루기"><a href="#예외처리-미루기" class="headerlink" title="예외처리 미루기"></a>예외처리 미루기</h3><ul><li>main함수에서 throws를 하게되면 VM으로 넘어가서 abort된다.</li><li>throws를 이용하여 예외를 발생시키는 문장에서 예외를 처리하게 미룰 수 있다.</li><li><code>catch(Exception e)</code> 구문을 통하여 default 처리를 할 수 있다.<ul><li>catch 구문 중 가장 아랫줄에 작성해야 다른 exception을 개별 처리할 수 있다.</li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsException</span> </span>&#123;</span><br><span class="line">  <span class="comment">// throws하여 메서드를 사용할 때 Exception을 처리하도록 한다.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Class <span class="title">loadClass</span><span class="params">(String fileName, String className)</span> <span class="keyword">throws</span> ClassNotFoundException, FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">    Class c = Class.forName(className);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThrowsException test = <span class="keyword">new</span> ThrowsException();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      test.loadClass(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">      System.out.println(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">      System.out.println(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;default Exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="사용자-정의-예외클래스"><a href="#사용자-정의-예외클래스" class="headerlink" title="사용자 정의 예외클래스"></a>사용자 정의 예외클래스</h3><ul><li>자바에서 제공되는 exception 외 필요한 exception을 생성할 수 있다.</li><li>기존 클래스 중 가장 유사한 클래스를 상속을 받거나, Exception 클래스를 상속받는다.</li><li>Exception을 정의하고, 필요한 순간에 어떠한 exception이 어느 순간에 불려야하는지 구현한다.<blockquote><p>throws</p><ul><li>예외를 호출하는 메서드에게 전가하는 것</li><li>메서드에서 상위 메서드로 예외를 던진다.</li></ul><p>throw</p><ul><li>exception을 실제로 던지는 것</li><li>메서드 내에서 상위 블럭으로 예외를 던진다.</li></ul></blockquote></li></ul><details><summary>Exception 정의하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassWordException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PassWordException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>사용자 정의 Exception</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassWordTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> <span class="keyword">throws</span> PassWordException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PassWordException(<span class="string">&quot;비밀번호는 null이 될 수 없습니다.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (password.length() &lt; <span class="number">5</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PassWordException(<span class="string">&quot;비밀번호는 5자 이상이어야 합니다..&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (password.matches(<span class="string">&quot;[a-zA-Z]+&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PassWordException(<span class="string">&quot;비밀번호는 숫자나 특수문자를 포함해야 합니다.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PassWordTest test = <span class="keyword">new</span> PassWordTest();</span><br><span class="line"></span><br><span class="line">        String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.setPassword(password);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류없음1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PassWordException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        password = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.setPassword(password);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류없음2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PassWordException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        password = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.setPassword(password);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류없음3&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PassWordException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        password = <span class="string">&quot;abcde1#&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.setPassword(password);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류없음4&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PassWordException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Java" scheme="http://bedongryeol.github.io/categories/Basic/Java/"/>
    
    
    <category term="Exception" scheme="http://bedongryeol.github.io/tags/Exception/"/>
    
    <category term="Custom Exception" scheme="http://bedongryeol.github.io/tags/Custom-Exception/"/>
    
  </entry>
  
  <entry>
    <title>스트림</title>
    <link href="http://bedongryeol.github.io/08/25/Stream/"/>
    <id>http://bedongryeol.github.io/08/25/Stream/</id>
    <published>2021-08-25T12:23:13.000Z</published>
    <updated>2021-09-09T14:07:00.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="스트림-Stream"><a href="#스트림-Stream" class="headerlink" title="스트림 (Stream)"></a>스트림 (Stream)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>배열, collection 자료가 모여있을 때 연산의 처리를 일관성 있게 한다.<ul><li>자료 처리에 대한 추상화가 구현되었다고 한다.</li></ul></li><li>일관성 있는 연산으로 자료의 처리를 쉽고 간단하게 한다.</li><li>한번 생성하고 사용한 스트림은 재사용 할 수 없다.<ul><li>다른 연산을 수행하기 위해서는 스트림을 다시 생성해야 한다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntArrayStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line">        <span class="comment">// 모든 Array는 Arrays 클래스를 활용할 수 있다.</span></span><br><span class="line">        IntStream is = Arrays.stream(arr);</span><br><span class="line">        is.forEach(n -&gt; System.out.println(n));</span><br><span class="line">        <span class="comment">//is는 한번 소모하였으니 다시 사용할 수 없다.</span></span><br><span class="line">        <span class="comment">// 재사용하고 싶을 때 재생성</span></span><br><span class="line">        <span class="keyword">int</span> sum = Arrays.stream(arr).sum();</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="연산"><a href="#연산" class="headerlink" title="연산"></a>연산</h2><ul><li>스트림의 연산은 중간 연산과 최종 연산으로 구분된다.</li><li>중간 연산은 여러 개의 연산이 적용될 수 있지만 최종 연산은 마지마게 한 번만 적용된다.</li><li><code>지연 연산</code><ul><li>최종 연산이 호출되어야 중간 연산에 대한 수행이 이루어지고 결과가 만들어진다.</li></ul></li></ul><h3 id="중간연산"><a href="#중간연산" class="headerlink" title="중간연산"></a>중간연산</h3><ul><li><code>filter()</code> : 조건에 맞는 요소를 추출</li><li><code>map()</code> : 조건에 맞는 요소를 변환</li><li><code>sorted()</code> : 정렬</li></ul><h3 id="최종연산"><a href="#최종연산" class="headerlink" title="최종연산"></a>최종연산</h3><ul><li><code>forEach()</code> : 요소를 하나씩 꺼내옴</li><li><code>count()</code> : 요소의 개수 반환</li><li><code>sum()</code> : 요소들의 합</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; sList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sList.add(<span class="string">&quot;Thomas&quot;</span>);</span><br><span class="line">        sList.add(<span class="string">&quot;Edward&quot;</span>);</span><br><span class="line">        sList.add(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Stream&lt;String&gt; stream = sList.stream();</span><br><span class="line">        stream.forEach(s-&gt;System.out.println(s));</span><br><span class="line"></span><br><span class="line">        sList.stream().sorted().forEach(s-&gt;System.out.print(s + <span class="string">&quot;\t&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        sList.stream().map(s-&gt;s.length()).forEach(n-&gt;System.out.print(n + <span class="string">&quot;\t&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        sList.stream().filter(s-&gt;s.length()&gt;=<span class="number">5</span>).forEach(s-&gt;System.out.print(s + <span class="string">&quot;\t&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="comment">//Thomas</span></span><br><span class="line"><span class="comment">//Edward</span></span><br><span class="line"><span class="comment">//Jack</span></span><br><span class="line"><span class="comment">//EdwardJackThomas</span></span><br><span class="line"><span class="comment">//6 64</span></span><br><span class="line"><span class="comment">//ThomasEdward</span></span><br></pre></td></tr></table></figure></details>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Java" scheme="http://bedongryeol.github.io/categories/Basic/Java/"/>
    
    
    <category term="Stream" scheme="http://bedongryeol.github.io/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>reduce 메서드</title>
    <link href="http://bedongryeol.github.io/08/25/reduce/"/>
    <id>http://bedongryeol.github.io/08/25/reduce/</id>
    <published>2021-08-25T12:23:08.000Z</published>
    <updated>2021-09-09T14:06:57.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="reduce-메서드"><a href="#reduce-메서드" class="headerlink" title="reduce 메서드"></a>reduce 메서드</h1><h2 id="reduce-연산"><a href="#reduce-연산" class="headerlink" title="reduce() 연산"></a>reduce() 연산</h2><ul><li>기존에 정의된 연산이 아닌 직접 구현한 연산을 적용한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">reduce</span><span class="params">(T identify, BinaryOperator&lt;T&gt; accumulator)</span></span></span><br></pre></td></tr></table></figure></li><li>최종 연산으로 스트림을 요소를 소모하여 연산을 수행한다.</li><li>예시<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BinaryOperator;</span><br><span class="line"><span class="comment">// parameter BinaryOperator&lt;T&gt;를 구현하여 사용</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareString</span> <span class="keyword">implements</span> <span class="title">BinaryOperator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.getBytes().length &gt;= s2.getBytes().length) <span class="keyword">return</span> s1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String greetings[] = &#123;<span class="string">&quot;안녕히계세요~~~&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Goood morning&quot;</span>, <span class="string">&quot;반갑습니다&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 직접 작성</span></span><br><span class="line">        System.out.println(Arrays.stream(greetings).reduce(<span class="string">&quot;&quot;</span>, (s1,s2)-&gt;</span><br><span class="line">            &#123;<span class="keyword">if</span> (s1.getBytes().length &gt;= s2.getBytes().length) <span class="keyword">return</span> s1;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> s2;&#125;</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. BinaryOperator&lt;T&gt;의 메서드 implement</span></span><br><span class="line">        <span class="comment">// 새로운 클래스로 생성하여 사용한다.</span></span><br><span class="line">        String str = Arrays.stream(greetings).reduce(<span class="keyword">new</span> CompareString()).get();</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Java" scheme="http://bedongryeol.github.io/categories/Basic/Java/"/>
    
    
    <category term="reduce" scheme="http://bedongryeol.github.io/tags/reduce/"/>
    
  </entry>
  
  <entry>
    <title>람다식 (Lambda Expression)</title>
    <link href="http://bedongryeol.github.io/08/25/Lambda/"/>
    <id>http://bedongryeol.github.io/08/25/Lambda/</id>
    <published>2021-08-25T12:23:03.000Z</published>
    <updated>2021-09-09T14:06:54.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="람다식-Lambda-Expression"><a href="#람다식-Lambda-Expression" class="headerlink" title="람다식 (Lambda Expression)"></a>람다식 (Lambda Expression)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>java8부터 함수형 프로그래밍 방식을 지원하고, 이를 <code>람다식</code>이라고 한다.</li><li>함수형 프로그래밍<ul><li>매개 변수만을 사용하여 만드는 함수인 <code>순수 함수</code>를 구현</li><li>외부 자료를 사용하지 않으므로 side effect가 없다</li><li>여러 자료를 동시에 처리하는 병렬처리가 가능하다.<ul><li>함수의 기능이 자료에 독립적이다.</li></ul></li></ul></li></ul><h2 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h2><ul><li>익명 함수 만들기</li><li>매개변수와 매개변수를 이용한 실행문으로 구현된다.</li><li>java는 OOP언어이기 때문에 람다식, 함수로만 클래스를 구성할 수 없다.<ul><li>interface의 메소드를 구현하는 방식으로 한다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch02;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Add</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Add add = (x, y) -&gt; &#123;<span class="keyword">return</span> x+y;&#125;;</span><br><span class="line">        System.out.println(add.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="람다식과-OOP-방식-비교"><a href="#람다식과-OOP-방식-비교" class="headerlink" title="람다식과 OOP 방식 비교"></a>람다식과 OOP 방식 비교</h2><ul><li>람다식에서는 FunctionalInterface 익명 내부 클래스가 생성된다.</li><li>OOP 방식에서는 Interface를 implement하여 구현하고, 메서드를 호출한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringConcatTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">        <span class="comment">// OOP 방식    </span></span><br><span class="line">        StringConcatImp strImp = <span class="keyword">new</span> StringConcatImp();</span><br><span class="line">        strImp.makeString(s1, s2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 람다식 구현 방식</span></span><br><span class="line">        StringConcat concat = (s,v)-&gt; System.out.println(s+<span class="string">&quot;,&quot;</span>+v);</span><br><span class="line">        concat.makeString(s1,s2);</span><br><span class="line">        <span class="comment">// 2. 람다식 구현 방식</span></span><br><span class="line">        StringConcat concat2 = <span class="keyword">new</span> StringConcat() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">                System.out.println(s1+<span class="string">&quot;,&quot;</span>+s2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://bedongryeol.github.io/categories/Basic/"/>
    
    <category term="Java" scheme="http://bedongryeol.github.io/categories/Basic/Java/"/>
    
    
    <category term="Lambda" scheme="http://bedongryeol.github.io/tags/Lambda/"/>
    
    <category term="람다식" scheme="http://bedongryeol.github.io/tags/%EB%9E%8C%EB%8B%A4%EC%8B%9D/"/>
    
  </entry>
  
</feed>
