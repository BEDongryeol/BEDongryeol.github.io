<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fintech - Backend Developer</title>
  
  <subtitle>Inwoo Jeong</subtitle>
  <link href="http://inwoo.github.io/atom.xml" rel="self"/>
  
  <link href="http://inwoo.github.io/"/>
  <updated>2021-11-10T13:11:51.604Z</updated>
  <id>http://inwoo.github.io/</id>
  
  <author>
    <name>Inwoo Jeong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JPA Entity 관련 Annotation</title>
    <link href="http://inwoo.github.io/11/10/jpaAnnotation/"/>
    <id>http://inwoo.github.io/11/10/jpaAnnotation/</id>
    <published>2021-11-10T12:58:39.000Z</published>
    <updated>2021-11-10T13:11:51.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h3 id="Enumerate"><a href="#Enumerate" class="headerlink" title="@Enumerate"></a>@Enumerate</h3><blockquote><p>Enumerate는 JPA에 사용 시 명확히 설정하지 않으면 예기치 못한 에러를 초래할 수 있다.</p></blockquote><p>예를 들어 아래와 같이 Gender enum을 만들었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MALE,</span><br><span class="line"></span><br><span class="line">    FEMALE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Entity에 Gender field를 추가하고 테스트 코드를 통해 확인해보자.</p><p>UserRepository 인터페이스에 <code>@Query</code>를 통해 findRowRecord()라는 custom 쿼리를 작성하였으므로 참고하길 바란다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;select * from user limit 1&quot;, nativeQuery = true)</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">findRowRecord</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enumTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = userRepository.findById(<span class="number">1L</span>).orElseThrow(RuntimeException::<span class="keyword">new</span>);</span><br><span class="line">    user.setGender(Gender.MALE);</span><br><span class="line">    userRepository.save(user);</span><br><span class="line"></span><br><span class="line">    userRepository.findAll().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(userRepository.findRowRecord(<span class="number">1L</span>).get(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/enum1.png" alt="Enumerate ORDINAL"><br>그 결과 위와 같이 <code>findAll()</code>을 해서 조회할 때는 gender=MALE로 입력이 돼었지만, gender의 값을 조회하면 0이라는 값이 나온다.</p><p><img src="/image/enum2.png" alt="EnumType defaule값"><br>Enumerate의 <code>EnumType</code>의 default 값은 <code>ORDINAL</code>이다. zero-base로 값의 index를 설정한다.</p><p>위에서 MALE이 0번째로 설정되어 0이 출력된 것이다.</p><blockquote><h4 id="ORDINAL을-사용하면-추후에-Enum-내의-순서가-바뀌면-index값이-달라지게-되고-에러를-초래할-수-있다"><a href="#ORDINAL을-사용하면-추후에-Enum-내의-순서가-바뀌면-index값이-달라지게-되고-에러를-초래할-수-있다" class="headerlink" title="ORDINAL을 사용하면 추후에 Enum 내의 순서가 바뀌면 index값이 달라지게 되고 에러를 초래할 수 있다."></a>ORDINAL을 사용하면 추후에 Enum 내의 순서가 바뀌면 index값이 달라지게 되고 에러를 초래할 수 있다.</h4></blockquote><p><img src="/image/enum3.png" alt="Enumerate String"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### @Table</span><br><span class="line"></span><br><span class="line">`테이블과 관련된` Annotation으로 이름, Index, 제약조건 등을 설정할 수 있다.</span><br><span class="line"></span><br><span class="line">uniqueConstraints는 여러 column을 사용해 `unique한 복합 column`을 생성하도록 한다.</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Table(name = &quot;user&quot;, </span><br><span class="line">   indexes = &#123;@Index(columnList=&quot;name&quot;)&#125;, </span><br><span class="line">   uniqueConstraints = &#123;@UniqueConstraint(columnNames = &quot;email&quot;)&#125;)</span><br></pre></td></tr></table></figure><h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><p>Field의 각 속성을 지정하는 <code>Field-scope</code>의 Annotation이다.</p><p>과거에는 Column 이름을 모음을 제거하고 설정하는 경우가 많았다. Field name과 Column name을 분리하기 위해 사용된다.</p><p><code>nullable</code> 속성도 자주 사용된다. <code>DDL</code>을 호출할 때 <code>not null column</code>을 만들기 위해 설정한다.</p><ul><li><strong>일반적인 조회 쿼리에서 validation을 하지 않는다.</strong></li></ul><p>Column이 단독적으로 <code>unique</code>해야 한다면 @Column의 속성에 추가할 수 있다.</p><p><code>insertable</code>, <code>updateable</code> 속성은 DDL 외에 DML에도 영향을 받는다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column(name = &quot;crtdat&quot;, nullable = false)</span></span><br><span class="line"><span class="keyword">private</span> LocalDate createdAt;</span><br></pre></td></tr></table></figure><hr><h3 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h3><p>Transient는 JPA의 Entity에서 DB의 column외의 <code>추가 field</code>를 갖고 싶을 때 추가해준다.</p><p>아래와 같이 설정하면 쿼리문을 실행할 때 DB에 반영되지 않고, JPA에서만 사용된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> String secret;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="JPA" scheme="http://inwoo.github.io/categories/Basic/JPA/"/>
    
    
    <category term="JPA Annotation" scheme="http://inwoo.github.io/tags/JPA-Annotation/"/>
    
  </entry>
  
  <entry>
    <title>Spring - 비동기 처리 (async)</title>
    <link href="http://inwoo.github.io/11/09/async/"/>
    <id>http://inwoo.github.io/11/09/async/</id>
    <published>2021-11-09T11:11:06.000Z</published>
    <updated>2021-11-09T12:08:43.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="비동기적-Asynchronous-이란"><a href="#비동기적-Asynchronous-이란" class="headerlink" title="비동기적 (Asynchronous) 이란 ?"></a>비동기적 (Asynchronous) 이란 ?</h2><p><img src="https://media.vlpt.us/images/dorazi/post/dadf63e9-5994-4967-bc3f-ca0bc173897c/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-03-31%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%202.29.45.png" alt="image"></p></blockquote><p>비동기는 요청과 결과가 동시에 일어나지 않는 것입니다.</p><p>위에서 Synchronous 처리는 다른 처리가 끝나야 다른 task를 시작하기 시작합니다.</p><p>반면에 <code>Asynchronous</code>는 다른 작업이 끝나기를 기다리지 않고 또 다른 작업을 수행할 수 있습니다.  </p><p>Web MVC에서는 많이 활용되고 있지는 않습니다.</p><p>Spring에서는 <code>CompletableFuture</code>를 통해 비동기 처리를 할 수 있다.</p><h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h3><p><code>CompletableFuture</code>는 java util에서 제공하는 클래스로 <code>Future</code>과 <code>CompletionStage</code> 인터페이스를 Implements합니다.</p><p>쓰레드를 직접 생성하지 않고, 미리 저장해둔 thread 관련 configure을 통해 호출할 수 있습니다.</p><h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><p>비동기적 연산의 결과를 표현하는 인터페이스입니다.</p><p>멀티 쓰레드 환경에서 처리된 <code>데이터를 다른 쓰레드에 전달</code>할 수 있고, <code>Thread-Safe</code>합니다.</p><hr><blockquote><h2 id="Spring의-비동기-처리"><a href="#Spring의-비동기-처리" class="headerlink" title="Spring의 비동기 처리"></a>Spring의 비동기 처리</h2></blockquote><p>Spring MVC 3.2 버전 이후부터 Servlet 3.0 기반의 비동기 처리가 가능합니다.</p><p>Spring에서는 <code>annotation</code>을 통해 메서드를 비동기적으로 호출할 수 있습니다.</p><h3 id="1-Main-클래스에-EnableAsync-Annotation-추가"><a href="#1-Main-클래스에-EnableAsync-Annotation-추가" class="headerlink" title="1. Main 클래스에 @EnableAsync Annotation 추가"></a>1. Main 클래스에 <code>@EnableAsync</code> Annotation 추가</h3><p>비동기 처리를 사용하기 위해서 <code>@SpringBootApplication</code>이 명시된 곳에 <code>@EnableAsync</code>를 추가해 주어야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AsyncTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ThreadPoolTaskExecutor-구현"><a href="#2-ThreadPoolTaskExecutor-구현" class="headerlink" title="2. ThreadPoolTaskExecutor 구현"></a>2. ThreadPoolTaskExecutor 구현</h3><p>필수적인 것은 아니지만 서버를 개발함에 있어서 traffic을 예상하여 미리 Thread를 할당해주는 방법이 좋다고 생각합니다.</p><p><code>ThreadPoolTaskExecutor</code> 클래스를 통해 Thread Pool의 <code>Max Size</code>, <code>Core Pool Size</code>, <code>Queue Capacity</code>, <code>Thread Name Prefix</code> 등을 설정할 수 있습니다.</p><p><code>Core Pool Size</code>(동시 실행 가능한 쓰레드 개수)에 설정한 쓰레드 풀의 크기를 초과하는 task가 들어오면 <code>Queue Capacity</code>에 task가 쌓입니다.</p><p>이 때 Queue Capacity에 최대 <code>Max Pool Size</code>에 설정한만큼 task를 보관할 수 있습니다.</p><p>이를 통해 호출된 Thread에는 Async-라는 이름이 붙도록 <code>prefix</code>를 설정해주었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;async-thread&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">asyncConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor tpte = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        tpte.setMaxPoolSize(<span class="number">100</span>);</span><br><span class="line">        tpte.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        tpte.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">        tpte.setThreadNamePrefix(<span class="string">&quot;Async-&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> tpte;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Service-단에서-사용"><a href="#3-Service-단에서-사용" class="headerlink" title="3. Service 단에서 사용"></a>3. Service 단에서 사용</h3><p>메서드에 <code>@Async</code>라는 Annotation을 붙이고, 위에서 지정한 <strong>Bean의 id</strong>를 통해 사용할 Thread Pool을 설정하였습니다.</p><p>서비스 로직(hello)을 작성하여 CompletableFuture를 return하는 메서드에 넣어주었습니다.</p><p>여기서 <code>AsyncResult</code>는 비동기처리를위해 Future를 리턴하는 메서드의 <code>method signature</code>로 사용되는 handlerdlek.<br>    - method signature : 메서드 이름과, 파라미터에 관해 약속된 메서드 생성 규칙</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;async-thread&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult(hello()).completable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;Thread Sleeping..&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;service hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이후에 추가적으로 <code>Controller</code>에서 Service Class를 의존성 주입하고, run()메서드를 호출하면 비동기 처리가 가능합니다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Spring" scheme="http://inwoo.github.io/categories/Basic/Spring/"/>
    
    
    <category term="비동기" scheme="http://inwoo.github.io/tags/%EB%B9%84%EB%8F%99%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>TCP Protocol</title>
    <link href="http://inwoo.github.io/11/03/tcpProtocol/"/>
    <id>http://inwoo.github.io/11/03/tcpProtocol/</id>
    <published>2021-11-03T14:33:15.000Z</published>
    <updated>2021-11-03T14:37:15.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="TCP-Header"><a href="#TCP-Header" class="headerlink" title="TCP Header"></a>TCP Header</h2></blockquote><h3 id="Port-정보"><a href="#Port-정보" class="headerlink" title="Port 정보"></a>Port 정보</h3><ul><li><p>TCP는 포트를 통해 통신하므로 Source, Destination Port를 가지고 있다.</p></li><li><p><strong>16bit</strong></p></li><li><p>데이터를 전송할 때 데이터를 순서에 맞게 나눠서 전송하는데 이를 위한 Sequence Number도 있다.</p></li></ul><h3 id="Ack-Number"><a href="#Ack-Number" class="headerlink" title="Ack Number"></a>Ack Number</h3><ul><li>잘 받았는지 확인하기 위한 정보</li></ul><h3 id="Code-Bits"><a href="#Code-Bits" class="headerlink" title="Code Bits"></a>Code Bits</h3><ul><li>URG, ACK, PSH, RST, SYN, FIN</li></ul><hr><blockquote><h2 id="TCP-3-way-handshake-연결"><a href="#TCP-3-way-handshake-연결" class="headerlink" title="TCP 3-way-handshake (연결)"></a>TCP 3-way-handshake (연결)</h2></blockquote><p>Server에 Connect하면 sync를 1로해서 보낸다.</p><p>seq에 1을 더해서 ack을 설정한 뒤 접속한다.</p><blockquote><h2 id="TCP-4-way-handshake-연결-해제"><a href="#TCP-4-way-handshake-연결-해제" class="headerlink" title="TCP 4-way-handshake (연결 해제)"></a>TCP 4-way-handshake (연결 해제)</h2></blockquote><p>Client에서 FIN을 1로 해서 보내고, Server에서 ACK를 1을 주고, 잠시 후에 FIN을 1로 보내고<br>마지막으로 Cli에서 FIN 1을 보낸다.</p><p>port가 사용중이라하면 4th 과정에서 응답을 안해줘서 그럴 수도 있다.</p><hr><blockquote><h2 id="전송"><a href="#전송" class="headerlink" title="전송"></a>전송</h2></blockquote><p>header에 Len 인자에 데이터 길이를 넣어서 보낸다.</p><p>2GB 파일을 패킷의 최대 크기인 1500KB???로 나눠서 보내는데,, ,</p><p>len : 전체 데이터의 길이</p><p>ACK = seq + len(데이터 길이)</p><blockquote><h2 id="제어"><a href="#제어" class="headerlink" title="제어"></a>제어</h2></blockquote><p>수도관처럼 시간 당 보낼 수 있는 양에 한계가 있다.</p><p>적절하게 전송해줘야 유실되지않고, 정확이 도착할 것이다.</p><p>네트워크 트래픽에 따른 효율적/신뢰적 송신을 위한 제어 알고리즘 적용</p><hr><blockquote><h2 id="흐름-제어-Flow-Control"><a href="#흐름-제어-Flow-Control" class="headerlink" title="흐름 제어(Flow Control)"></a>흐름 제어(Flow Control)</h2></blockquote><p>End to End 컴퓨터의 성능을 자동으로 detect해서 전송한다.<br><strong>Sliding Window</strong> 알고리즘을 통해 알맞게 흐름량을 제어해준다.</p><h3 id="Sliding-window"><a href="#Sliding-window" class="headerlink" title="Sliding window"></a>Sliding window</h3><p>송신자와 수신자가 한 번에 주고 받을 수 있는 양의 minimum을 선택하여 window size로 정한다.</p><p><strong>SYN와 SYN/ACK 사이의 시간인 RTT를 기반으로 window size를 재설정해줘서 mininum보다 더 큰 값으로 설정된다.</strong></p><p>ACK를 받지 못해도 window size만큼 데이터를 보낸다.</p><p>ACK를 받으면 한 칸씩 sliding하며 window를 옮겨준다. =&gt; ACK을 받은 만큼 데이터를 또 전송할 수 있다.</p><ul><li>과거에는 Stop and Wait 방식을 사용해서 각 패킷마다 번호를 할당하고, 한 패킷이 보내질 때 이에 대한 ACK가 돌아와야 다른 패킷을 전송했다.</li></ul><hr><blockquote><h2 id="혼잡-제어-Congestion-Control"><a href="#혼잡-제어-Congestion-Control" class="headerlink" title="혼잡 제어(Congestion Control)"></a>혼잡 제어(Congestion Control)</h2></blockquote><p>다양한 망을 타고 데이터가 전송 될 때, 망의 traffic을 고려해서 알맞게 데이터 양을 설정하는 알고리즘</p><h3 id="Congestion-window-초기값"><a href="#Congestion-window-초기값" class="headerlink" title="Congestion window 초기값"></a>Congestion window 초기값</h3><ul><li>1 MSS (기본 단위)</li><li>한 번에 데이터를 보낼 수 있는 크기</li><li>MSS = MTU - (IP 헤더 길이) - (TCP 헤더 길이)<ul><li>보통 1500 - 20 - 20 =. 460</li></ul></li></ul><h3 id="AIMD-Additive-Increase-Multicative-Decrease"><a href="#AIMD-Additive-Increase-Multicative-Decrease" class="headerlink" title="AIMD(Additive Increase/Multicative Decrease)"></a>AIMD(Additive Increase/Multicative Decrease)</h3><ul><li>지속적으로 증가시키다가 트래픽이 안오면 절반으로 감소시키고, 들어오면 다시 증가시키는 알고리즘</li><li>처음 CWND = 1</li><li>패킷 전송이 성공하여 <strong>ACK가 도착하면 CWND += 1</strong></li><li><strong>도착하지않으면 CWND /= 2</strong></li></ul><h3 id="Slow-Start"><a href="#Slow-Start" class="headerlink" title="Slow Start"></a>Slow Start</h3><ul><li>처음 CWND = 1</li><li>패킷 전송이 성공하여 *<em>ACK가 도착하면 CWND <em>= 2</em></em></li><li><strong>도착하지않으면 CWND = 1</strong></li></ul><h3 id="Congestion-Avoidance"><a href="#Congestion-Avoidance" class="headerlink" title="Congestion Avoidance"></a>Congestion Avoidance</h3><ul><li>CWND가 일정 크기에 도달하고, ACK가 도착하면 CWND += 1</li></ul><hr><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><blockquote><h2 id="UDP-란"><a href="#UDP-란" class="headerlink" title="UDP 란?"></a>UDP 란?</h2></blockquote><p>UDP는 User Datagram protocol로 사용자 데이터그램 프로토콜이다.</p><p>TCP와 달리 <strong>브로드캐스팅 지원</strong>을 해주고, <strong>신뢰성이 없기 때문에</strong> 데이터의 유실이 일부있어도 문제 없고, 속도가 필요한 동영상 스트리밍 등의 서비스에서 많이 사용된다.</p><p>헤더도 TCP에 비해 단순하여 비교적 가볍다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Web &amp; Network" scheme="http://inwoo.github.io/categories/Basic/Web-Network/"/>
    
    
  </entry>
  
  <entry>
    <title>OSI 7 Layer</title>
    <link href="http://inwoo.github.io/11/03/osi7layer/"/>
    <id>http://inwoo.github.io/11/03/osi7layer/</id>
    <published>2021-11-03T14:32:47.000Z</published>
    <updated>2021-11-03T14:35:47.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p><img src="https://media.vlpt.us/images/realiron/post/e39bf9c2-b652-4ac9-a3d9-6d651e77ec32/The_7_Layers_of_OSI.png" alt="img"></p><p>여러 프로토콜이 Data에 계속해서 각각의 header를 붙여서 헤더와 정보를 구성한다.</p><ul><li>Application-&gt;Presentation-&gt;Session-&gt;Transport-&gt;Network-&gt;DataLink-&gt;Physical</li><li>이전 계층의 header도 하나의 데이터로 취급한다.</li></ul><p>LAN 카드를 통해 헤더와 데이터를 보내고, 전송받은 곳에서는 역순으로 헤더를 check하고 떼어낸다.</p><ul><li>배열에서 인덱스 0번의 데이터를 제외하고 slicing하는 모습과 유사하다.</li></ul><h3 id="캡슐화와-역캡슐화"><a href="#캡슐화와-역캡슐화" class="headerlink" title="+ 캡슐화와 역캡슐화"></a>+ 캡슐화와 역캡슐화</h3><h4 id="송신측에서-데이터에-header를-붙이고-캡슐화를-한다"><a href="#송신측에서-데이터에-header를-붙이고-캡슐화를-한다" class="headerlink" title="송신측에서 데이터에 header를 붙이고, 캡슐화를 한다."></a>송신측에서 데이터에 header를 붙이고, 캡슐화를 한다.</h4><h4 id="수신측에서는-역캡슐화하여-각-계층의-header에-해당하는-데이터를-제외시킨다"><a href="#수신측에서는-역캡슐화하여-각-계층의-header에-해당하는-데이터를-제외시킨다" class="headerlink" title="수신측에서는 역캡슐화하여 각 계층의 header에 해당하는 데이터를 제외시킨다."></a>수신측에서는 역캡슐화하여 각 계층의 header에 해당하는 데이터를 제외시킨다.</h4><hr><h3 id="Application-Layer-응용-계층"><a href="#Application-Layer-응용-계층" class="headerlink" title="Application Layer (응용 계층)"></a>Application Layer (응용 계층)</h3><p><strong>대표적인 프로토콜 : HTTP</strong><br>네트워크 응용프로그램을 위한 인터페이스를 제공한다.</p><h3 id="Presentation-Layer-표현-계층"><a href="#Presentation-Layer-표현-계층" class="headerlink" title="Presentation Layer (표현 계층)"></a>Presentation Layer (표현 계층)</h3><p>응용 계층으로부터 전달받거나, 전달해야하는 데이터의 암호화를 담당한다.</p><ul><li>Http와 https의 차이는 암호화에 있다.</li></ul><h3 id="Session-Layer-세션-계층"><a href="#Session-Layer-세션-계층" class="headerlink" title="Session Layer (세션 계층)"></a>Session Layer (세션 계층)</h3><p>세션 및 Dialogue 연결 및 관리를 담당한다.</p><p>FTP를 통해 여러 파일을 다운로드 받을 때, 각 다운로드를 Session으로 구분하여 연결하고 관리한다.</p><h3 id="Transport-Layer-전송-계층"><a href="#Transport-Layer-전송-계층" class="headerlink" title="Transport Layer (전송 계층)"></a>Transport Layer (전송 계층)</h3><p><strong>대표적인 프로토콜 : TCP</strong><br><strong>데이터 단위 : segment</strong></p><p>목적지에 신뢰할 수 있는 데이터 전달을 담당한다.</p><p>목적지의 어떤 응용 프로그램에 데이터를 전달해야하는지 <strong>포트를 통해 식별</strong>할 수 있다.</p><h4 id="TCP-vs-UDP"><a href="#TCP-vs-UDP" class="headerlink" title="TCP vs UDP"></a>TCP vs UDP</h4><p><strong>TCP</strong></p><ul><li>연결형 프로토콜, 데이터의 전송순서 및 신뢰성 보장</li><li>Path를 만들어놓고, 송수신이 끝나면 끊는다.</li></ul><p><strong>UDP</strong></p><ul><li>비연결형 프로토콜, TCP보다 빠른 전송 속도</li><li>스트리밍, 브로드캐스팅 서비스에 사용된다.</li><li>데이터 단위 : 데이터 그램</li></ul><h3 id="Network-Layer-네트워크-계층"><a href="#Network-Layer-네트워크-계층" class="headerlink" title="Network Layer (네트워크 계층)"></a>Network Layer (네트워크 계층)</h3><p><strong>대표적인 프로토콜 : IP</strong><br><strong>데이터 단위 : packet</strong></p><p>다양하고, 방대한 네트워크 상에서, 컴퓨터의 논리적인 연결을 할 수 있게 해준다.</p><p>Source, Destination IP Address를 가지고 있다.</p><h3 id="Data-Link-Layer-데이터-링크-계층"><a href="#Data-Link-Layer-데이터-링크-계층" class="headerlink" title="Data Link Layer (데이터 링크 계층)"></a>Data Link Layer (데이터 링크 계층)</h3><p><strong>대표적인 프로토콜 : Ethernet</strong><br><strong>데이터 단위 : Frame</strong></p><p>물리적 네트워크 사이의 데이터 송, 수신을 담당한다.</p><p>Ethernet 헤더는 Source, Destination MAC address 정보를 담고있다.</p><ul><li>각 하드웨어는 유일한 MAC Address를 가지고있다.</li></ul><h3 id="Physical-Layer-물리-계층"><a href="#Physical-Layer-물리-계층" class="headerlink" title="Physical Layer (물리 계층)"></a>Physical Layer (물리 계층)</h3><p>디지털은 0, 1로 데이터를 주고 받지만, 아날로그 신호는 주파수에 데이터를 실어서 송수신한다.<br>물리 계층에서는 디지털 신호를 전기 신호로 변환하여 송수신한다.</p><hr><blockquote><h2 id="TCP-IP-모델"><a href="#TCP-IP-모델" class="headerlink" title="TCP/IP 모델"></a>TCP/IP 모델</h2></blockquote><p><img src="https://user-images.githubusercontent.com/24274424/86514723-94b77900-be4e-11ea-8456-ad39b27d9ba9.png" alt="img"></p><p>인터넷 통신을 위한 모델이다.</p><p>전송계층과, 인터넷(네트워크) 계층은 그래도 존재한다.</p><p>물리, 데이터링크 계층은 네트워크 접속 계층으로, 세션, 표현, 응용 계층은 응용 계층으로 처리한다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Web &amp; Network" scheme="http://inwoo.github.io/categories/Basic/Web-Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Session (세션)</title>
    <link href="http://inwoo.github.io/11/03/session/"/>
    <id>http://inwoo.github.io/11/03/session/</id>
    <published>2021-11-03T14:30:14.000Z</published>
    <updated>2021-11-03T14:35:15.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p>브라우저 상에서 CRUD를 누구나 수행할 수 있게되면 악의적인 실행을 통해 서버 데이터 유지가 어려워질 수 있다.</p><p>Servlet 입장에서 요청한 브라우저의 상태 정보를 매 번 확인할 수 있어야한다.</p><p>관련해서 정책이 필요한데, 예를 들면 로그인 된 상태에서, 작성자가 일치하면 UPDATE나 DELETE를 할 수 있는 정책이다.</p><hr><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* HttpServletRequest request */</span></span><br><span class="line">HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure><p><strong>getSession() 이 호출되면 key, value를 저장할 메모리가 할당된다.</strong></p><p>요청한 브라우저와 매핑된 세션을 서버 메모리에서 찾아주며, 브라우저가 종료되면 해당 세션이 삭제된다.</p><ul><li>브라우저 1개당, 서버 메모리 1개</li></ul><h3 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute()"></a>getAttribute()</h3><p>Session을 통해 userID의 값이 저장(로그인) 돼었을 때만 service 단에 접근할 수 있도록 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;userID&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">response.sendRedirect(<span class="string">&quot;login.html&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getAttribute()</code> 메서드를 사용할 때는 Object 타입으로 해주기 떄문에 형변환</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String userRole = (String)session.getAttribute(<span class="string">&quot;userRole&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="swetAttribute-removeAttribute"><a href="#swetAttribute-removeAttribute" class="headerlink" title="swetAttribute(), removeAttribute()"></a>swetAttribute(), removeAttribute()</h3><p>각 속성 값을 아래와 같이 설정할 수 있으며, Key 값이 중복되면 value 값이 update 된다.</p><p><code>removeAttribute()</code> 메서드를 통해 Key, value 쌍을 삭제할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">session.setAttribute(<span class="string">&quot;userID&quot;</span>, user.getId());</span><br><span class="line">session.setAttribute(<span class="string">&quot;userName&quot;</span>, user.getName());</span><br><span class="line">session.setAttribute(<span class="string">&quot;userRole&quot;</span>, user.getRole());</span><br><span class="line">session.setAttribute(<span class="string">&quot;userID&quot;</span>, user.getId());</span><br><span class="line">session.removeAttribute(<span class="string">&quot;userID&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="세션의-timealive"><a href="#세션의-timealive" class="headerlink" title="세션의 timealive"></a>세션의 timealive</h3><p>메모리가 낭비될 수 있기 때문에 tomcat 서버의 default 값은 30분이다.</p><p>Interaction(서버에 요청)이 없는 순간을 기준으로 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.setMaxInactiveInterval(<span class="number">10</span>); </span><br></pre></td></tr></table></figure><h3 id="invalidate"><a href="#invalidate" class="headerlink" title="invalidate()"></a>invalidate()</h3><p>Logout을 할 때 <code>session을 강제로 삭제</code>시킬 때 주로 사용된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Web &amp; Network" scheme="http://inwoo.github.io/categories/Basic/Web-Network/"/>
    
    
    <category term="session" scheme="http://inwoo.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>JPA Methods</title>
    <link href="http://inwoo.github.io/11/03/jpa/"/>
    <id>http://inwoo.github.io/11/03/jpa/</id>
    <published>2021-11-03T14:01:40.000Z</published>
    <updated>2021-11-03T14:29:36.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p>ORM은 java 객체와 DB record와의 연동을 해주는 것이므로, <code>최종 동작은 SQL 쿼리가 실행</code>된다.</p><p><strong>JpaRepository의 메서드를 통해 실행되는 실제 쿼리들을 살펴볼 수 있다.</strong></p><ul><li><code>show-sql</code> : 메서드를 통해 실행되는 쿼리를 log로 찍을 수 있음</li><li><code>properties:hibernate:format_sql</code> : 보기 좋게 정렬</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  jpa:</span><br><span class="line">    defer-datasource-initialization: true</span><br><span class="line">    show-sql: true</span><br><span class="line">    properties:</span><br><span class="line">      hibernate:</span><br><span class="line">        format_sql: true</span><br></pre></td></tr></table></figure><hr><blockquote><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2></blockquote><h3 id="getOne-getById-FindById"><a href="#getOne-getById-FindById" class="headerlink" title="getOne(), getById(), FindById()"></a>getOne(), getById(), FindById()</h3><p><strong>getOne()</strong></p><ul><li>Entity에 대해서 <code>Lazy Loading</code>을 하여, Spring Data JPA 2.5 버전 이전에만 사용되었다.</li><li>일반적으로 객체를 getOne()으로 불러와 저장, 출력 등을 실행할 때 session이 만료되기 때문에 <code>@Transactional</code> 어노테이션과 함께 사용하여야한다.</li></ul><blockquote><p>더 이상 사용되지 않는 getOne() 메서드를 <code>getById()</code> 메서드가 대체합니다.<br>참조값을 return해주기 때문에, query를 통해 구현되던 기존의 getById() 메서드로 대체합니다.<br>이로 인해 transaction 외부에서 <code>LazyLoadingException</code>이 발생할 수 있는데, 이를 방지하기 위해 getById()메서드를 getXyzId() 메서드로 변경해야한다.<br>Xyz에는 아무 문자열이나 들어갈 수 있다.<br>출처 : Spring Data JPA docs</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getOne</span><span class="params">(ID id)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  Assert.notNull(id, ID_MUST_NOT_BE_NULL);</span><br><span class="line">  <span class="keyword">return</span> em.getReference(getDomainClass(), id);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>위와 같이 EntityManager em이 reference만 가지고있고, 실제 값을 구하는 시점에 세션을 통해 값을 가져와야한다.</strong></p><p><strong>getById()</strong></p><ul><li>JPA 2.5 버전 이상에서 getOne()과 같이 사용하면 됩니다.</li><li>구현 코드 또한 같다.</li></ul><p><strong>findById()</strong></p><ul><li>Opional<T> entity를 리턴해주며, <code>Eager Loading</code> 방식이다.</li><li>Optional 객체로 wrapping되어 있기 때문에 별도의 처리가 필요하다.</li><li>아래와 같이 해당 객체가 없으면 null을 리턴하도록 처리하였다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User user = userRepository.findById(<span class="number">1L</span>).orElse(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Optional.ofNullable(type == <span class="keyword">null</span> ? em.find(domainType, id, hints) : em.find(domainType, id, type, hints));</span><br></pre></td></tr></table></figure><p><strong>Entity Manger에서 바로 find()메서드를 통해 가져온다.</strong></p><h3 id="Sort"><a href="#Sort" class="headerlink" title="Sort()"></a>Sort()</h3><p>sort.by를 사용하면 <code>ORDER BY</code> 쿼리가 실행된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = userRepository.findAll(Sort.by(Sort.Direction.DESC, <span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">users.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="findAllById"><a href="#findAllById" class="headerlink" title="findAllById()"></a>findAllById()</h3><p>findAllById, findById를 사용하면 <code>WHERE</code> 쿼리를 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; ids = <span class="keyword">new</span> ArrayList&lt;Long&gt;;</span><br><span class="line">ids.add(<span class="number">1L</span>);</span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><p>Main 폴더에서 사용할 때는 위와 같이 ArrayList를 생성해서 값을 넣어주어야한다.</p><p>하지만 Test 코드에서는 assrtj의 클래스를 사용하여 아래와 같이 사용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = userRepository.findAllById(Lists.newArrayList(<span class="number">1L</span>, <span class="number">3L</span>, <span class="number">5L</span>));</span><br><span class="line">users.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="saveAll"><a href="#saveAll" class="headerlink" title="saveAll()"></a>saveAll()</h3><p>saveAll()을 실행하면 각 객체에 대해 <code>INSERT</code> 쿼리를 객체 수만큼 실행한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user1 = <span class="keyword">new</span> User(<span class="string">&quot;inwoo&quot;</span>, <span class="string">&quot;inwoo@gmail.com&quot;</span>);</span><br><span class="line">User user2 = <span class="keyword">new</span> User(<span class="string">&quot;eddy&quot;</span>, <span class="string">&quot;eddy@gmail.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">userRepository.saveAll(Lists.newArrayList(user1, user2));</span><br></pre></td></tr></table></figure><h3 id="flush-saveAndFlush"><a href="#flush-saveAndFlush" class="headerlink" title="flush(), saveAndFlush()"></a>flush(), saveAndFlush()</h3><p>flush()를 실행하여 DB에 반영하는 시점을 제어할 수 있다.</p><p>saveAndFlush()는 저장 후 바로 DB에 반영을 시켜주는 메서드이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">userRepostiory.save(<span class="keyword">new</span> User(<span class="string">&quot;inwoo&quot;</span>, <span class="string">&quot;inwoo@gmail.com&quot;</span>));</span><br><span class="line"></span><br><span class="line">userRepository.flush();</span><br><span class="line"></span><br><span class="line">userRepository.saveAndFlush();</span><br></pre></td></tr></table></figure><h3 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h3><p>count는 이름 그대로 Repository의 데이터가 개수를 리턴해준다.<br><code>리턴 타입은 long이다.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = userRepository.count();</span><br></pre></td></tr></table></figure><h3 id="existsById"><a href="#existsById" class="headerlink" title="existsById()"></a>existsById()</h3><p>Id 값을 parameter로 넣어 해당 id에 해당하는 데이터가 있는지 <code>boolean 타입으로 리턴한다.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> exists = userRepository.existsById(<span class="number">1L</span>);</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h3><p>해당 데이터를 찾아서 parameter로 입력하면 data를 WHERE 쿼리를 통해 삭제한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userRepository.delete(userRepository.findById(<span class="number">1L</span>).orElseThrow(RuntimeException::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><hr><blockquote><h2 id="etc-Page-QBE"><a href="#etc-Page-QBE" class="headerlink" title="etc. (Page, QBE)"></a>etc. (Page, QBE)</h2></blockquote><blockquote><h3 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h3></blockquote><p>Page는 데이터를 literally page 형태로 감싸준다.</p><p>아래 코드는 repo에 있는 모든 데이터를 <code>Pagerequest</code>를 통해 1페이지의 데이터를 가져오고, 1페이지당 size 3으로 나누어 생성한다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;User&gt; users = userRepository.findAll(PageRequest.of(<span class="number">1</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>위 코드의 users 페이지의 <code>getter()</code>를 통해 다양한 데이터를 호출할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;page 정보 : &quot;</span> + users);</span><br><span class="line">System.out.println(<span class="string">&quot;전체 데이터 개수 : &quot;</span> + users.getTotalElements());</span><br><span class="line">System.out.println(<span class="string">&quot;데이터 리스트를 size로 나누었을 때 나온 전체 페이지&quot;</span> + users.getTotalPages());</span><br><span class="line">System.out.println(<span class="string">&quot;PageRequest에 요청했던 페이지에 있는 데이터 개수 (zero-bases)&quot;</span> + users.getNumberOfElements());</span><br><span class="line">System.out.println(<span class="string">&quot;Sort로 설정한 값&quot;</span> + users.getSort());</span><br><span class="line">System.out.println(<span class="string">&quot;PageRequest에 요청했던 페이지 1개당 size&quot;</span> + users.getSize());</span><br></pre></td></tr></table></figure><hr><blockquote><h3 id="QBE-Query-By-Example"><a href="#QBE-Query-By-Example" class="headerlink" title="QBE (Query By Example)"></a>QBE (Query By Example)</h3></blockquote><p>QBE는 단어그대로 <code>Example</code>과 <code>Matcher</code>를 생성하여, 해당된 데이터를 찾아내는 방식이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ExampleMatcher matcher = ExampleMatcher.matching() <span class="comment">// matching 선언</span></span><br><span class="line">        .withIgenorePaths(<span class="string">&quot;name&quot;</span>) <span class="comment">// matching에서 제외할 column 설정</span></span><br><span class="line">        .withMatcher(<span class="string">&quot;email&quot;</span>, endsWith());    <span class="comment">// email column에서 설정한 단어로 끝나는 데이터가 있으면 match</span></span><br><span class="line"></span><br><span class="line">Example&lt;User&gt; example = Example.of(<span class="keyword">new</span> User(<span class="string">&quot;Any name does&#x27;nt care&quot;</span>, <span class="string">&quot;gmail.com&quot;</span>), matcher);</span><br><span class="line"></span><br><span class="line">userRepository.findAll(example).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>위 코드를 보면 먼저 <code>ExampleMatcher</code>를 생성하고, <code>Example</code>의 타입을 알맞은 Data 타입으로 설정해준다.</p><p>내부에서 임시적으로 객체를 생성하여, 이 객체와 matching되는 데이터를 <code>matcher</code>를 통해 찾는다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="JPA" scheme="http://inwoo.github.io/categories/Basic/JPA/"/>
    
    
    <category term="JPA" scheme="http://inwoo.github.io/tags/JPA/"/>
    
    <category term="method" scheme="http://inwoo.github.io/tags/method/"/>
    
  </entry>
  
  <entry>
    <title>TroubleShooting SpringBoot와 data.sql 충돌</title>
    <link href="http://inwoo.github.io/11/03/jpaTroubleShooting/"/>
    <id>http://inwoo.github.io/11/03/jpaTroubleShooting/</id>
    <published>2021-11-02T15:00:42.000Z</published>
    <updated>2021-11-03T06:15:06.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><h3 id="해결-방안을-얻고-싶은-분은-이-부분만-참고하시면-됩니다"><a href="#해결-방안을-얻고-싶은-분은-이-부분만-참고하시면-됩니다" class="headerlink" title="해결 방안을 얻고 싶은 분은 이 부분만 참고하시면 됩니다."></a>해결 방안을 얻고 싶은 분은 이 부분만 참고하시면 됩니다.</h3></blockquote><h3 id="Spring-Boot-2-5-버전-이상에서-h2-DB를-통한-테스트를-실행할-때"><a href="#Spring-Boot-2-5-버전-이상에서-h2-DB를-통한-테스트를-실행할-때" class="headerlink" title="Spring Boot 2.5 버전 이상에서 h2 DB를 통한 테스트를 실행할 때,"></a>Spring Boot 2.5 버전 이상에서 h2 DB를 통한 테스트를 실행할 때,</h3><h4 id="1-SQL의-Column은-grave-accent-로-감싸고-Value는-39-single-quote-로-감쌌는지-확인"><a href="#1-SQL의-Column은-grave-accent-로-감싸고-Value는-39-single-quote-로-감쌌는지-확인" class="headerlink" title="1. SQL의 Column은 `(grave accent)로 감싸고, Value는 &#39;(single quote)로 감쌌는지 확인"></a>1. <code>SQL의 Column은 `(grave accent)로 감싸고, Value는 &#39;(single quote)로 감쌌는지 확인</code></h4><h4 id="2-yml파일에-spring-jpa-defer-datasource-initialization-true-추가하기"><a href="#2-yml파일에-spring-jpa-defer-datasource-initialization-true-추가하기" class="headerlink" title="2. yml파일에 spring:jpa:defer-datasource-initialization: true 추가하기"></a>2. <code>yml파일에 spring:jpa:defer-datasource-initialization: true 추가하기</code></h4><hr><blockquote><h2 id="발단"><a href="#발단" class="headerlink" title="발단"></a>발단</h2></blockquote><h4 id="1-Spring-Boot에서-sql파일을-생성하고-JPA-연동을-통해-데이터가-잘-로드되는지-간단한-테스트를-하기위해-프로젝트를-생성했다"><a href="#1-Spring-Boot에서-sql파일을-생성하고-JPA-연동을-통해-데이터가-잘-로드되는지-간단한-테스트를-하기위해-프로젝트를-생성했다" class="headerlink" title="1. Spring Boot에서 sql파일을 생성하고, JPA 연동을 통해 데이터가 잘 로드되는지 간단한 테스트를 하기위해 프로젝트를 생성했다."></a>1. Spring Boot에서 sql파일을 생성하고, <code>JPA 연동을 통해</code> 데이터가 잘 로드되는지 간단한 테스트를 하기위해 프로젝트를 생성했다.</h4><details><summary>build.gradle 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.5.6&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="string">&#x27;1.0.11.RELEASE&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&#x27;com.inwoo.jpa&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line">sourceCompatibility = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    compileOnly &#123;</span><br><span class="line">        extendsFrom annotationProcessor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-data-jpa&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span></span><br><span class="line">    compileOnly <span class="string">&#x27;org.projectlombok:lombok&#x27;</span></span><br><span class="line">    runtimeOnly <span class="string">&#x27;com.h2database:h2&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;org.projectlombok:lombok&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h4 id="2-main-폴더-하위에-JpaRepository를-상속받은-repo를-생성하고-test폴더-하위-resource-폴더-내에-data-sql-파일을-생성하였다"><a href="#2-main-폴더-하위에-JpaRepository를-상속받은-repo를-생성하고-test폴더-하위-resource-폴더-내에-data-sql-파일을-생성하였다" class="headerlink" title="2. main 폴더 하위에 JpaRepository를 상속받은 repo를 생성하고, test폴더 하위 resource 폴더 내에 data.sql 파일을 생성하였다."></a>2. main 폴더 하위에 JpaRepository를 상속받은 repo를 생성하고, test폴더 하위 resource 폴더 내에 data.sql 파일을 생성하였다.</h4><p>Primary Key인 id 증가를 위해 <code>call next value for hibernate_sequence;</code> 코드를 추가해주었다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;INWOO&#x27;</span>, <span class="string">&#x27;INWOO@NAVER.COM&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;DENNIS&#x27;</span>, <span class="string">&#x27;DENNIS@NAVER.COM&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;SOPHIA&#x27;</span>, <span class="string">&#x27;SOPHIA@GOOGLE.COM&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">4</span>, <span class="string">&#x27;JAMES&#x27;</span>, <span class="string">&#x27;JAMES@GMAIL.COM&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">5</span>, <span class="string">&#x27;INWOO&#x27;</span>, <span class="string">&#x27;inwoo@gmail.com&#x27;</span>, now(), now());</span><br></pre></td></tr></table></figure><h4 id="3-Test-코드에-repo를-DI한-후-crud-테스트를-진행하였다"><a href="#3-Test-코드에-repo를-DI한-후-crud-테스트를-진행하였다" class="headerlink" title="3. Test 코드에 repo를 DI한 후 crud 테스트를 진행하였다."></a>3. Test 코드에 repo를 DI한 후 crud 테스트를 진행하였다.</h4><hr><blockquote><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2></blockquote><h3 id="BeanCreationException-발생"><a href="#BeanCreationException-발생" class="headerlink" title="BeanCreationException 발생"></a>BeanCreationException 발생</h3><h4 id="Bean-Definition에-있는-bean을-생성하려할-때-BeanFactory에서-발생하는-예외입니다"><a href="#Bean-Definition에-있는-bean을-생성하려할-때-BeanFactory에서-발생하는-예외입니다" class="headerlink" title="Bean Definition에 있는 bean을 생성하려할 때 BeanFactory에서 발생하는 예외입니다."></a>Bean Definition에 있는 bean을 생성하려할 때 BeanFactory에서 발생하는 예외입니다.</h4><blockquote><p>Error creating bean with name ‘dataSourceScriptDatabaseInitializer’ defined in class path resource [path]:</p></blockquote><p>class path에 위치한 Database와 관련된 bean을 생성할 때 오류가 발생하였다.</p><blockquote><p>Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException:</p></blockquote><p>init 메서드를 호출 실패; ScriptStatementFailedException 예외도 따라서 발생되었다.</p><blockquote><p>Failed to execute SQL script statement #2 of URL [filepath]:</p></blockquote><p>path의 2번째에 위치한 script 실행이 실패하였다.</p><hr><blockquote><h2 id="해결-시도"><a href="#해결-시도" class="headerlink" title="해결 시도"></a>해결 시도</h2></blockquote><p>Controller 테스트는 통과하였고, 생성한 repository는 상속만 받았다.</p><p>테스트 코드에서 <code>Autowired</code>를 해주었고, 단순 메서드만 호출하였기 때문에 오류는 없었다.</p><p>Exception을 참고하여 Spring 자체에서 Bean 자체를 생성하지 못하고 있다는 걸 깨달았다.</p><p>SpringBoot 2.5 버전이 나올 때 어떤 이슈가 있었는지 찾아보기 위해 Release Notes를 확인해보았다.<br><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.5-Release-Notes">Release Notes</a></p><hr><blockquote><h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2></blockquote><p>schema.sql and data.sql Files</p><blockquote><p>With Spring Boot 2.5.1 and above, the new SQL initialization properties support detection of embedded datasources for JDBC and R2DBC. </p></blockquote><p>Spring Boot 2.5.1버전 이상부터 새로운 SQL initialization 속성이 JDBC와 R2DBC의 source를 찾아줍니다.</p><blockquote><p>By default, SQL database initialization is only performed when using an embedded in-memory database. </p></blockquote><p>Default로는 in-memory db를 사용할 때만 초기화가 동작합니다.</p><blockquote><p>To always initialize a SQL database, irrespective of its type, set <code>spring.sql.init.mode</code> to <code>always</code>. </p></blockquote><p>모든 Type의 SQL DB를 초기화를 적용하기 위해 spring.sql.init.mode 값을 always로 바꿔주어야합니다.</p><h4 id="application-yml-파일의-설정을-아무리-바꿔주어도-해결되지-않았다"><a href="#application-yml-파일의-설정을-아무리-바꿔주어도-해결되지-않았다" class="headerlink" title="application.yml 파일의 설정을 아무리 바꿔주어도 해결되지 않았다."></a>application.yml 파일의 설정을 아무리 바꿔주어도 해결되지 않았다.</h4><p>그래서 build.gradle 파일을 확인해보았는데, <code>dependency</code>와 <code>test</code>가 제대로 build 되지 않고 있었다.</p><p><code>vi $HOME/.zsh</code>를 통해 jdk 버전을 확인해보았는데 jdk가 16버전이었고, 이는 gradle과 아직 호환이 되지 않는 버전이었다.</p><h4 id="그래도-실행이-되지-않았다"><a href="#그래도-실행이-되지-않았다" class="headerlink" title="그래도 실행이 되지 않았다.."></a>그래도 실행이 되지 않았다..</h4><blockquote><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2></blockquote><p>sql에 syntax 오류가 있는지 확인해봤는데 자세히 보니 <strong><code>column</code>은 <code>(grave accent)</code>로 닫아주고 <code>value</code>는 <code>&#39;(Single Quote)</code>로 닫아주었다</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;martin&#x27;</span>, <span class="string">&#x27;martin@fastcampus.com&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;dennis&#x27;</span>, <span class="string">&#x27;dennis@fastcampus.com&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;sophia&#x27;</span>, <span class="string">&#x27;sophia@slowcampus.com&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">4</span>, <span class="string">&#x27;inwoo&#x27;</span>, <span class="string">&#x27;inwoo@slowcampus.com&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">5</span>, <span class="string">&#x27;inwoo&#x27;</span>, <span class="string">&#x27;inwoo@google.com&#x27;</span>, now(), now());</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Trouble Shooting" scheme="http://inwoo.github.io/categories/Trouble-Shooting/"/>
    
    
    <category term="JPA" scheme="http://inwoo.github.io/tags/JPA/"/>
    
    <category term="SpringBoot" scheme="http://inwoo.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Annotation 기반 Servlet 설정</title>
    <link href="http://inwoo.github.io/11/02/webServlet/"/>
    <id>http://inwoo.github.io/11/02/webServlet/</id>
    <published>2021-11-02T14:54:45.000Z</published>
    <updated>2021-11-03T14:35:06.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="WebServlet-Annotation"><a href="#WebServlet-Annotation" class="headerlink" title="WebServlet Annotation"></a>WebServlet Annotation</h2></blockquote><p><code>@WebServlet(urlPatterns = &quot;/insertBoard.do&quot;, initParams = @WebInitParam(name = &quot;encoding&quot;, value = &quot;EUC-KR&quot;))</code></p><p>web.xml 파일의 servlet-mapping 내의 내용을 넣어줄 수 있다.</p><h3 id="init-param"><a href="#init-param" class="headerlink" title="init-param"></a>init-param</h3><p>xml에 대한 설정을 하는 것이 java 소스코드와 분리되어있어, Annotation 기반으로 처리하게 되었다.</p><ul><li>initParams = 초기화 parameter들을 servlet으로 넘겨줄 수 있다.</li><li>Servlet객체를 생성한 후에 ServletConfig 생성 -&gt; parameter value 호출 -&gt; init()에게 넘겨준다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">// ServletConfig를 이용하면 web.xml에 설정된 로컬 파라미터 정보를 추출할 수 있다.</span></span><br><span class="line">boardEncoding = config.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Global-Parameter-설정"><a href="#Global-Parameter-설정" class="headerlink" title="Global Parameter 설정"></a>Global Parameter 설정</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Global Parameter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>EUC-KR<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>원하는 servlet의 service()단에서 아래 코드를 통해 적용 가능하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">ServletContext context = getServletContext();</span><br><span class="line">boardEncoding = context.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><p><strong>ServletContext는 ServletEngine을 객체화 시킨 거라고 생각하면 된다.</strong></p><ul><li>어디서든, 여려번 parameter에 접근하여 사용할 수 있다.</li><li>ServletConfig는 Servlet이 생성되고, init()이 호출될 때만 사용할 수 있다.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Web &amp; Network" scheme="http://inwoo.github.io/categories/Basic/Web-Network/"/>
    
    
    <category term="servlet" scheme="http://inwoo.github.io/tags/servlet/"/>
    
    <category term="annotation" scheme="http://inwoo.github.io/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Servlet 이란</title>
    <link href="http://inwoo.github.io/10/30/servlet/"/>
    <id>http://inwoo.github.io/10/30/servlet/</id>
    <published>2021-10-29T15:58:05.000Z</published>
    <updated>2021-11-03T14:34:44.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Servlet의-특징"><a href="#Servlet의-특징" class="headerlink" title="Servlet의 특징"></a>Servlet의 특징</h2></blockquote><h3 id="servlet은-class이고-이식성이-뛰어나다"><a href="#servlet은-class이고-이식성이-뛰어나다" class="headerlink" title="servlet은 class이고, 이식성이 뛰어나다."></a>servlet은 class이고, 이식성이 뛰어나다.</h3><h3 id="Multi-Thread"><a href="#Multi-Thread" class="headerlink" title="Multi-Thread"></a>Multi-Thread</h3><ul><li>멀티 스레드로 동작하여 성능이 뛰어나다.<h3 id="플랫폼-독립성"><a href="#플랫폼-독립성" class="headerlink" title="플랫폼 독립성"></a>플랫폼 독립성</h3></li><li>java와 같이 플랫폼에 독립적인 기술이다.<h3 id="서버-독립성"><a href="#서버-독립성" class="headerlink" title="서버 독립성"></a>서버 독립성</h3></li><li>servlet은 웹 서버와 무관하게 실행된다.<h3 id="확장성"><a href="#확장성" class="headerlink" title="확장성"></a>확장성</h3></li><li>다양한 vendor에서 제공하는 클래스 라이브러리를 jar형태로 받아 사용할 수 있다.<br>동적인 요청이 들어오면 engine이 처리, 정적인 요청은 web server가 처리한다.<br>servlet을 생성하지 않다가, 동적인 요청이 들어오면 servlet을 생성한다.<ul><li>엔진이 servlet객쳉을 생성해서, method를 호출해준다.</li></ul></li></ul><hr><blockquote><h2 id="Servlet의-문법"><a href="#Servlet의-문법" class="headerlink" title="Servlet의 문법"></a>Servlet의 문법</h2></blockquote><ol><li><p><strong>서블릿 엔진이 접근을 해야하기 때문에</strong> Servlet은 반드시 public으로 작성해야하고, 반드시 Default 생성자만 있어야한다.</p><ul><li>멤버 변수를 default 초기화한다고해서, default 생성자이다.</li></ul></li><li><p>HTTP 프로토콜 상에서 동작하는 sevlet이라면 반드시 HttpServlet 클래스를 상속해야한다.</p><ul><li>상속 관계 : 내가 만든 Servlet -&gt; HttpServlet -&gt; GenericServlet -&gt; Servlet<ul><li>상속을 해주어야만 Servlet타입을 가질 수 있게 된다.</li><li>다른 servlet을 상속해도 되지만, web에서 사용할 수 없다.</li><li>Http 프로토콜에서 최적화된 HTTPServelt을 상속해주어야한다.</li></ul></li></ul></li><li><p>라이프 사이클과 관련된 HttpServlet 클래스의 callback method를 적절하게 override 해주어야한다.</p><ul><li><code>callback method</code> : 서블릿 엔진이 적절한 시점에 호출해주는 메서드<ul><li>우리가 직접 호출하지 않는다.</li></ul></li></ul></li></ol><hr><blockquote><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2></blockquote><h3 id="Servlet-객체는-메모리에-1개만-존재할-수-있다"><a href="#Servlet-객체는-메모리에-1개만-존재할-수-있다" class="headerlink" title="Servlet 객체는 메모리에 1개만 존재할 수 있다."></a>Servlet 객체는 메모리에 1개만 존재할 수 있다.</h3><ol start="0"><li>Servlet Engine이 생성되는 순간 Thread Pool을 생성한다.<ul><li>서버마다 Thread 개수다 다르다.</li></ul></li><li>브라우저에서 html, image 파일이 아닌 요청을 보내면 Servlet 엔진으로 전달된다.</li><li>요청하는 Servlet이 메모리에 있는지 확인한다.<ul><li>메모리에 있을 시 바로 4번으로 이동한다.</li></ul></li><li>Servlet class파일을 찾아서 로딩하고, 생성자를 호출하고, 객체가 생성된 직후에 init() 메서드를 호출한다.<ul><li>default 생성자로 생성된 객체를 init() 메서드가 멤버 변수를 초기화 시켜준다.</li></ul></li><li>Thread를 할당받고, run() 메서드가 실행된다.<ul><li>Thread Pool에 있는 Thread 중에서 랜덤으로 할당받는다.</li><li>run() 메서드가 service()를 호출한다.</li></ul></li><li>service() 메서드를 overriding하지 않으면 부모로부터 상속받는다.<ul><li>요청 방식이 get방식의 메서드인지, post방식의 메서드인지 분기시킨다.</li></ul></li><li>Servlet을 수정하고 저장 하면 Reloading을 해준다.<ul><li>destroy() 메서드가 호출되고 수정된 Servlet으로 교체된다.</li><li>혹은 server를 종료시키면, 엔진은 생성한 객체를 destory하고 종료된다.</li></ul></li></ol><blockquote><h4 id="Servlet은-최초-호출-시에만-느리고-그-후에는-바로-Thread를-할당받으므로-빠르게-작동한다"><a href="#Servlet은-최초-호출-시에만-느리고-그-후에는-바로-Thread를-할당받으므로-빠르게-작동한다" class="headerlink" title="Servlet은 최초 호출 시에만 느리고, 그 후에는 바로 Thread를 할당받으므로 빠르게 작동한다."></a>Servlet은 최초 호출 시에만 느리고, 그 후에는 바로 Thread를 할당받으므로 빠르게 작동한다.</h4></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Web &amp; Network" scheme="http://inwoo.github.io/categories/Basic/Web-Network/"/>
    
    
    <category term="servlet" scheme="http://inwoo.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>gRPC 탐구 생활 (1)</title>
    <link href="http://inwoo.github.io/10/29/grpc/"/>
    <id>http://inwoo.github.io/10/29/grpc/</id>
    <published>2021-10-28T15:30:19.000Z</published>
    <updated>2021-10-29T16:24:52.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h3 id="네트워크-통신"><a href="#네트워크-통신" class="headerlink" title="네트워크 통신"></a>네트워크 통신</h3><h4 id="로컬-컴퓨터의-프로세스-↔️-서버-컴퓨터의-프로세스의-IPC-통신이다"><a href="#로컬-컴퓨터의-프로세스-↔️-서버-컴퓨터의-프로세스의-IPC-통신이다" class="headerlink" title="로컬 컴퓨터의 프로세스 ↔️ 서버 컴퓨터의 프로세스의 IPC 통신이다."></a>로컬 컴퓨터의 프로세스 ↔️ 서버 컴퓨터의 프로세스의 IPC 통신이다.</h4></blockquote><blockquote><h2 id="시작-21-10-29"><a href="#시작-21-10-29" class="headerlink" title="시작 (21. 10. 29.)"></a>시작 (21. 10. 29.)</h2></blockquote><p>한 달 전에 gRPC에 관심이 생겨서 Docs를 찾아보고, 내용을 정리하여 글을 작성했었다.</p><p>오늘 프로토콜 관련 강의를 듣다가, HTTP는 Header에 많은 데이터가 들어가서 현업에서 무겁다는 평가를 받고 있다는 소식을 들었다.</p><p>이 때 gRPC가 계속해서 강조해오던 <strong>빠른 데이터 처리, 편리하고 유연한 환경</strong>이 떠올라 gRPC Quick Start를 통해 실행해 본 과정과 결과에 대해 작성하려 한다.</p><blockquote><h2 id="Quick-Start-21-10-29"><a href="#Quick-Start-21-10-29" class="headerlink" title="Quick Start (21. 10. 29)"></a>Quick Start (21. 10. 29)</h2></blockquote><h3 id="설치-전-환경-설정"><a href="#설치-전-환경-설정" class="headerlink" title="설치 전 환경 설정"></a>설치 전 환경 설정</h3><h4 id="issue-gradle과-자바-버전"><a href="#issue-gradle과-자바-버전" class="headerlink" title="issue : gradle과 자바 버전"></a>issue : gradle과 자바 버전</h4><p>gRPC는 JDK 버전이 7 버전 이상이어야 사용할 수 있다. 나는 16 버전을 사용하고 있어서, 당연히 사용할 수 있을 줄 알았다.</p><p>결과적으로 설치 이후에는 16 버전을 사용해도 상관없었다.</p><p><strong>gRPC가 안내한 방법에는 gradle을 통한 설치 방법이 나와있는데, gradle은 아직 자바 16 버전을 지원하지 않고 있다.</strong> 설치 시 <code>General error during semantic analysis: Unsupported class file major version 60</code> 오류가 발생하였다.</p><p>7 이상 15버전 이하를 사용하면 gradle을 통해 설치할 수 있고, 버전을 다운로드 받은 후 환경 변수를 설정해주면 된다.</p><details><summary>Mac OS 환경변수 설정법 확인</summary><ol><li><code>cd /Library/Java/JavaVirtualMachines</code> 로 이동</li><li><code>ls -al</code> 을 통해 설치되어있는 jdk 버전 확인</li></ol><p>Big sur 버전 이상 : <code>vi $HOME/.zshrc</code><br>Bir sur 버전 미만 : <code>vi ~/.bash_profile</code></p><p><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk폴더이름/Contents/Home</code> 입력</p></details><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>원하는 폴더로 이동하여 <code>git clone</code>을 통하여 설치하거나, zip 파일을 다운로드하여 압축 해제를 해주면된다.</p><ol><li>원하는 폴더로 이동한다.</li><li><code> $ git clone -b v1.41.0 https://github.com/grpc/grpc-java</code>를 입력하여 파일을 받는다.</li><li><code>cd grpc-java/examples</code> 를 통해 폴더를 이동해준다.</li><li><code>./gradlew installDist</code>로 설치를 해준다.</li></ol><h3 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h3><p>gRPC는 서버와 서버 간의 통신에서 자주 사용된다.</p><p>테스트도 위와 같은 상황에서 진행을 해보았다. 이를 위해 터미널 2개를 켜놓고 실행해주어야 한다.</p><p>1개는 Client, 1개는 Server의 역할을 해줄 것이다. 아래 예제 코드는 grpc-java의 하위 폴더 example에서 실행해주어야 한다.</p><h4 id="1-Server-역할-Terminal"><a href="#1-Server-역할-Terminal" class="headerlink" title="1. Server 역할 Terminal"></a>1. Server 역할 Terminal</h4><p><code>$ ./build/install/examples/bin/hello-world-server</code></p><p>위 명령어를 실행하면 </p><p><strong>INFO: Server started, listening on 50051</strong> 라는 메세지가 나타난다.</p><p>50051번 포트를 열어 놓고 서버 측에서 대기를 하고 있게 된다.</p><h4 id="2-Client-역할-Terminal"><a href="#2-Client-역할-Terminal" class="headerlink" title="2. Client 역할 Terminal"></a>2. Client 역할 Terminal</h4><p><code>$ ./build/install/examples/bin/hello-world-client</code></p><p>위 명령어를 실행하면 </p><p><strong>INFO: Will try to greet world …</strong></p><p><strong>INFO: Greeting: Hello world</strong> 메세지가 나타난다.</p><p>REST, HTTP와는 다르게 server 쪽의 메서드를 Client단에서 호출했다. 이렇게되면 gRPC를 통하여 Client-server 어플리케이션을 실행한 것이다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="gRPC" scheme="http://inwoo.github.io/categories/gRPC/"/>
    
    
    <category term="gRPC" scheme="http://inwoo.github.io/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>가상 메모리, 페이징, 세그멘테이션, 뮤텍스, 세마포어</title>
    <link href="http://inwoo.github.io/10/28/0-interview-os2/"/>
    <id>http://inwoo.github.io/10/28/0-interview-os2/</id>
    <published>2021-10-28T08:01:34.000Z</published>
    <updated>2021-10-28T08:07:14.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="8-가상-메모리란"><a href="#8-가상-메모리란" class="headerlink" title="8. 가상 메모리란?"></a>8. 가상 메모리란?</h2></blockquote><p>메모리에 로드되어 실행 중인 프로세스가 사용하고 있지 않은 페이지를<br>추상화된 가상 메모리 공간에 저장하고, 필요할 때 참조함으로써,<br><strong>메모리의 효율성을 높여주는 OS의 메모리 관리 기법</strong></p><h3 id="8-1-가상-메모리의-주요-기능"><a href="#8-1-가상-메모리의-주요-기능" class="headerlink" title="8-1. 가상 메모리의 주요 기능"></a>8-1. 가상 메모리의 주요 기능</h3><p>주기억장치를 하드디스크에 대한 캐시로 설정하고, 필요한 페이지만 유지하여 효율적으로 관리하고,</p><p>프로세스 별로 통일된 가상 메모리 주소 공간을 할당해줘서 메모리 관리가 단순해지고,</p><p>거의 무한에 가까운 가상 메모리 공간을 배정하여 프로세스들끼리의 메모리 침범 발생률을 크게 줄인다.</p><h3 id="8-2-가상-메모리와-관련된-하드웨어에-대해-말씀해주세요"><a href="#8-2-가상-메모리와-관련된-하드웨어에-대해-말씀해주세요" class="headerlink" title="8-2. 가상 메모리와 관련된 하드웨어에 대해 말씀해주세요."></a>8-2. 가상 메모리와 관련된 하드웨어에 대해 말씀해주세요.</h3><p>MMU(Memory Management Unit)과 TLB(Translation Lookaside Buffer)</p><p>MMU(메모리 관리 장치)</p><ul><li>가상 메모리 주소를 물리 메모리 주소로 변환해주는 하드웨어 (CPU가 메모리에 접근하는 것을 관리)<br>TLB(변환 참조 버퍼)</li><li>변환 작업의 속도를 높이기 위해 사용되는 Cache (보조 기억장치)</li></ul><hr><blockquote><h2 id="9-페이징과-세그멘테이션이란"><a href="#9-페이징과-세그멘테이션이란" class="headerlink" title="9. 페이징과 세그멘테이션이란?"></a>9. 페이징과 세그멘테이션이란?</h2></blockquote><h3 id="페이징"><a href="#페이징" class="headerlink" title="페이징"></a>페이징</h3><ul><li>메모리 공간 일정한 크기의 블록인 페이지로 나누어 관리하는 기법</li><li>페이징을 사용하기 위해 주소의 동적 재배치를 허용하고, 메모리 주소 변환을 위한 MMU가 필요하다</li><li>외부 단편화를 줄일 수 있지만, 페이지가 커질 수록 내부 단편화가 발생한다.</li></ul><h3 id="세그멘테이션"><a href="#세그멘테이션" class="headerlink" title="세그멘테이션"></a>세그멘테이션</h3><ul><li>사용자 관점에서의 메모리 관리 기법</li><li>페이징은 일정한 크기의 블록으로 미리 공간을 나눠놓지만,<br>세그멘테이션은 메모리를 사용하는 시점에 논리적 내용 단위인 세그먼트로 나눈다.</li><li>동적으로 할당하는 방식이므로 외부 단편화가 발생할 수 있다.</li></ul><h3 id="9-1-페이지나-세그먼트가-메모리에-할당되는-방법"><a href="#9-1-페이지나-세그먼트가-메모리에-할당되는-방법" class="headerlink" title="9-1. 페이지나 세그먼트가 메모리에 할당되는 방법"></a>9-1. 페이지나 세그먼트가 메모리에 할당되는 방법</h3><p>페이지, 세그먼트 테이블에 접근하여 필요한 가상 메모리주소를 MMU가 가상 주소를 물리주소로 변환시켜줍니다.</p><h3 id="9-2-단편화를-해결할-수-있는-방법"><a href="#9-2-단편화를-해결할-수-있는-방법" class="headerlink" title="9-2. 단편화를 해결할 수 있는 방법"></a>9-2. 단편화를 해결할 수 있는 방법</h3><p>세그먼트를 페이징하는 방법을 취하면 해결할 수 있지만, 두 가지 테이블을 모두 거쳐야 하므로 속도가 떨어진다는 단점이 있다.</p><hr><blockquote><h2 id="10-뮤텍스와-세마포어란-차이점은"><a href="#10-뮤텍스와-세마포어란-차이점은" class="headerlink" title="10. 뮤텍스와 세마포어란? 차이점은?"></a>10. 뮤텍스와 세마포어란? 차이점은?</h2></blockquote><h3 id="뮤텍스-상호배제"><a href="#뮤텍스-상호배제" class="headerlink" title="뮤텍스 (상호배제)"></a>뮤텍스 (상호배제)</h3><ul><li>Critical Section에 단 하나의 스레드만 접근할 수 있고, 이 스레드가 빠져나올 때 까지 해당 section에 대한 다른 스레드의 접근을 막고 대기시키는 것</li></ul><h3 id="세마포어"><a href="#세마포어" class="headerlink" title="세마포어"></a>세마포어</h3><ul><li>사전에 허용치를 설정하여, 이 허용치만큼만 동시에 접근이 가능한 방식</li><li>스레드가 접근할 때마다 count가 하나씩 줄어들게 되고, 0이 되면 접근을 대기 시킨다.</li></ul><h3 id="차이점"><a href="#차이점" class="headerlink" title="차이점"></a>차이점</h3><ul><li>세마포어를 허용치를 1로 설정하면 뮤텍스가 될 수 있지만, 뮤텍스는 세마포어가 될 수 없다.</li><li>세마포어는 소유가 불가능하지만, 뮤텍스는 소유가 가능하다.</li><li>뮤텍스는 프로세스 범위, 세마포어는 파일시스템 상 파일로 존재</li><li>뮤텍스는 소유하고 있는 쓰레드만 해제 가능, 세마포어는 다른 스레드가 해제 가능</li></ul><h3 id="10-1-뮤텍스의-소유권"><a href="#10-1-뮤텍스의-소유권" class="headerlink" title="10-1. 뮤텍스의 소유권"></a>10-1. 뮤텍스의 소유권</h3><p>뮤텍스는 신호, 비신호 상태를 가지는데, 이 뮤텍스를 소유하게 되면 비신호 상태가 됩니다.<br>뮤텍스를 생성할 때 어떤 스레드가 소유할 것인지 결정하고, 아무도 소유하지 않으면 신호상태로 기다리게 됩니다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Interview" scheme="http://inwoo.github.io/categories/Interview/"/>
    
    <category term="OS" scheme="http://inwoo.github.io/categories/Interview/OS/"/>
    
    
    <category term="가상메모리" scheme="http://inwoo.github.io/tags/%EA%B0%80%EC%83%81%EB%A9%94%EB%AA%A8%EB%A6%AC/"/>
    
    <category term="페이징" scheme="http://inwoo.github.io/tags/%ED%8E%98%EC%9D%B4%EC%A7%95/"/>
    
    <category term="세그멘테이션" scheme="http://inwoo.github.io/tags/%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98/"/>
    
    <category term="뮤텍스" scheme="http://inwoo.github.io/tags/%EB%AE%A4%ED%85%8D%EC%8A%A4/"/>
    
    <category term="세마포어" scheme="http://inwoo.github.io/tags/%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>메모리 할당 알고리즘, 페이지 폴트, 단편화</title>
    <link href="http://inwoo.github.io/10/28/0-interview-os1/"/>
    <id>http://inwoo.github.io/10/28/0-interview-os1/</id>
    <published>2021-10-28T07:56:44.000Z</published>
    <updated>2021-10-28T08:01:13.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="5-메모리-할당-알고리즘-First-fit-Next-fit-Best-fit-결과에-대해-설명해보세요"><a href="#5-메모리-할당-알고리즘-First-fit-Next-fit-Best-fit-결과에-대해-설명해보세요" class="headerlink" title="5. 메모리 할당 알고리즘 (First fit, Next fit, Best fit) 결과에 대해 설명해보세요"></a>5. 메모리 할당 알고리즘 (First fit, Next fit, Best fit) 결과에 대해 설명해보세요</h2></blockquote><p>메모리의 처음부터 탐색하기 시작해서, 크기가 충분한 첫 번째 메모리에 할당하는 First fit,<br>마지막으로 참조한 메모리 공간부터 탐색을 시작해서 메모리를 할당하는 Next fit,<br>모든 메모리 공간을 검사해서 내부 단편화를 최소화 하는 공간에 할당하는 Best fit이 있습니다.</p><blockquote><h3 id="5-1-메모리-할당-알고리즘의-필요성-가변-배치-전략"><a href="#5-1-메모리-할당-알고리즘의-필요성-가변-배치-전략" class="headerlink" title="5-1. 메모리 할당 알고리즘의 필요성 (가변 배치 전략)"></a>5-1. 메모리 할당 알고리즘의 필요성 (가변 배치 전략)</h3><p>OS가 제공하는 다중 프로그래밍 환경 내에서 / 다양한 프로그램들이 메모리 공간을 불규칙적으로 사용, 반환합니다.<br>이러한 불규칙적인 공간 중 프로세스에게 할당해 줄 메모리 공간을 선택하기 위해 메모리 할당 알고리즘이 필요합니다.</p></blockquote><blockquote><h3 id="5-2-각-알고리즘의-장단점이-있다면"><a href="#5-2-각-알고리즘의-장단점이-있다면" class="headerlink" title="5-2. 각 알고리즘의 장단점이 있다면?"></a>5-2. 각 알고리즘의 장단점이 있다면?</h3><p>First-fit : 가장 간단하고 빠르지만, 공간 활용률이 떨어질 수 있습니다.<br>Next-fit : first-fit에 보다는 느리지만, 빠른 속도가 장점이다, 일반적으로 메모리 공간의 끝에 있는 가장 큰 크기의 메모리를 짧은 시간내에 작은 크기로 조각내서 메모리 집약작업이 추가적으로 필요하다.<br>Best-fit : 공간 활용률이 높아진다는 장점이지만, 가용 메모리가 크기 순으로 정렬되어있지 않으면 메모리 검색 시간이 늘어난다.</p></blockquote><hr><blockquote><h2 id="6-페이지-폴트에-따른-페이지-교체-알고리즘에-대해-설명해주세요"><a href="#6-페이지-폴트에-따른-페이지-교체-알고리즘에-대해-설명해주세요" class="headerlink" title="6. 페이지 폴트에 따른 페이지 교체 알고리즘에 대해 설명해주세요"></a>6. 페이지 폴트에 따른 페이지 교체 알고리즘에 대해 설명해주세요</h2><p>OPT(Optimization) : 가장 오랫동안 사용하지 않을 페이지를 예측하여 교체하는, 최적화 방식<br>FIFO(First In First Out) : 메모리가 할당된 순서대로 페이지를 교체하는 방식<br>LRU(Least Recently Used) : 최근에 가장 오랫동안 사용하지 않은 페이지를 교체<br>LFU(Least Frequently Used) : 사용 빈도가 가장 적은 페이지를 교체<br>NUR(Not Used Recently) : 최근에 가장 사용하지 않은 페이지를 교체</p></blockquote><blockquote><h3 id="6-1-페이지-폴트란-무엇인가"><a href="#6-1-페이지-폴트란-무엇인가" class="headerlink" title="6-1. 페이지 폴트란 무엇인가?"></a>6-1. 페이지 폴트란 무엇인가?</h3><p>운영체제의 스와퍼(Swapper)는 메모리에 동작하고 있는 프로세스 중에서 실제로 필요한 프로세스만 로드하고, 페이저(Pager)는 프로세스의 필요한 페이지만 로드합니다.<br>따라서 필요한 페이지가 물리 메모리에 부재할 수 있는 시점이 있는 데, 이 때를 페이지 폴트라 합니다.</p></blockquote><blockquote><h3 id="6-2-페이지-폴트의-해결과정"><a href="#6-2-페이지-폴트의-해결과정" class="headerlink" title="6-2. 페이지 폴트의 해결과정"></a>6-2. 페이지 폴트의 해결과정</h3><p>필요한 페이지가 없는 것을 해결하기위해 요구를 합니다. 이를 Demand Paging이라하는데,<br>페이지 폴트가 발생하면 CPU에서 trap을 발생시켜 OS에 알립니다.<br>OS에서는 interrupt를 발생시키고 주소 값과 Valid bit가 있는 Page Table을 통해<br>필요한 페이지가 있는 지 확인합니다. 없으면 프로세스를 종료하고, 있으면 물리 메모리에 비어있는 프레임을 찾습니다.</p></blockquote><p>이 때 비어있는 프레임이 없으면 페이지 교체 알고리즘을 통해 페이지를 교체하고,<br>페이지가 있으면 그 공간에 로드합니다.</p><hr><blockquote><h2 id="7-단편화란-무엇인가"><a href="#7-단편화란-무엇인가" class="headerlink" title="7. 단편화란 무엇인가?"></a>7. 단편화란 무엇인가?</h2></blockquote><ul><li>RAM에서 메모리의 공간이 조각으로 나뉘어져, 사용 가능한 메모리가 충분히 존재하지만 할당할 수 없는 상태</li></ul><blockquote><h3 id="7-1-내부-단편화"><a href="#7-1-내부-단편화" class="headerlink" title="7-1. 내부 단편화"></a>7-1. 내부 단편화</h3></blockquote><ul><li>프로세스가 필요한 양보다 더 큰 메모리가 할당되어, 할당된 메모리 내의 공간이 낭비되는 상황</li></ul><blockquote><h3 id="7-2-외부-단편화"><a href="#7-2-외부-단편화" class="headerlink" title="7-2. 외부 단편화"></a>7-2. 외부 단편화</h3></blockquote><ul><li>총 사용 가능 메모리 공간은 충분하지만, 비연속적으로 존재하여 프로세스에 대한 할당이 불가능한 상황</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Interview" scheme="http://inwoo.github.io/categories/Interview/"/>
    
    <category term="OS" scheme="http://inwoo.github.io/categories/Interview/OS/"/>
    
    
    <category term="메모리 할당 알고리즘" scheme="http://inwoo.github.io/tags/%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="페이지 폴트" scheme="http://inwoo.github.io/tags/%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%8F%B4%ED%8A%B8/"/>
    
    <category term="단편화" scheme="http://inwoo.github.io/tags/%EB%8B%A8%ED%8E%B8%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Spring - Interceptor</title>
    <link href="http://inwoo.github.io/10/28/springInterceptor/"/>
    <id>http://inwoo.github.io/10/28/springInterceptor/</id>
    <published>2021-10-27T15:38:55.000Z</published>
    <updated>2021-10-27T16:25:14.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Interceptor-란"><a href="#Interceptor-란" class="headerlink" title="Interceptor 란 ?"></a>Interceptor 란 ?</h2></blockquote><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http://cfile22.uf.tistory.com/image/9983FB455BB4E5D30C7E10" alt="image"><br><a href="https://goddaehee.tistory.com/154">출처 : 갓대희의 작은 공간</a></p><p>Interceptor는 Filter와 유사한 형태로 존재한다. AOP가 흩어진 관심사를 묶어 처리하는 것과 같이 공통처리를 위해 활용될 수 있다. </p><p>실행순서는 아래와 같다.</p><p><strong>요청 : Filter -&gt; Dispatcher Servlet -&gt; Interceptor -&gt; AOP</strong></p><p><strong>응답 : AOP -&gt; Interceptor -&gt; Dispatcher Servlet -&gt; Filter</strong></p><hr><table><thead><tr><th>비고</th><th>Filter</th><th>Interceptor</th></tr></thead><tbody><tr><td>등록</td><td>WebApplication(web.xml)</td><td>Spring Context</td></tr><tr><td>전,후처리</td><td>chain.doFilter()</td><td>preHandle, postHandle 등</td></tr><tr><td>예외처리</td><td>WebApplication</td><td>ExceptionHandler</td></tr><tr><td>기타</td><td>Servlet 응답, 요청에 대한 교체 가능</td><td>HandlerMethod를 통한 추가 작업, View 렌더링 전 추가 작업, AOP와 유사한 기능 제공(인증단계, 로깅 등), Service business logic과의 분리</td></tr><tr><td>사용</td><td>인코딩처리, XSS 방어 등</td><td>로그인, 권한 체크, 로그확인 등</td></tr></tbody></table><hr><blockquote><h2 id="Interceptor-구현"><a href="#Interceptor-구현" class="headerlink" title="Interceptor 구현"></a>Interceptor 구현</h2></blockquote><h3 id="절차"><a href="#절차" class="headerlink" title="절차"></a>절차</h3><h4 id="1-Interceptor를-생성할-때-HandlerInterceptor-인터페이스를-implements-해준다"><a href="#1-Interceptor를-생성할-때-HandlerInterceptor-인터페이스를-implements-해준다" class="headerlink" title="1. Interceptor를 생성할 때 HandlerInterceptor 인터페이스를 implements 해준다."></a>1. Interceptor를 생성할 때 <strong>HandlerInterceptor</strong> 인터페이스를 implements 해준다.</h4><h4 id="2-Spring이-Component-Scan을-할-때-인식되기-위해-Component-Annotation을-추가해준다"><a href="#2-Spring이-Component-Scan을-할-때-인식되기-위해-Component-Annotation을-추가해준다" class="headerlink" title="2. Spring이 Component Scan을 할 때 인식되기 위해 @Component Annotation을 추가해준다."></a>2. Spring이 Component Scan을 할 때 인식되기 위해 @Component Annotation을 추가해준다.</h4><h4 id="3-전-후처리에-맞추어-method를-override해준다"><a href="#3-전-후처리에-맞추어-method를-override해준다" class="headerlink" title="3. 전, 후처리에 맞추어 method를 override해준다."></a>3. 전, 후처리에 맞추어 method를 override해준다.</h4><ul><li>전처리 : preHandle()</li><li>후처리 : postHandle()</li><li>응답완료 후 : afterCompletion()</li></ul><p>아래 예제에서는 전처리를 하기위해 preHandle()메서드를 override 해주었다.</p><p>request한 uri와 Auth라는 Annotation을 유무 여부를 체크 및 로깅해주고, Annotation이 있다면 query를 log로 찍어주었다.</p><p>CheckAnnotation 메서드는 handler와 handlerMethod를 통해 annotation이 Bean 혹은 MethodAnnotation이 맞는지 체크해주었다.</p><ul><li><code>if (handlerMethod instanceof HttpRequestHandler) &#123; return true; &#125;</code> 코드는 Html 등 resource일 시 true를 반환해주도록했다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;uri : &#123;&#125;&quot;</span>, uri);</span><br><span class="line"></span><br><span class="line">        URI urii = UriComponentsBuilder.fromUriString(uri)</span><br><span class="line">                .query(request.getQueryString())</span><br><span class="line">                .build()</span><br><span class="line">                .toUri();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> hasAnnotation = checkAnnotation(handler, Auth.class);</span><br><span class="line">        log.info(<span class="string">&quot;has annotation : &#123;&#125;&quot;</span>, hasAnnotation);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasAnnotation) &#123;</span><br><span class="line">            String query = urii.getQuery();</span><br><span class="line">            log.info(<span class="string">&quot;query : &#123;&#125;&quot;</span>, query);</span><br><span class="line">            <span class="keyword">if</span> (query.equals(<span class="string">&quot;name=Inwoo&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkAnnotation</span><span class="params">(Object handler, Class clazz)</span> </span>&#123;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        <span class="comment">// pass resource</span></span><br><span class="line">        <span class="keyword">if</span> (handlerMethod <span class="keyword">instanceof</span> HttpRequestHandler) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// pass annotation</span></span><br><span class="line">        <span class="keyword">if</span> (handlerMethod.getBeanType().getAnnotation(clazz) != <span class="keyword">null</span> || handlerMethod.getMethodAnnotation(clazz) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Spring" scheme="http://inwoo.github.io/categories/Basic/Spring/"/>
    
    
    <category term="interceptor" scheme="http://inwoo.github.io/tags/interceptor/"/>
    
  </entry>
  
  <entry>
    <title>Spring - filter</title>
    <link href="http://inwoo.github.io/10/26/springfilter/"/>
    <id>http://inwoo.github.io/10/26/springfilter/</id>
    <published>2021-10-26T12:14:17.000Z</published>
    <updated>2021-10-28T08:54:41.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><hr><blockquote><h2 id="Filter-란"><a href="#Filter-란" class="headerlink" title="Filter 란 ?"></a>Filter 란 ?</h2></blockquote><p><img src="https://supawer0728.github.io/images/spring-filter-interceptor/spring-request-lifecycle.jpg" alt="image"></p><p>Spring은 Client로부터 request를 받고, response를 줄 때 <strong>Filter</strong>를 거쳐서 전달해준다.</p><p>Filter는 웹 어플리케이션에서 관리되는 영역으로, Spring에 의해서 데이터가 변환 되기 전, Client가 보낸 순수한 요청, 응답 값을 확인할 수 있다.</p><hr><blockquote><h2 id="Filter의-사용"><a href="#Filter의-사용" class="headerlink" title="Filter의 사용"></a>Filter의 사용</h2></blockquote><h3 id="절차"><a href="#절차" class="headerlink" title="절차"></a>절차</h3><ol><li>Filter를 사용하기 위해 <strong>Filter를 implements한 클래스를 생성</strong>한다.</li><li><strong>WebFilter 어노테이션을 추가</strong>하고, 적용범위를 설정한다.<ul><li>default = 모든 url</li></ul></li><li><strong>doFilter()</strong> 메서드를 오버라이드한다.</li><li>SpringBootApplication 어노테이션이 추가된 메인부에 <strong>@ServletComponentScan을 추가해준다</strong></li></ol><h3 id="doFilter-메서드"><a href="#doFilter-메서드" class="headerlink" title="doFilter() 메서드"></a>doFilter() 메서드</h3><p>메서드의 parameter로 FilterChain 타입의 chain을 받을 수 있다. <strong>chain.doFilter() 메서드를 기준으로 필터에 들어오기 전, 후를 구분할 수 있다.</strong></p><h4 id="lt-전처리-gt"><a href="#lt-전처리-gt" class="headerlink" title="&lt; 전처리 &gt;"></a>&lt; 전처리 &gt;</h4><p><strong>다른 parameter 중 ServletRequest request, ServletResponse reponse가 들어온다.</strong></p><p>위 Servlet 타입은 response, request를 단 1번만 사용할 수 있다. 들어온 요청을 log로 서버에 남기면 이를 다른 용도로 활용할 수 없는 것이다.</p><p><strong>따라서 ContentCahchingRequestWrapper, ContentCachingResponseWrapper</strong>를 생성해준다.</p><ul><li>생성자의 인자로 ServletRequest과 ServletResponse를 사용할 수 있다.</li></ul><h4 id="lt-후처리-gt"><a href="#lt-후처리-gt" class="headerlink" title="&lt; 후처리 &gt;"></a>&lt; 후처리 &gt;</h4><p>서버에는 사용자가 보낸 내용과, 요청을 보낸 uri를 확인하기 위해 get메서드를 통해 로그로 남겨주었다.</p><p>응답으로 보내주는 httpStatus와 content 또한 저장하며 log에 기록해주었다.</p><h3 id="1-TalentAPI를-통해-객체에-맞는-데이터를-post-해준다"><a href="#1-TalentAPI를-통해-객체에-맞는-데이터를-post-해준다" class="headerlink" title="1. TalentAPI를 통해 객체에 맞는 데이터를 post 해준다."></a>1. TalentAPI를 통해 객체에 맞는 데이터를 post 해준다.</h3><p><img src="/image/sfilter1.png" alt="img_1.png"></p><h3 id="2-Post한-값과-uri가-log로-찍힌다"><a href="#2-Post한-값과-uri가-log로-찍힌다" class="headerlink" title="2. Post한 값과, uri가 log로 찍힌다."></a>2. Post한 값과, uri가 log로 찍힌다.</h3><p><img src="/image/sfilter2.png" alt="img_2.png"></p><h3 id="3-Response-한-값과-HttpStatus가-알맞게-log에-찍히는-것을-확인할-수-있다"><a href="#3-Response-한-값과-HttpStatus가-알맞게-log에-찍히는-것을-확인할-수-있다" class="headerlink" title="3. Response 한 값과 HttpStatus가 알맞게 log에 찍히는 것을 확인할 수 있다."></a>3. Response 한 값과 HttpStatus가 알맞게 log에 찍히는 것을 확인할 수 있다.</h3><p><img src="/image/sfilter3.png" alt="img_4.png"><br><img src="/image/sfilter4.png" alt="img_3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/api/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 전처리</span></span><br><span class="line">        ContentCachingRequestWrapper contentCachingRequestWrapper = <span class="keyword">new</span> ContentCachingRequestWrapper((HttpServletRequest) request);</span><br><span class="line">        ContentCachingResponseWrapper contentCachingResponseWrapper = <span class="keyword">new</span> ContentCachingResponseWrapper((HttpServletResponse) response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 필터</span></span><br><span class="line">        chain.doFilter(contentCachingRequestWrapper, contentCachingResponseWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 후처리</span></span><br><span class="line">        String reqContetnt = <span class="keyword">new</span> String(contentCachingRequestWrapper.getContentAsByteArray());</span><br><span class="line">        String url = contentCachingRequestWrapper.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;url : &#123;&#125;, reqContent : &#123;&#125;&quot;</span>, url, reqContetnt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> httpStatus = contentCachingResponseWrapper.getStatus();</span><br><span class="line">        String content = <span class="keyword">new</span> String(contentCachingResponseWrapper.getContentAsByteArray());</span><br><span class="line">        log.info(<span class="string">&quot;http status : &#123;&#125;, content : &#123;&#125;&quot;</span>, httpStatus, content);</span><br><span class="line"></span><br><span class="line">        contentCachingResponseWrapper.copyBodyToResponse();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Spring" scheme="http://inwoo.github.io/categories/Basic/Spring/"/>
    
    
    <category term="filter" scheme="http://inwoo.github.io/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Validation check</title>
    <link href="http://inwoo.github.io/10/25/springvalidation/"/>
    <id>http://inwoo.github.io/10/25/springvalidation/</id>
    <published>2021-10-25T13:21:16.000Z</published>
    <updated>2021-10-26T12:51:10.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Validation-이란"><a href="#Validation-이란" class="headerlink" title="Validation 이란"></a>Validation 이란</h2><p>Java에서 null 값에 대한 접근이 발생할 때 <strong>null pointer exception</strong>이 발생하므로, 이를 사전에 방지하기 위해 유효성을 검사하는 과정이 Validation 입니다. </p></blockquote><p>일반적인 java 코드에서 validation을 체크하는 예제 코드를 확인해보겠습니다.<br>parameter의 값이 null이면 exception이 발생할 수 있으므로, null이 들어오면 return을 하여 이를 막아줍니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPrice</span><span class="params">(<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (price == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 정상 Logic</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>위 코드에서는 검증해야 할 값이 1개지만, 값이 많아질수록 코드가 길어지고, 재사용성에 한계가 있습니다.</p><p>또한 유지 보수 측면에서도 바람직하지 않으며 일반적으로 Service Logic과 분리가 필요합니다..</p><blockquote><h2 id="Spring-Boot-Validation"><a href="#Spring-Boot-Validation" class="headerlink" title="Spring Boot Validation"></a>Spring Boot Validation</h2></blockquote><p>build.gradle에 <code>implementation &#39;org.springframework.boot:spring-boot-starter-validation&#39;</code>을 추가하여 사용할 수 있다.</p><p>클래스 혹은 원하는 변수위에 Annotation을 추가하여 사용할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Max(value = 90)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String Email;</span><br><span class="line">    <span class="meta">@YearMonth</span></span><br><span class="line">    <span class="keyword">private</span> String birthday;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@Size</strong> : 문자 길이 설정<ul><li>min, max값을 통해 최소, 최대 문자 길이 설정 가능</li></ul></li><li><strong>@NotNull</strong> : null 불가</li><li><strong>@NotEmpty</strong> : null 또는 “”(빈문자열) 불가</li><li><strong>@NotBlank</strong> : null 또는 “”(빈문자열), “ “(공백) 불가</li><li><strong>@Past</strong> : 과거 날짜</li><li><strong>@PastOrPresent</strong> : 과거 혹은 오늘 날짜</li><li><strong>@Future</strong> : 미래 날짜</li><li><strong>@Pattern</strong> : 정규식 적용 <ul><li>regex = “[정규식]” 과 같이 사용할 수 있다.</li></ul></li><li><strong>@Max, @Min</strong> : 최대, 최소값 설정</li><li><strong>@Valid</strong> : 해당 object에 대해 validation 실행<ul><li>아래 예시와 같이 ResponseBody로 들어오는 User객체에 대해 Validation을 실행해줍니다.</li><li>객체의 왼쪽, 오른쪽 아무 곳에나 붙여도 상관 없습니다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">post</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><h2 id="Custom-Validation"><a href="#Custom-Validation" class="headerlink" title="Custom Validation"></a>Custom Validation</h2></blockquote><p>원하는 Validation이 존재하지 않을 때 custom으로 생성하여 사용하는 예제를 확인해보겠습니다.</p><p>먼저 Annotation을 생성해주고, 이를 통작하게 해줄 Validator를 구현해주어야합니다.</p><p>저는 아래 예시를 통해 올바른 연(Year), 월(Month) 형식이 들어오는지 체크하는 Annotation을 생성해보겠습니다.</p><h3 id="1-Annotation-생성"><a href="#1-Annotation-생성" class="headerlink" title="1. Annotation 생성"></a>1. Annotation 생성</h3><ul><li><p>Annotation의 Annotation (Annotation의 범위, 타겟 등 설정)</p><ul><li>Constraint : 어떤 클래스(validator)에 의해 유효성 검사가 될 것인지 설정</li><li>Target에는 임의로 메서드, 필드 등을 넣어주었습니다.</li><li>실행 중일 때 동작하도록 Retention은 RUNTIME으로 설정하였습니다.</li></ul></li><li><p>메타 정보 생성</p><ul><li><strong>message()</strong> : 유효하지 않을 시 출력해주는 message를 관리하기 위해 사용됩니다.</li><li><strong>groups()</strong> : Validation을 적용할 그룹을 제한할 수 있습니다.</li><li><strong>payload()</strong> : Custom Annotation에 관련된 메타 정보를 정의합니다.<ul><li>Error가 발생했을 때 심각도를 나타냅니다.</li><li><code>payload = Severity.Error.class</code>와 같이 사용합니다.</li></ul></li><li><strong>pattern()</strong> : 날짜 검증을 위해서 기본 형식을 설정해주었습니다. </li></ul></li></ul><p><img src="/image/springvalid.png" alt="img.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = &#123;YearMonthValidator.class&#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> YearMonth &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;yyyyMMdd 형식으로 입력하세요&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">pattern</span><span class="params">()</span> <span class="keyword">default</span> &quot;yyyyMMdd&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Validator-생성"><a href="#2-Validator-생성" class="headerlink" title="2. Validator 생성"></a>2. Validator 생성</h3><p>위에서 생성한 <code>@YearMonth</code>를 동작시키기 위해서 Validator가 필요합니다.</p><h4 id="1-ConstraintValidator-lt-동작시킬-Annotation-검증-객체-타입-gt-을-implements-해줍니다"><a href="#1-ConstraintValidator-lt-동작시킬-Annotation-검증-객체-타입-gt-을-implements-해줍니다" class="headerlink" title="1. ConstraintValidator&lt;**동작시킬 Annotation**, **검증 객체 타입**&gt;을 implements 해줍니다."></a>1. ConstraintValidator&lt;**동작시킬 Annotation**, **검증 객체 타입**&gt;을 implements 해줍니다.</h4><h4 id="2-객체-검증-기준-생성"><a href="#2-객체-검증-기준-생성" class="headerlink" title="2. 객체 검증 기준 생성"></a>2. 객체 검증 기준 생성</h4><ul><li>위에서 Annotation을 생성할 때, 검증할 때 기준이 되는 String을 pattern()으로 초기화시켜놓았습니다.</li><li>이 패턴을 가져오기 위해 같은 자료형의 변수를 생성해줍니다.</li></ul><h4 id="3-initailize-YearMonth-constraintAnnotation-메서드를-Override해줍니다"><a href="#3-initailize-YearMonth-constraintAnnotation-메서드를-Override해줍니다" class="headerlink" title="3. initailize(YearMonth constraintAnnotation)메서드를 Override해줍니다."></a>3. <code>initailize(YearMonth constraintAnnotation)</code>메서드를 Override해줍니다.</h4><ul><li>Argument로 들어있는 YearMonth에 Custom Annotation을 넣어주면 됩니다.</li><li>2번에서 생성한 변수에 Annotation에서 초기화해주었던 pattern을 넣어줍니다.</li></ul><h4 id="4-isValid-String-value-ContraintValidatorContext-context-메서드-Override"><a href="#4-isValid-String-value-ContraintValidatorContext-context-메서드-Override" class="headerlink" title="4. isValid(String value, ContraintValidatorContext context) 메서드 Override"></a>4. <code>isValid(String value, ContraintValidatorContext context)</code> 메서드 Override</h4><ul><li>비교값과, 정해놓은 기준을 비교하여 유효성을 체크해주는 함수입니다.</li><li>저는 애초에 연(Year), 월(Month)를 체크하고자 Custom Validator를 만들고 있었습니다.</li><li>LocalDate로는 연, 월, 일 값만 비교할 수 있기 때문에, 모든 월이 가지고 있는 <strong>01일</strong>을 비교값에 추가해주었습니다. </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YearMonthValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">YearMonth</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(YearMonth constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pattern = constraintAnnotation.pattern();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            LocalDate localDate = LocalDate.parse(value+<span class="string">&quot;01&quot;</span>, DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="Custom-Validation-사용"><a href="#Custom-Validation-사용" class="headerlink" title="Custom Validation 사용"></a>Custom Validation 사용</h2></blockquote><figure class="highlight plaintext"><figcaption><span>Target에 Field를 입력해주었기 때문에, 변수에도 사용할 수 있습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">아래와 같이 birthday라는 변수 위에 Annotation을 추가해주었으며,</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class User &#123;</span><br><span class="line">    @NotBlank</span><br><span class="line">    private String name;</span><br><span class="line">    @Max(value = 90)</span><br><span class="line">    private int age;</span><br><span class="line">    @Email</span><br><span class="line">    private String Email;</span><br><span class="line">    @YearMonth</span><br><span class="line">    private String birthday;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>컨트롤러 단에서 User 객체의 멤버 변수에 설정한 Annotation들이 동작하도록 <code>@Valid</code>라는 Annotation을 입력해주었습니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">post</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Spring" scheme="http://inwoo.github.io/categories/Basic/Spring/"/>
    
    
    <category term="validation" scheme="http://inwoo.github.io/tags/validation/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot에서의 Exception 처리</title>
    <link href="http://inwoo.github.io/10/18/SpringException/"/>
    <id>http://inwoo.github.io/10/18/SpringException/</id>
    <published>2021-10-18T13:22:10.000Z</published>
    <updated>2021-10-28T08:54:21.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p>Web Application의 입장에서, 에러가 발생했을 때 처리해줄 수 있는 방법은 많지 않다.<br>크게 <strong>에러 페이지</strong>, <strong>4 ~ 500번대 에러</strong>, <strong>별도의 에러 메세지 전달</strong> 정도가 있다.</p><p><strong>아래 예제 코드를 통해 확인해보도록 하자.</strong></p><p>name(String), age(Integer) 속성을 가지고 있는 User 객체에, controller에서 Integer와 int의 합을 도출하도록 해서 억지로 에러를 발생시켜 보았다.</p><details><summary>User 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="meta">@Size(min = 2, max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(1)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>Controller 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.exception.dto.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String name, <span class="meta">@RequestParam(required = false)</span> Integer age)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        <span class="comment">// 에러 발생 시키기</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>+age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">post</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><p>Client에게 친절한 Exception 처리는 기본적으로 두 가지 방식이 있다. </p><p>이를 <strong>Advice(조언)</strong> 이라고 한다. Server에서 Client에게 오류에 대한 조언을 해주는 것이다.</p><blockquote><h2 id="관련-Annotation"><a href="#관련-Annotation" class="headerlink" title="관련 Annotation"></a>관련 Annotation</h2></blockquote><h3 id="RestControllerAdvice"><a href="#RestControllerAdvice" class="headerlink" title="@RestControllerAdvice"></a>@RestControllerAdvice</h3><ul><li>페이징 처리를 하는 view resolver 영역의 white label page, error page를 global하게 처리할 수 있는 집합 장소</li></ul><h3 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h3><ul><li>Global하게 처리할 때는 <strong>RestControllerAdvice Annotation</strong>이 붙은 클래스 내에, 특정 Controller의 예외 처리를 할 때 특정 컨트롤러 내부에 사용한다.</li><li><strong>동일한 Handler가 Global, Controller에 모두 존재하면 특정 Controller 내부의 handler가 처리된다.</strong></li></ul><details><summary>전역으로 처리하는 handler 생성</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalControlAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">exception</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        System.out.println(e.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        System.out.println(e.getLocalizedMessage());</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>특정 Exception 처리하는 handler생성</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(value = NullPointerException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">methodArg</span><span class="params">(NullPointerException e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="string">&quot;값이 유효하지 않습니다.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>    <p>혹은 RestControllerAdvice Annotation에 basePackageClasses인자를 추가하여 특정 컨트롤러에 한정 시킬 수 있다.</p><ul><li><code>@RestControllerAdvice(basePackageClasses = ApiController.class)</code></li></ul><blockquote><h2 id="Client-단에서-발생할-수-있는-에러"><a href="#Client-단에서-발생할-수-있는-에러" class="headerlink" title="Client 단에서 발생할 수 있는 에러"></a>Client 단에서 발생할 수 있는 에러</h2></blockquote><p><strong>Client가 발생시킬 수 있는 에러는 형식에 맞지 않게 값을 입력하는 것이다.</strong> 이름을 1글자만 입력하거나, 나이를 0살로 입력하는 등의 예가 있다.</p><p>Validated Annotation을 클래스 단에 추가해준 뒤 GetMapping을 해주는 get 메서드의 RequestParam에 제한 사항을 추가해 주었다.</p><p>이름을 최소 2글자 이상 작성하여야 하고, 나이는 최소 1살이며 비워두면 안된다.</p><details><summary>Validated 예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Size(min = 2)</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NotNull</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Min(1)</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam</span> Integer age)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setAge(age);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="처음-접근은-Client단에서-값을-잘못입력했을-때"><a href="#처음-접근은-Client단에서-값을-잘못입력했을-때" class="headerlink" title="처음 접근은 Client단에서 값을 잘못입력했을 때"></a>처음 접근은 Client단에서 값을 잘못입력했을 때</h3><h3 id="어떠한-Exception이-발생하는지-확인하는-것으로-시작한다"><a href="#어떠한-Exception이-발생하는지-확인하는-것으로-시작한다" class="headerlink" title="어떠한 Exception이 발생하는지 확인하는 것으로 시작한다."></a>어떠한 Exception이 발생하는지 확인하는 것으로 시작한다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ApiController 클래스에서 발생한 오류</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackageClasses = ApiController.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiControllerAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Exception 클래스 내부의 객체가 들어오면 실행 (모든 Exception을 받는다)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">exception</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Exception의 클래스 이름을 출력하여 확인한다.</span></span><br><span class="line">        System.out.println(e.getClass().getName());</span><br><span class="line">        <span class="comment">// 테스트 코드이므로 Client 단에는 아무것도 출력되지 않도록 하였습니다.</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/talendTest.png" alt="img_1.png"></p><p>Chrome의 확장 프로그램인 Talend API를 통해 서버 테스트를 해보았다.</p><p>RequestParameter에 아무 값도 넣어주지 않아 아래와 같은 에러가 도출됐다.</p><p><img src="/image/talend.png" alt="img.png"></p><p>위와 같이 <strong>Spring에서 자체적으로 예외에 대한 기본적인 처리는 해준다.</strong></p><p>출력된 클래스는 <strong>org.springframework.web.bind.MissingServletRequestParameterException</strong>가 IDE에 출력되었다.</p><p>MissingServletRequestParameterException이 잡혔으니 value값을 이로 설정해서 원하는 정보를 제공할 수 있도록 구현해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">missingServletRequestParameterException</span><span class="params">(MissingServletRequestParameterException e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="string">&quot;값이 입력되지 않았습니다.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 body에 정보를 보내주고, HttpStatus는 400을 띄워주었다.</p><p><img src="/image/errorinfo.png" alt="img.png"></p><p>보다 Client들이 발생시키는 오류를 줄일 수 있다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Spring" scheme="http://inwoo.github.io/categories/Basic/Spring/"/>
    
    
    <category term="Exception" scheme="http://inwoo.github.io/tags/Exception/"/>
    
    <category term="Spring" scheme="http://inwoo.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>어댑터 패턴 (Adapter Pattern)</title>
    <link href="http://inwoo.github.io/10/14/adapter/"/>
    <id>http://inwoo.github.io/10/14/adapter/</id>
    <published>2021-10-14T12:56:02.000Z</published>
    <updated>2021-10-28T08:53:48.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Adapter-Pattern-이란-무엇인가"><a href="#Adapter-Pattern-이란-무엇인가" class="headerlink" title="Adapter Pattern 이란 무엇인가?"></a>Adapter Pattern 이란 무엇인가?</h2></blockquote><p>어댑터 패턴은 클래스의 인터페이스를 사용자가 기대하는 다른 인터페이스를 변환해주는 패턴으로, 호환성이 없는 인터페이스로 인해 <strong>호환이 되지않는 클래스들을 함께 작동할 수 있도록 해준다.</strong></p><p>대부분의 글에서 이 어댑터를 ‘돼지코’라 불리는 변환 어댑터를 예시로 듭니다.</p><p>또한 아래와 같은 사진을 자주 보실 수 있습니다.</p><p><img src="https://t1.daumcdn.net/cfile/tistory/99AAB74D5C305D4721" alt="image"></p><p><strong>여기서 Client는 사용자를 뜻합니다.</strong></p><p><strong>Target은 돼지코를 꽂을 수 있는 콘센트입니다.</strong> 일본에 여행을 가서 핸드폰을 충전하려고 보니 콘센트가 110V 충전기만 호환되도록 <strong>11자 모양</strong>으로 구멍이 뚫려있습니다. </p><p><strong>Adaptee는 제가 가지고 있는 220V 충전기</strong>인데 일본 콘센트(Target)에 꽂을 수가 없겠죠?</p><p>이 때 필요한게 <strong>Adapter, 돼지코</strong>입니다. 돼지코는 220V의 콘센트를 받아 110V로 변환시켜줍니다. 돼지코의 단자, 출력은 Target(110V 콘센트)과 같은 110V입니다. 이 부분을 계속 떠올리셔야 헷갈리지 않게 구현할 수 있습니다.</p><blockquote><h4 id="여기서-포인트는-기존의-충전기-자체를-변경하지않고-그대로-사용할-수-있는-것입니다"><a href="#여기서-포인트는-기존의-충전기-자체를-변경하지않고-그대로-사용할-수-있는-것입니다" class="headerlink" title="여기서 포인트는 기존의 충전기 자체를 변경하지않고, 그대로 사용할 수 있는 것입니다."></a><strong>여기서 포인트는 기존의 충전기 자체를 변경하지않고, 그대로 사용할 수 있는 것입니다.</strong></h4></blockquote><blockquote><h2 id="Adapter-Pattern의-구현"><a href="#Adapter-Pattern의-구현" class="headerlink" title="Adapter Pattern의 구현"></a>Adapter Pattern의 구현</h2></blockquote><p>돼지코를 통해 전체적인 흐름을 보았으니, 실무적인 영역으로 넘어가 보겠습니다.</p><p><strong>1. Client는 항상 같은 Target을 통해 Web에 특정한 요청을 하고 있습니다.</strong></p><p><strong>2. Client에게 새로운 기능을 제공하기 위해 외부에 요청하여 바이트코드 파일을 전달받았습니다.</strong></p><ul><li>기존에 기능을 제공하는 Interface와 호환되지 않고, 직접적인 접근이 불가능합니다.</li></ul><p><strong>3. Adapter를 통해 기존 Interface와 외부 코드를 호환시켜줍니다.</strong></p><ul><li>이때 Adapter는 위의 돼지코 단자, 출력이 Target, 110V와 같은 것과 같이 기존 Interface와 같아야합니다.</li></ul><h4 id="1-Target-콘센트-WebRequester"><a href="#1-Target-콘센트-WebRequester" class="headerlink" title="1. Target (콘센트, WebRequester)"></a>1. Target (콘센트, WebRequester)</h4><ul><li>Target은 <strong>WebRequester</strong> 입니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebRequester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">requestHandler</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-외부-코드"><a href="#2-외부-코드" class="headerlink" title="2. 외부 코드"></a>2. 외부 코드</h4><ul><li>기존 Target Interface와 호환이 되지 않는 형태입니다.</li><li>예시에서는 제가 임의로 작성하였기에 직접적인 접근도 가능하고 수정이 가능하지만, 바이트코드로 저장해서 불러오면 직접적인 접근이 어렵습니다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;New Service&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-Adapter-생성"><a href="#3-Adapter-생성" class="headerlink" title="3. Adapter 생성"></a>3. Adapter 생성</h4><ul><li><strong>계속 강조했던 부분이 나옵니다.</strong> 아래 질문에 대해 생각을 잠시 해보고 넘어가시면 좋습니다.<ul><li><strong>Target(콘센트)은</strong> 몇 V였나요?</li><li>돼지코는 220V를 호환시켜주기 위해 <strong>220V를 받아주고</strong>, <strong>결국 몇 V 였을까요?</strong></li></ul></li></ul><p>여기서부터는 다시 정리를 하며 한 줄씩 작성해 나가보겠습니다.</p><p><strong>3-1. 어댑터 클래스를 만들어줍니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">질문1. 돼지코 예제에서 Target은 몇 V였나요?</span><br><span class="line"></span><br><span class="line">질문2. 돼지코는 몇 V에 꽂으려한 거 였을까요?</span><br><span class="line"></span><br><span class="line">&lt; 정답 : 콘센트와 돼지코는 호환이되는 110V였습니다. &gt;</span><br></pre></td></tr></table></figure><p><strong>3-2. Adapter를 Target과 호환시키기 위해 형태를 맞춰줍니다.</strong></p><ul><li>Target, Adapter는 콘센트와 돼지코처럼 호환되기 위해 형태가 같아야겠죠?</li><li>Adapter class에 WebRequester를 implements해줍니다.<ul><li>Interface였으니까 Override를 해주어야겠죠?</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">WebRequester</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-호환시켜주고-싶은-Adaptee를-Adapter에-꽂아줍니다"><a href="#4-호환시켜주고-싶은-Adaptee를-Adapter에-꽂아줍니다" class="headerlink" title="4. 호환시켜주고 싶은 Adaptee를 Adapter에 꽂아줍니다."></a>4. 호환시켜주고 싶은 Adaptee를 Adapter에 꽂아줍니다.</h4><ul><li>돼지코만 콘센트에 꽂아두면 안되겠죠 ?, 돼지코에 220V 충전기(Adaptee)를 연결해주어야 의미가 있는 거겠죠 !</li><li><strong>여기서 Adaptee는 2번에서 보았던 외부 코드, 새로운 기능입니다.</strong></li><li>NewService 클래스를 Adapter에 주입해주었습니다 (돼지코(Adapter)에 220V(NewService)를 꽂아준 것입니다.)<ul><li>다른 클래스의 객체를 내부에 주입시키는 것을 의존성 주입(Dependency Injection)이라고 합니다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">WebRequester</span></span>&#123;</span><br><span class="line">    NewService newService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(NewService newService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.newService = newService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        newService.newService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Adapter-Pattern-완성"><a href="#5-Adapter-Pattern-완성" class="headerlink" title="5. Adapter Pattern 완성"></a>5. Adapter Pattern 완성</h4><ul><li>4번과 같이 의존성 주입을 통해 호환이 되지 않던 기능과 인터페이스가 Adapter를 통해 호환이 되게 되었습니다!</li><li>테스트를 해보겠습니다.</li><li>궁극적인 형태는 WebRequester(Target)였죠?<ul><li><code>WebRequester webRequester =</code></li></ul></li><li>NewService를 Adapter에 꽂아 형태를 맞춰줍니다.<ul><li><code>new Adapter(new NewService())</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebRequester webRequester = <span class="keyword">new</span> Adapter(<span class="keyword">new</span> NewService());</span><br><span class="line">        webRequester.requestHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Design Pattern" scheme="http://inwoo.github.io/categories/Design-Pattern/"/>
    
    
    <category term="어탭터 패턴" scheme="http://inwoo.github.io/tags/%EC%96%B4%ED%83%AD%ED%84%B0-%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>프로세스, 스레드, 교착상태, 메모리 계층</title>
    <link href="http://inwoo.github.io/10/14/0-interview-os/"/>
    <id>http://inwoo.github.io/10/14/0-interview-os/</id>
    <published>2021-10-14T10:24:28.000Z</published>
    <updated>2021-10-28T07:56:32.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="1-프로세스와-스레드-차이"><a href="#1-프로세스와-스레드-차이" class="headerlink" title="1. 프로세스와 스레드 차이"></a>1. 프로세스와 스레드 차이</h2></blockquote><p>프로세스는 프로그램이 OS로부터 메모리를 할당받은 동적인 상태의 프로그램 (OS 입장에서 최소 작업단위)</p><p>스레드는 프로세스가 할당받은 자원을 이용하는 실행 흐름의 단위 (CPU 입장에서 최소 작업단위)</p><p>프로세스 별로 최소 1개의 스레드를 보유하며, PCB라는 별도의 독립적인 주소 공간을 할당 받는다</p><p>프로세스 내의 스레드는 stack 영역을 독립적으로 갖으며, 나머지 영역은 서로 공유하게 됩니다.</p><blockquote><h3 id="1-1-PCB-영역에-대한-설명"><a href="#1-1-PCB-영역에-대한-설명" class="headerlink" title="1-1. PCB 영역에 대한 설명"></a>1-1. PCB 영역에 대한 설명</h3><p>PCB : stack, heap, data, code</p></blockquote><ul><li>OS가 프로세스를 제어하기 위해 프로세스의 상태 정보를 저장하는 곳</li><li>PID, state, 포인터, 레지스터 관련 정보, priority, account(CPU 관련), 입출력 상태 정보</li><li>프로세스 생성 시 만들어지며 주 기억장치에 저장된다.</li><li>interrupt시 context switching 에 사용</li></ul><blockquote><h3 id="1-2-Data-영역에는-무엇이-저장되는가"><a href="#1-2-Data-영역에는-무엇이-저장되는가" class="headerlink" title="1-2. Data 영역에는 무엇이 저장되는가"></a>1-2. Data 영역에는 무엇이 저장되는가</h3></blockquote><ul><li>전역 변수(정적 변수, 배열, 구조체 등), 프로그램 종료 시 시스템에 반환한다.</li><li>초기화된 변수를 저장하는 data와, 초기화 되지 않은 변수를 저장하는 bss로 나뉜다.</li></ul><blockquote><h3 id="1-3-프로세스-안의-4가지-영역-중-메모리가-끝날때까지-남는-영역"><a href="#1-3-프로세스-안의-4가지-영역-중-메모리가-끝날때까지-남는-영역" class="headerlink" title="1-3. 프로세스 안의 4가지 영역 중 메모리가 끝날때까지 남는 영역"></a>1-3. 프로세스 안의 4가지 영역 중 메모리가 끝날때까지 남는 영역</h3></blockquote><ul><li>코드와 데이터 영역</li><li>코드 : 실행할 프로그램 코드가 저장되는 영역, 프로그램이 시작되고 끝날 때까지 메모리에 유지된다.</li><li>데이터 : 전역 변수와 스태틱 변수가 저장되며 프로그램 시작때 할당되고 종료될 때 해제된다.</li></ul><blockquote><h3 id="1-4-스레드가-생겨난-배경"><a href="#1-4-스레드가-생겨난-배경" class="headerlink" title="1-4. 스레드가 생겨난 배경"></a>1-4. 스레드가 생겨난 배경</h3></blockquote><ul><li>프로그램이 복잡해지면서 단일 프로세스를 이용하여 프로그램을 실행해지기 힘들어짐 </li><li>안정성때문에 여러 프로세스를 사용하지않고 더 작은 실행 단위 개념인 스레드를 만들었다.</li></ul><hr><blockquote><h2 id="2-멀티-프로세스로-처리-가능한-것을-멀티-스레드로-처리하는-이유"><a href="#2-멀티-프로세스로-처리-가능한-것을-멀티-스레드로-처리하는-이유" class="headerlink" title="2. 멀티 프로세스로 처리 가능한 것을 멀티 스레드로 처리하는 이유"></a>2. 멀티 프로세스로 처리 가능한 것을 멀티 스레드로 처리하는 이유</h2></blockquote><p>프로세스는 생성할 때마다 자원을 할당하는 system call을 호출하게 되고, IPC를 통해 interrupt를 발생시키며 통신하게 됩니다.</p><p>멀티 스레드로 처리할 시 system call이 감소하고, IPC보다 스레드간의 통신비용이 더 적기 때문에 자원의 효율성을 위해 멀티스레드로 처리합니다.</p><p>하지만 스레드들은 PCB 중 stack 영역을 제외한 자원을 공유하기 때문에, 이를 해결하기 위해 동기화에 신경써야합니다.</p><blockquote><h3 id="2-1-스택을-스레드마다-독립적으로-할당하는-이유"><a href="#2-1-스택을-스레드마다-독립적으로-할당하는-이유" class="headerlink" title="2-1. 스택을 스레드마다 독립적으로 할당하는 이유"></a>2-1. 스택을 스레드마다 독립적으로 할당하는 이유</h3><p>스택은 함수 호출시 전달되는 인자, 되돌아갈 주소값, 함수 내에서 선언하는 변수 등을 저장하기 위해 사용하는 메모리 공간이다.</p></blockquote><p>스택이 독립적이라는 것은 독립적인 함수의 호출이 가능하고, 독립적인 실행 흐름이 추가되는 것이다.</p><p>따라서 스레드의 정의에 따라 독립적인 실행 흐름을 추가하기 위한 최소 조건으로 독립된 스택을 할당하는 것이다.</p><blockquote><h3 id="2-2-PC-Program-Counter-Register를-스레드마다-독립적으로-할당하는-이유"><a href="#2-2-PC-Program-Counter-Register를-스레드마다-독립적으로-할당하는-이유" class="headerlink" title="2-2. PC(Program Counter) Register를 스레드마다 독립적으로 할당하는 이유"></a>2-2. PC(Program Counter) Register를 스레드마다 독립적으로 할당하는 이유</h3><p>PC는 명령어의 어디까지 수행하였는가를 가리킨다.</p></blockquote><p>Interrupt가 발생하면서 명령어는 연속적으로 수행되지 못하기 때문에, 어느 부분까지 수행했는지를 기억하고 있어야한다.</p><p>그러므로 PC 레지스터가 독립적으로 할당될 필요가 있다.</p><blockquote><h3 id="2-3-프로세스를-생성할-때-어떤-system-call을-필요로-하는가"><a href="#2-3-프로세스를-생성할-때-어떤-system-call을-필요로-하는가" class="headerlink" title="2-3. 프로세스를 생성할 때 어떤 system call을 필요로 하는가"></a>2-3. 프로세스를 생성할 때 어떤 system call을 필요로 하는가</h3></blockquote><ul><li>fork() : 부모와 완전히 독립된, 새로운 pid를 갖는 자식 프로세스 생성</li><li>exec() : 프로세스의 메모리 영역을 덮어씌워 다른 프로세스로 변환 -&gt; 프로세스 유지를 위해 fork를 하여 자식에서 주로 사용된다.</li></ul><hr><blockquote><h2 id="3-교착-상태-Dead-Lock"><a href="#3-교착-상태-Dead-Lock" class="headerlink" title="3. 교착 상태 (Dead Lock)"></a>3. 교착 상태 (Dead Lock)</h2></blockquote><p>교착 상태는 시스템적으로 한정된 자원을 여러 곳에서 사용하려고 할 때 발생하며, 프로세스가 자원을 얻지 못해 작업을 수행하지 못하는 상태입니다.</p><blockquote><h3 id="3-1-교착-상태의-4가지-조건"><a href="#3-1-교착-상태의-4가지-조건" class="headerlink" title="3-1. 교착 상태의 4가지 조건"></a>3-1. 교착 상태의 4가지 조건</h3></blockquote><p>조건에는 프로세스들이 필요로 하는 자원에 대해 배타적인 통제권을 요구하는 <strong>상호배제</strong>,</p><p>프로세스가 할당된 자원을 가진 상태에서 다른 자원을 기다리는 <strong>점유대기</strong>,</p><p>자원의 사용이 끝날 때까지 자원을 가져올 수 없는 <strong>비선점</strong>,</p><p>순환적으로 다음 프로세스가 요구하는 자원을 갖는 <strong>순환대기</strong>가 있습니다.</p><p>해결 방법으로는 예방, 회피, 무시, 발견이 있습니다.</p><hr><blockquote><h2 id="4-메모리-계층"><a href="#4-메모리-계층" class="headerlink" title="4. 메모리 계층"></a>4. 메모리 계층</h2></blockquote><p>피라미드 구조로 위에서부터 레지스터 - 캐시 - 메모리 - 하드디스크의 구조를 가지고있습니다.<br>이 구조는 CS 관점과, 경제성 관점에서 확립될 수 있습니다.</p><p>레지스터와 캐시는 CPU 내부에 존재하여 빠르게 접근이 가능하고, 메모리는 CPU 외부에 존재하여 비교적 느리게 접근합니다. </p><p>하드 디스크에는 CPU가 직접적으로 접근할 수 없습니다.</p><p>접근하기 위해서는 하드 디스크의 데이터를 메모리로 이동시켜서 접근가능한데 속도가 느립니다.</p><blockquote><h3 id="4-1-메모리-계층왜-이렇게-구조화되어-있는가"><a href="#4-1-메모리-계층왜-이렇게-구조화되어-있는가" class="headerlink" title="4-1. 메모리 계층왜 이렇게 구조화되어 있는가?"></a>4-1. 메모리 계층왜 이렇게 구조화되어 있는가?</h3></blockquote><ul><li>컴퓨터 과학계에서 증명된 ‘참조의 지역성’의 관점에서 자주 쓰일 거 같은 데이터를 하드디스크에서 메모리로, 메모리에서 캐시로 읽어 오는데, 이 크기는 점진적으로 작아진다.</li><li>비용적인 측면에서도 비싼 레지스터, 캐시는 필요한만큼의 크기만 사용하고, 저렴한 하드디스크는 넉넉하게 사용하여 피라미드 형태로 나타난다.</li></ul><blockquote><h3 id="4-2-캐시가-존재하는-이유"><a href="#4-2-캐시가-존재하는-이유" class="headerlink" title="4-2. 캐시가 존재하는 이유"></a>4-2. 캐시가 존재하는 이유</h3><p>메인메모리와 프로세서 간의 시간적, 공간적 차이가 나기 때문에, </p></blockquote><p>캐시를 사용하여 자주 쓰고 인접한 데이터를 빠르게 처리한다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Interview" scheme="http://inwoo.github.io/categories/Interview/"/>
    
    <category term="OS" scheme="http://inwoo.github.io/categories/Interview/OS/"/>
    
    
    <category term="프로세스" scheme="http://inwoo.github.io/tags/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/"/>
    
    <category term="스레드" scheme="http://inwoo.github.io/tags/%EC%8A%A4%EB%A0%88%EB%93%9C/"/>
    
    <category term="교착상태" scheme="http://inwoo.github.io/tags/%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9C/"/>
    
    <category term="메모리 계층" scheme="http://inwoo.github.io/tags/%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B3%84%EC%B8%B5/"/>
    
  </entry>
  
  <entry>
    <title>Shell Script와 서버 작업 자동화</title>
    <link href="http://inwoo.github.io/10/14/shell/"/>
    <id>http://inwoo.github.io/10/14/shell/</id>
    <published>2021-10-14T06:37:09.000Z</published>
    <updated>2021-10-14T12:55:02.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h2 id="쉘-스크립트를-통한-서버-작업-자동화-및-운영-DevOps"><a href="#쉘-스크립트를-통한-서버-작업-자동화-및-운영-DevOps" class="headerlink" title="쉘 스크립트를 통한 서버 작업 자동화 및 운영(DevOps)"></a>쉘 스크립트를 통한 서버 작업 자동화 및 운영(DevOps)</h2><blockquote><h3 id="Why-왜-필요한가"><a href="#Why-왜-필요한가" class="headerlink" title="Why? 왜 필요한가?"></a>Why? 왜 필요한가?</h3></blockquote><p>서버는 일반적으로 로그파일을 생성한다. 생성 도중 용량 문제 등으로 작업이 중지되어 프로그램이 비정상적인 동작을 하여 다운되었다고 가정했을 때, 어떻게 문제를 해결할 수 있을까?</p><p>간단한 쉘 스크립트를 통해 일정 시간이 경과한 로그파일을 자동으로 삭제해주면 저장 공간에 대한 오류는 해결할 수 있다.</p><blockquote><h3 id="쉘-스크립트"><a href="#쉘-스크립트" class="headerlink" title="쉘 스크립트"></a>쉘 스크립트</h3></blockquote><p>쉘 명령어를 기본으로 하되, 몇 가지 문법이 추가된 형태이다.</p><p>쉘 스크립트는 <code>filename.sh</code> 형태의 파일로 작성 후, 파일을 실행한다.</p><blockquote><h3 id="기본-문법"><a href="#기본-문법" class="headerlink" title="기본 문법"></a>기본 문법</h3></blockquote><p>파일의 가장 첫 라인은 <code>#!/bin/bash</code>로 시작한다.</p><p>쉘 스크립트 파일은 실행 시 권한을 가지고 있어야한다.<br>    - <code>chmod 777 &lt;FileName&gt;</code>등과 같이 실행 권한을 부여해준다.</p><h4 id="1-변수"><a href="#1-변수" class="headerlink" title="1. 변수"></a>1. 변수</h4><ul><li><p><code>변수명=&#39;text&#39;</code> 와 같이 띄어쓰기 없이 입력해준다. text 내의 띄어쓰기는 가능하다.</p></li><li><p><code>$</code> 기호를 통해 변수임을 알려준다.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">my_name=<span class="string">&#x27;Dongryeol Jeong&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_name</span></span><br></pre></td></tr></table></figure><h4 id="2-배열"><a href="#2-배열" class="headerlink" title="2. 배열"></a>2. 배열</h4><ul><li><p><code>변수명=(데이터1 데이터2 데이터3)</code> 과 같이 배열을 선언할 수 있다.</p></li><li><p><code>$&#123;변수명[인덱스번호])</code> 로 배열을 출력할 수 있다.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>=(<span class="string">&quot;http&quot;</span> <span class="string">&quot;sqld&quot;</span> <span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 모든 데이터 출력 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test[@]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test[*]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 특정 인덱스 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test[1]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 크기 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#test[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 디렉토리의 파일 리스트를 배열로 입력받는 법</span></span><br><span class="line">file = $(ls)</span><br><span class="line"><span class="comment"># 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file[*]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-지역변수"><a href="#3-지역변수" class="headerlink" title="3. 지역변수"></a>3. 지역변수</h4><ul><li><p><code>$$</code> : 쉘의 프로세스 번호, pid</p></li><li><p><code>ls -al -z</code>를 실행했을 때</p><ul><li><p><code>$0</code> : 쉘 스크립트 이름 (<code>ls</code>)</p></li><li><p><code>$1 ~ $9</code> : 명령 줄의 인수 (<code>$1</code> : <code>-al</code> , <code>$2</code> : <code>-z</code>)</p></li><li><p><code>$*</code> : 모든 명령줄 인수 리스트 (<code>-al -z</code>)</p></li><li><p><code>$#</code> : 인수의 개수 (2개)</p></li><li><p><code>$?</code> : 최근 실행한 명령어의 종료 값</p><ul><li>0 : 성공</li><li>1 ~ 255 : 에러 메세지</li></ul></li></ul></li></ul><h4 id="4-연산"><a href="#4-연산" class="headerlink" title="4. 연산"></a>4. 연산</h4><ul><li><p><code>`expr`</code> : 숫자 계산</p></li><li><p>피 연산자와 연산 기호를 expr 뒤에 붙혀준다.</p></li><li><p><strong>괄호에는 항상 <code>\</code>(역슬래쉬)를 붙여주어야한다.</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ret=`expr \( 10 + 20 \) / 8 + 1`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ret</span></span><br></pre></td></tr></table></figure><h4 id="5-조건문"><a href="#5-조건문" class="headerlink" title="5. 조건문"></a>5. 조건문</h4><ul><li><p><code>if</code>로 시작하여 <code>fi</code>로 끝내준다.</p></li><li><p><strong>값 비교 문법</strong></p><ul><li><code>-z</code> : 문자가 null이면 true</li><li><code>-n</code> : 문자가 null이면 false</li><li><code>-eq</code> : equal (같으면 참)</li><li><code>-ne</code> : not equal (다르면 참)</li><li><code>-lt</code> : less than</li><li><code>-le</code> : less or equal</li><li><code>-gt</code> : greater than</li><li><code>-ge</code> : greater or equal</li></ul></li></ul><p><strong>파일 검사 문법</strong></p><ul><li><code>-e</code> : 파일이 존재하면 true<ul><li><code>-d</code> : 파일이 디렉토리이면 true</li><li><code>-h</code> : 심볼링 링크파일이면 true</li><li><code>-f</code> : 일반 파일이면 true</li><li><code>-r</code> : 읽기 가능하면 true</li><li><code>-s</code> : 파일 크기가 0이 아니면 true</li><li><code>-u</code> : 파일이 set-user-id가 설정되면 true</li><li><code>-w</code> : 파일이 쓰기 가능 상태이면 true</li><li><code>-x</code> : 파일이 실행 가능 상태이면 true</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -eq <span class="variable">$2</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Same Values&quot;</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Different Values&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="6-반복문"><a href="#6-반복문" class="headerlink" title="6. 반복문"></a>6. 반복문</h4><h5 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h5><ul><li><p><code>for 변수 in 변수값1 변수값 2 ...</code> 로 범위를 설정하고, <code>do</code> 다음 줄에 실행구문을 작성하고 <code>done</code>으로 반복문을 종료한다.</p></li><li><p><code>ls</code>를 통해 디렉토리에 있는 모든 파일을 출력해주고 끝내는 반복문</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> $(ls)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$data</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h5 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">list=$(ls)</span><br><span class="line">num=<span class="variable">$&#123;#list[*]&#125;</span></span><br><span class="line">index=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$num</span> -ge 0 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list[$index]&#125;</span></span><br><span class="line">index=`expr <span class="variable">$index</span> + 1`</span><br><span class="line">num=`expr <span class="variable">$num</span> - 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="서버에서-쉘-스크립트-사용"><a href="#서버에서-쉘-스크립트-사용" class="headerlink" title="서버에서 쉘 스크립트 사용"></a>서버에서 쉘 스크립트 사용</h3></blockquote><p>ping 명령어를 통해 ip에 요청을 보내고 응답이 돌아올 시 “GateWay ping succeed” 구문을 출력하고, 실패 시 “GateWay ping failed” 구문을 출력하게 하여 서버가 열려있는지 확인할 수 있다.</p><p>타 컴퓨터와 협업을 할 때 ping을 통해 확인하고, 성공 시 작업을 수행하게 할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ping -c 1 192.168.0.3 1&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GateWay ping succeed&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GateWay ping failed&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="백업하기"><a href="#백업하기" class="headerlink" title="백업하기"></a>백업하기</h4><p>두 개의 인자를 받았을 때 null이면 파일을 만들어서 폴더에 넣어주고, 아니면 각각 디렉토리에 날짜를 포함한 이름을 설정하여 저장</p><h5 id="압축-명령"><a href="#압축-명령" class="headerlink" title="압축 명령"></a>압축 명령</h5><ul><li><code>tar</code> : 과게어는 여러 파일을 묶기만 했었지만, 현재는 파일을 묶고 압축할 수 있다.</li><li>주요 옵션<ul><li>x : 묶음 해제</li><li>c : 파일 묶음</li><li>v : 묶음 / 해제 과정을 화면에 표시</li><li>z : gunzip 사용</li><li>f : v파일 이름 지정</li><li>압축 시 주로 사용하는 옵션 : <code>tar -cvzf [압축파일 이름] [압축할 파일 or 폴더명]</code></li><li>해제 시 주로 사용하는 옵션 : <code>tar -xvzf [압출 해제할 아카이브 이름]</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ]||[ -z <span class="variable">$2</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> usage: <span class="variable">$0</span> sourcedir targetdir</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">SRCDIR=<span class="variable">$1</span></span><br><span class="line">DSTDIR=<span class="variable">$2</span></span><br><span class="line">BACKUPFILE=backup.$(date +%y$m$d$H$M<span class="variable">$S</span>).tar.gz</span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$DSTDIR</span> ]; <span class="keyword">then</span></span><br><span class="line">tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mkdir <span class="variable">$DSTDIR</span></span><br><span class="line">tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="Logfile-정리하기"><a href="#Logfile-정리하기" class="headerlink" title="Logfile 정리하기"></a>Logfile 정리하기</h3></blockquote><p><strong>정책을 먼저 정하고, 그에 따라 파일을 어떻게 관리해줄 것인지 구현한다.</strong></p><p>2일이 경과한 log파일은 gz파일로 압축시켜주고, 압축된 지 3일이 경과한 파일은 삭제하도록한다.</p><p>find 함수를 통해 아래와 같이 구현할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LOGDIR=/var/<span class="built_in">log</span></span><br><span class="line">GZIPDAY=1</span><br><span class="line">DELDAY=2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$LOGDIR</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cd <span class="variable">$LOGDIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line">sudo find . -<span class="built_in">type</span> f -name <span class="string">&#x27;*log.*&#x27;</span> -mtime +<span class="variable">$GZIPDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;gzip &#123;&#125;&quot;</span> \; 2&gt; /dev/null</span><br><span class="line">sudo find . -<span class="built_in">type</span> f -name <span class="string">&#x27;*.gz&#x27;</span>  -mtime +<span class="variable">$DELDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;rm -f &#123;&#125;&quot;</span> \; 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="OS" scheme="http://inwoo.github.io/categories/Basic/OS/"/>
    
    
    <category term="서버 자동화" scheme="http://inwoo.github.io/tags/%EC%84%9C%EB%B2%84-%EC%9E%90%EB%8F%99%ED%99%94/"/>
    
    <category term="shell" scheme="http://inwoo.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>IPC - 파이프 (Pipe)</title>
    <link href="http://inwoo.github.io/10/12/realpipe/"/>
    <id>http://inwoo.github.io/10/12/realpipe/</id>
    <published>2021-10-12T13:30:09.000Z</published>
    <updated>2021-10-14T12:55:02.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Pipe-파이프-기법"><a href="#Pipe-파이프-기법" class="headerlink" title="Pipe(파이프) 기법"></a>Pipe(파이프) 기법</h2></blockquote><p><img src="https://miro.medium.com/max/4800/1*O9f0bRS5cPfLQBM1-SpbIQ.png" alt="image"></p><p>기본적인 파이프 기법은 <strong>단방향 통신</strong>으로 구성되어 있습니다. Half-Duplex 통신이라고 불리기도 합니다.</p><p>두 개의 프로세스를 연결하여 한 쪽에서는 데이터를 write하고, 다른 한 쪽에서는 read만 할 수 있습니다. 또는 <strong>한 프로세스의 출력 스트림을 다른 프로세스의 입력 스트림으로 사용할 때 사용됩니다.</strong></p><p>C언어에서 <code>fork()</code>로 자식 프로세스를 생성했을 때, <strong>부모와 자식간의 통신</strong>도 파이프를 통해 이루어지게 됩니다.</p><p>아래 예제를 통해 파이프 코드를 살펴보도록 하겠습니다.</p><blockquote><h2 id="Pipe-예제-코드"><a href="#Pipe-예제-코드" class="headerlink" title="Pipe 예제 코드"></a>Pipe 예제 코드</h2></blockquote><h3 id="1-출력-스트림을-입력-스트림으로-사용"><a href="#1-출력-스트림을-입력-스트림으로-사용" class="headerlink" title="1. 출력 스트림을 입력 스트림으로 사용"></a>1. 출력 스트림을 입력 스트림으로 사용</h3><p>Mac OS의 iterm에서 디렉토리 내 디렉토리, 파일을 보여주는 ls코드로 예제를 만들어 보겠습니다.</p><p><code>ls -al</code>를 입력하여 아래와 같은 화면이 출력되었습니다. </p><p><img src="/image/lsal.png" alt="img.png"></p><p>위 폴더 중 <strong>단어 code</strong>가 포함된 결과물만을 출력할 때 파이프 라인을 사용할 수 있습니다.</p><p><code>ls -al | grep code</code> </p><ul><li>파이프 라인을 통하여 위 1차 출력을 입력으로 받고, 그 중 code가 포함된 결과물을 가져 옵니다.</li><li>여기서 <code>|</code>가 파이프 라인을 의미합니다.</li></ul><p><img src="/image/grep.png" alt="img_1.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="OS" scheme="http://inwoo.github.io/categories/Basic/OS/"/>
    
    
    <category term="IPC" scheme="http://inwoo.github.io/tags/IPC/"/>
    
    <category term="Pipe" scheme="http://inwoo.github.io/tags/Pipe/"/>
    
  </entry>
  
</feed>
