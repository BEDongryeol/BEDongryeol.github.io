<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fintech - Backend Developer</title>
  
  <subtitle>Inwoo Jeong</subtitle>
  <link href="http://inwoo.github.io/atom.xml" rel="self"/>
  
  <link href="http://inwoo.github.io/"/>
  <updated>2021-12-11T09:41:28.843Z</updated>
  <id>http://inwoo.github.io/</id>
  
  <author>
    <name>Inwoo Jeong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>프록시 패턴 (Proxy Pattern)</title>
    <link href="http://inwoo.github.io/12/11/proxyPattern/"/>
    <id>http://inwoo.github.io/12/11/proxyPattern/</id>
    <published>2021-12-11T09:25:00.000Z</published>
    <updated>2021-12-11T09:41:28.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><hr><h1 id="Proxy-Pattern"><a href="#Proxy-Pattern" class="headerlink" title="Proxy Pattern"></a>Proxy Pattern</h1><h2 id="1-정의"><a href="#1-정의" class="headerlink" title="1. 정의"></a>1. 정의</h2><p>객체에 대한 접근을 제어하기 위해 <code>대리자(proxy)</code>를 둔다.</p><p><code>proxy</code>를 통해 대상 객체에 접근하여, 해당 객체가 메모리에 존재하지 않아도 기본적인 정보를 참조하거나 설정할 수 있고 또한 실제 객체의 기능이 반드시 필요한 시점까지 객체의 생성을 미룰 수 있다.</p><blockquote><p>10개의 method를 가지고 있는 객체가 있고 3개의 고비용 method, 나머지 7개는 다른 객체가 대신할 수 있는 가벼운 method가 있다고 가정하자.</p></blockquote><ul><li>이 때 <code>proxy를 생성</code>하여 <code>가벼운 method</code>를 처리하고, 고비용의 method가 필요한 시점에만 객체를 생성하는 것이다.</li></ul><h3 id="Proxy란-무엇인가"><a href="#Proxy란-무엇인가" class="headerlink" title="Proxy란 무엇인가?"></a>Proxy란 무엇인가?</h3><details><summary>사전적 정의</summary><ul><li><p>선거에서 자신에게 투표하는 것과 같이 다른 사람을 <code>대신하여 행동</code>하기 위해 사람에게 부여된 권한 또는 이 권한이 부여된 사람</p></li><li><p>대리 운전, 구매 대행, 대리인 등에 사용된다.</p></details></li></ul><hr><h2 id="2-장점"><a href="#2-장점" class="headerlink" title="2. 장점"></a>2. 장점</h2><ul><li><p>초기화 비용이 많이 들거나 복잡한 객체를 proxy를 통해 <code>Lazy</code>하게 처리할 수 있다.</p></li><li><p>객체의 접근에 대해 사전처리를 할 수 있다.</p></li></ul><hr><h2 id="3-단점"><a href="#3-단점" class="headerlink" title="3. 단점"></a>3. 단점</h2><ul><li>객체 생성 시 <code>proxy</code>를 거치게 되고, proxy 내부에 동기화가 필요한 경우, 성능 저하의 우려가 있다.</li></ul><hr><h2 id="4-구현"><a href="#4-구현" class="headerlink" title="4. 구현"></a>4. 구현</h2><p><img src="https://reactiveprogramming.io/books/patterns/img/patterns-articles/proxy-diagram.png" alt="UML Diagram"></p><h3 id="1-IObject"><a href="#1-IObject" class="headerlink" title="1. IObject"></a>1. IObject</h3><ul><li><code>객체</code>와 <code>proxy</code>의 추상화 객체이다.</li></ul><h3 id="2-Object"><a href="#2-Object" class="headerlink" title="2. Object"></a>2. Object</h3><ul><li>클라이언트가 실제로 접근하려는 객체</li></ul><h3 id="3-Proxy"><a href="#3-Proxy" class="headerlink" title="3. Proxy"></a>3. Proxy</h3><ul><li>Object에 접근 시 Object 앞 단에서 접근을 제어하는 proxy 객체</li></ul><hr><h2 id="5-흐름"><a href="#5-흐름" class="headerlink" title="5. 흐름"></a>5. 흐름</h2><p><img src="https://reactiveprogramming.io/books/patterns/img/patterns-articles/proxy-sequence.png" alt="Sequence Diagram"></p><ol><li>Client가 요청을 보내면 proxy를 return 해준다.</li><li>실제 객체가 필요한 요청을 보낼 때만 실제 객체가 호출되고, 나머지는 <code>proxy</code>가 처리해준다. </li></ol><hr><h2 id="6-활용"><a href="#6-활용" class="headerlink" title="6. 활용"></a>6. 활용</h2><ul><li><p>사용자가 서비스에 접근할 때 권한이 있는지 proxy를 통해 체크하고, 유효할 때만 실제 객체에 접근할 수 있도록 구성할 수 있다.</p></li><li><p>큰 이미지 파일과, 텍스트가 같이 있는 웹 페이지에 접근 시 무거운 이미지가 load 될 동안 텍스트를 먼저 제공하도록 구성한다.  </p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Design Pattern" scheme="http://inwoo.github.io/categories/Design-Pattern/"/>
    
    
    <category term="Factory Method Pattern" scheme="http://inwoo.github.io/tags/Factory-Method-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>팩토리 메서드 패턴 (Factory Method Pattern)</title>
    <link href="http://inwoo.github.io/12/11/FactoryMethod/"/>
    <id>http://inwoo.github.io/12/11/FactoryMethod/</id>
    <published>2021-12-11T08:01:58.000Z</published>
    <updated>2021-12-11T08:02:21.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><hr><h2 id="1-정의"><a href="#1-정의" class="headerlink" title="1. 정의"></a>1. 정의</h2><p>생성 패턴 중 하나로, <code>인스턴스의 생성</code>을 하위 클래스에서 위임한다.</p><p><code>new</code>를 통해 객체를 생성할 수도 있지만, <code>factory method</code>를 통해 <code>동적으로</code> 생성할 수 있다.</p><ul><li>예시) Map 등의 구조를 통해 keyword에 해당하는 객체를 생성해준다.</li></ul><p>Template method에서 생성되는 부분만 <code>abstract</code>로 설정하여 패턴을 적용할 수도 있다.</p><h2 id="2-장점"><a href="#2-장점" class="headerlink" title="2. 장점"></a>2. 장점</h2><ul><li><p><code>클라이언트</code>와 객체 <code>생성 모듈</code> 간의 결합도를 낮출 수 있다.</p></li><li><p>결합도가 낮고, 자료형이 하위 클래스에 의해 결정되기 때문에 <code>확장이 용이</code>하다.</p></li><li><p>여러 객체를 <code>동일한 형태</code>로 프로그래밍 할 수 있다.</p></li></ul><h2 id="3-단점"><a href="#3-단점" class="headerlink" title="3. 단점"></a>3. 단점</h2><ul><li><p>객체가 늘어날수록 클래스 수가 많아져 복잡도가 증가한다.</p></li><li><p>객체가 추가되면 하위 클래스를 재정의 해주어야한다.</p></li></ul><h2 id="4-구현"><a href="#4-구현" class="headerlink" title="4. 구현"></a>4. 구현</h2><p><img src="https://reactiveprogramming.io/books/patterns/img/patterns-articles/factory-method-diagram.png" alt="UML Diagram"></p><ol><li><p>IProduct: 원하는 객체를 추상화하여 생성한다 (Inteface)</p></li><li><p>Concrete Product: 객체를 생성한다.</p></li><li><p>Abstract Factory: 객체를 생성할 <code>Factory</code> 객체를 추상화하여 생성한다.</p><ul><li>Concrete Factory의 <code>default</code> 동작을 추가하기 위한 권고 사항이다.</li><li><code>Template Method Pattern</code>의 변하는 부분을 생성을 담당하는 factory에 위임하는 것이다.</li></ul></li><li><p>Concrete Factory: 분기 등을 통해 객체를 생성할 로직을 작성한다.</p></li></ol><h2 id="5-패턴의-흐름"><a href="#5-패턴의-흐름" class="headerlink" title="5. 패턴의 흐름"></a>5. 패턴의 흐름</h2><p><img src="https://reactiveprogramming.io/books/patterns/img/patterns-articles/factory-method-sequence.png" alt="Sequence Diagram"></p><ol><li><p>Client가 객체 생성 메서드를 호출한다.</p></li><li><p>Concrete Factory가 분기를 통해 알맞은 객체를 생성하여 전달한다.</p></li></ol><h2 id="6-활용"><a href="#6-활용" class="headerlink" title="6. 활용"></a>6. 활용</h2><ul><li><p>생성해야 하는 객체를 예측할 수 없을 때</p></li><li><p>동적으로 객체를 생성하고 싶을 때</p></li></ul><p>Application에 1개 이상의 DB를 연결할 때, 동적으로 필요한 DB Connection을 생성하여 전달할 수 있다.</p><ul><li>이 때 Connection을 매번하는 것은 많은 비용이 요구되므로, 상황을 고려하여 static 등으로 할당해 놓는 것이 좋을 거 같다.</li></ul><p><img src="https://reactiveprogramming.io/books/patterns/img/patterns/factory-method.png" alt="DB에 적용"></p><p>참고 : <a href="https://reactiveprogramming.io/blog/en/design-patterns/factory-method">Reactive Programming</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Design Pattern" scheme="http://inwoo.github.io/categories/Design-Pattern/"/>
    
    
    <category term="Factory Method Pattern" scheme="http://inwoo.github.io/tags/Factory-Method-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>JPA의 트랜잭션</title>
    <link href="http://inwoo.github.io/12/03/transaction/"/>
    <id>http://inwoo.github.io/12/03/transaction/</id>
    <published>2021-12-03T12:56:58.000Z</published>
    <updated>2021-12-03T12:59:34.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><hr><h1 id="트랜잭션의-특징-ACID"><a href="#트랜잭션의-특징-ACID" class="headerlink" title="트랜잭션의 특징, ACID"></a>트랜잭션의 특징, ACID</h1><h2 id="Atomicity-원자성"><a href="#Atomicity-원자성" class="headerlink" title="Atomicity(원자성)"></a>Atomicity(원자성)</h2><p>부분적인 성공을 허용하지 않고, <code>All or Nothing</code><br>실패 시 모두 실패, 성공 시 모두 성공한다.</p><h2 id="Consistency-일관성"><a href="#Consistency-일관성" class="headerlink" title="Consistency(일관성)"></a>Consistency(일관성)</h2><p>데이터의 정합성을 뜻한다</p><h2 id="Isolation-독립성"><a href="#Isolation-독립성" class="headerlink" title="Isolation(독립성)"></a>Isolation(독립성)</h2><p>트랜잭션 내의 데이터에 대해서는 다른 트랜잭션으로부터 독립적이다.</p><h2 id="Durability-지속성"><a href="#Durability-지속성" class="headerlink" title="Durability(지속성)"></a>Durability(지속성)</h2><p>데이터는 영구적으로 보관된다.</p><hr><h1 id="CheckedException"><a href="#CheckedException" class="headerlink" title="CheckedException"></a>CheckedException</h1><p><code>Exception 클래스</code>가 CheckedException이다. 명시적으로 Exception처리를 해주어야한다.</p><p><code>Transaction</code>내에서 Exception이 발생하여도 rollback되지 않고 <code>commit</code>된다.</p><ul><li>개발자가 해당 예외처리에 대한 책임을 가지게 된다.</li><li>catch 구문에서 rollback을 명시적으로 등록해주어야한다.</li></ul><h2 id="소스-코드-확인해보기"><a href="#소스-코드-확인해보기" class="headerlink" title="소스 코드 확인해보기"></a>소스 코드 확인해보기</h2><p><code>package org.springframework.transaction.interceptor</code>의 추상 클래스인 <code>TransactionAspectSupport</code>를 찾아보았다.</p><blockquote><p><code>invokeWithinTransaction()</code> 메서드를 확인해보면 아래와 같이 구성되어 있다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// This is an around advice: Invoke the next interceptor in the chain.</span></span><br><span class="line"><span class="comment">// This will normally result in a target object being invoked.</span></span><br><span class="line">retVal = invocation.proceedWithInvocation();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// target invocation exception</span></span><br><span class="line">completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">cleanupTransactionInfo(txInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Exception이 발생하면 catch 구문에 들어가게 되고 <code>completeTransactionAfterThrowing()</code> 메서드가 실행된다.</p></blockquote><p>Transaction의 속성을 <code>rollbackOn()</code>으로 체크하게 되고, true일 시 rollback()을, 아닐 결우에는 commit을 하게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (txInfo.transactionAttribute != <span class="keyword">null</span> &amp;&amp; txInfo.transactionAttribute.rollbackOn(ex)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// We don&#x27;t roll back on this exception.</span></span><br><span class="line"><span class="comment">// Will still roll back if TransactionStatus.isRollbackOnly() is true.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rollbackOn()메서드는 <code>RuntimeException</code>과 <code>Error</code> 타입을 잡아낸다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rollbackOn</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (ex <span class="keyword">instanceof</span> RuntimeException || ex <span class="keyword">instanceof</span> Error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="CheckedException에서-Rollback을-하는-방법"><a href="#CheckedException에서-Rollback을-하는-방법" class="headerlink" title="CheckedException에서 Rollback을 하는 방법"></a>CheckedException에서 Rollback을 하는 방법</h2><p>@Transactional의 소스 코드를 확인해보자. (org.springframework.transaction.annotation.Transactional)</p><p>180번 라인에 <code>rollbackFor</code>라는 클래스가 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;? extends Throwable&gt;[] rollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><p>아래와 같이 명시해주면 <code>Exception</code>클래스가 <code>rollbackOn</code>에 들어가게 되고, rollback 메서드가 수행된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackfor = Exception.class)</span></span><br></pre></td></tr></table></figure><hr><h1 id="동일한-클래스-내에서-Transactional-메서드-호출"><a href="#동일한-클래스-내에서-Transactional-메서드-호출" class="headerlink" title="동일한 클래스 내에서 @Transactional 메서드 호출"></a>동일한 클래스 내에서 @Transactional 메서드 호출</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.testTransaction();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 코드를 작성하고, <code>test()</code>를 호출하면 에러가 발생해도 @Transactional이 없는 것과 같이 rollback이 되지 않고 <code>commit</code>이 된다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/result-3.png"></p><p>이는 <code>Spring AOP</code>와 관련이 있다. Spring AOP는 프록시 기반으로 Bean <code>외부에서 메서드가 호출될 때</code> Annotation를 인식한다.</p><p>위 코드는 외부가 아닌 내부에서 호출을 하여 <code>@Transactional</code>이 동작하지 않는 것이다.</p><p>참고 : <a href="https://stackoverflow.com/questions/3423972/spring-transaction-method-call-by-the-method-within-the-same-class-does-not-wo">Spring @Transaction method call by the method within the same class, does not work?</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="JPA" scheme="http://inwoo.github.io/categories/Basic/JPA/"/>
    
    
    <category term="트랜잭션" scheme="http://inwoo.github.io/tags/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98/"/>
    
  </entry>
  
  <entry>
    <title>영속성 컨텍스트 (Persistence Context)</title>
    <link href="http://inwoo.github.io/12/03/persistenceContext/"/>
    <id>http://inwoo.github.io/12/03/persistenceContext/</id>
    <published>2021-12-03T07:22:31.000Z</published>
    <updated>2021-12-03T08:14:57.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p>일종의 JPA 컨테이너 안에서 동작하는 Entity의 Context를 관리하는 것.</p><p>Context내에서 CRUD가 일어나는데, 실제로 영속성 컨텍스트의 주체적인 역할을 하는 것은 <code>Entity Manager</code> Bean이다.</p><p>EntityManager를 <code>@Autowired</code>해서 사용할 수도 있다.</p><blockquote><p>Spring Data JPA는 EM을 사용하지 않고 쿼리를 실행할 수 있도록 도와준다.</p><p>Spring DATA JPA에서 제공하지 않는 custom query는 EntityManager를 직접받아서 처리하면 된다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EntityMangager entityMangaer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(entityMangaer.createQuery(<span class="string">&quot;select u from User u&quot;</span>).getResultList());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 실행하면 <code>userRepository.finaAll()</code>을 실행한 것과 같은 결과가 나온다.</p><hr><h1 id="1차-캐시-Id-값"><a href="#1차-캐시-Id-값" class="headerlink" title="1차 캐시 (Id 값)"></a>1차 캐시 (Id 값)</h1><p>영속성 컨텍스트 내에서 Entity를 관리하는 Entity Manager는 <code>캐시</code>를 가지고 있다.</p><blockquote><p>Entity의 Id를 작업을 수행할 때 별도로 Cache 처리를 하지 않아도, 영속성 컨텍스트에서 자동으로 Entity에 대한 Cache처리를 해주는 것이다.</p></blockquote><p>메서드에 <code>@Transactional</code>을 설정하고, 조회를 여러 번 하는 코드를 작성하면 조회는 한 번만 하지만 데이터를 계속해서 가져올 수 있다. 이는 영속성 컨텍스트에 존재하는 Entity Cache에서 가져온 것이다.</p><p><strong>메서드에 <code>@Transactional</code>을 설정을 하지 않으면 JPA 메서드는 내부적으로 <code>@Transactional</code>이 설정되어 있기 때문에, 실행할 때마다 캐시를 사용하지 않고 DB와 연동을 하게 된다.</strong></p><p>예시</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S entity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    S result = save(entity);</span><br><span class="line">    flush();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="캐시-자료구조"><a href="#캐시-자료구조" class="headerlink" title="캐시 자료구조"></a>캐시 자료구조</h2><p><strong>1차 캐시는 Map 형태로 생성된다.</strong></p><ul><li>Key는 id</li><li>Value는 해당 Entity 가 들어있다.</li></ul><blockquote><p>Id 값으로 조회할 때 영속성 Context에 존재하는 1차 캐시에 존재하는지 체크하고, 있으면 캐시에서 가져오고, 없으면 DB 조회를 한다.</p></blockquote><hr><h2 id="DB-반영-시점"><a href="#DB-반영-시점" class="headerlink" title="DB 반영 시점"></a>DB 반영 시점</h2><ol><li><code>flush()</code> 메서드를 명시적으로 호출하는 시점</li><li><code>Transaction</code>이 끝나서 쿼리가 commit 되는 시점</li><li><code>JPQL</code> 쿼리가 실행되는 시점</li></ol><h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><p>영속성 Context가 존재하여 JPA는 <code>지연 쓰기</code>가 발생한다. 즉 save 하는 시점에 바로 DB에 반영되지 않는다.</p><p><code>@Transactional</code>이 존재하는 상태에서 <code>delete</code>, <code>update</code>를 실행하여도 조회만 일어나고, 이에 대한 쿼리는 발생하지 않는다.</p><p>EntityManager가 Entity의 상태를 merge하고, 최종적으로 반영해야 되는 내용에 대해서만 쿼리가 실행된다</p><p><strong>Transaction이 묶여 있지 않으면, 메서드가 실행되는 도중에 실패하게 되면 앞에 있는 쿼리는 실행되고, 실행되지 못한 쿼리는 반영되지 않는 현상이 발생한다.</strong></p><blockquote><p><code>flush()</code> 메서드를 통해 DB에 반영하는 시점을 정할 수 있다.</p></blockquote><blockquote><p><code>saveAndFlush()</code> 메서드를 사용하면 저장과 동시에 반영할 수 있다.</p></blockquote><hr><h2 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h2><h3 id="persistence-xml을-통한-설정"><a href="#persistence-xml을-통한-설정" class="headerlink" title="persistence.xml을 통한 설정"></a>persistence.xml을 통한 설정</h3><p><code>LocalContainerEntityManagerFactoryBean</code> 클래스의 <code>setPersistenceXmlLocation()</code>에 의해 <code>resources - META-INF - persistence.xml</code>로 저장 위치와 파일 이름이 고정되어 있다.</p><h3 id="application-yml을-통한-설정"><a href="#application-yml을-통한-설정" class="headerlink" title="application.yml을 통한 설정"></a>application.yml을 통한 설정</h3><p>dependency에 <code>spring-boot-starter-data-jpa</code>를 추가하면 <code>Spring Boot</code>가 Context에 대한 설정을 처리해준다.</p><p>이후에 application.yml 파일에서 설정을 할 수 있다.</p><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="JPA" scheme="http://inwoo.github.io/categories/Basic/JPA/"/>
    
    
    <category term="영속성 컨텍스트" scheme="http://inwoo.github.io/tags/%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>JPA Listener 에서 Repository Injection</title>
    <link href="http://inwoo.github.io/12/01/jpainjection/"/>
    <id>http://inwoo.github.io/12/01/jpainjection/</id>
    <published>2021-12-01T12:02:09.000Z</published>
    <updated>2021-12-01T12:08:35.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><hr><p>JPA를 사용하면서 Listener를 생성할 때 당연하듯 <code>Listener 클래스</code>를 <code>@Component</code>를 통해 등록하고 내부에 <code>repository</code>를 injection하여 사용하였다.</p><p><strong>테스트 결과 repository에 NPE가 발생하였고, 원인을 찾아보았다.</strong></p><p>이를 이해하기 위해서는 Bean이 생성되는 과정을 알아야한다.</p><hr><h2 id="Bean이-생성되는-과정"><a href="#Bean이-생성되는-과정" class="headerlink" title="Bean이 생성되는 과정"></a>Bean이 생성되는 과정</h2><blockquote><p>1.Application 실행<br>2.EntityManagerFactory 등록<br>3.EntityManger 생성<br>4.SimpleJpaRepository 생성<br>5.JpaRepository 생성<br>6.Listener 생성</p></blockquote><ol><li>JpaRepository를 Bean으로 등록해주는 <code>EntityManagerFactroy</code>(이하 EMF)는<br><code>Application 실행</code>시 Bean으로 등록된다.<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3></li><li>EMF는 <code>EntityManger</code>를 생성해주는 클래스이다.<ul><li>EntityManager는 SharedEntityManagerCreator의 <code>createSharedEntityManager</code> 메서드에 의해 생성이되는데 EMF가 필수이다.</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EntityManager <span class="title">createSharedEntityManager</span><span class="params">(EntityManagerFactory emf)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> createSharedEntityManager(emf, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><ol start="3"><li>JpaRepository의 부모 클래스인 <code>SimpleJpaRepository</code>는 생성될 때 <code>EntityManager</code>가 필요하다.</li></ol><hr><h4 id="Listener를-Component로-명시하여-Scan을-하게-되면-Listener를-사용하기-위해-존재하여야-하는-객체들이-먼저-등록이-되기-전에-사용하려는-꼴이다"><a href="#Listener를-Component로-명시하여-Scan을-하게-되면-Listener를-사용하기-위해-존재하여야-하는-객체들이-먼저-등록이-되기-전에-사용하려는-꼴이다" class="headerlink" title="Listener를 Component로 명시하여 Scan을 하게 되면, Listener를 사용하기 위해 존재하여야 하는 객체들이 먼저 등록이 되기 전에 사용하려는 꼴이다."></a>Listener를 Component로 명시하여 Scan을 하게 되면, Listener를 사용하기 위해 존재하여야 하는 객체들이 먼저 등록이 되기 전에 사용하려는 꼴이다.</h4><blockquote><p>할아버지가 아버지를 낳지 않았는데, 내가 태어나려고 하는 상황과 유사하다.</p></blockquote><hr><h2 id="Listener에서-Repository-Injection-하는-방법"><a href="#Listener에서-Repository-Injection-하는-방법" class="headerlink" title="Listener에서 Repository Injection 하는 방법"></a>Listener에서 Repository Injection 하는 방법</h2><h3 id="1-ApplicationContext"><a href="#1-ApplicationContext" class="headerlink" title="1. ApplicationContext"></a>1. ApplicationContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanUtils</span> <span class="title">Implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">BeanUtils.applicationContext = applicationContext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> applicationContext.getBean(clazz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleListener</span> </span>&#123;</span><br><span class="line"><span class="meta">@PreUpdate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preUpdate</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">ExampleRepository er = BeanUtils.getBean(ExampleRepository.class);</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Lazy-어노테이션"><a href="#2-Lazy-어노테이션" class="headerlink" title="2. @Lazy 어노테이션"></a>2. @Lazy 어노테이션</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonEntityListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExampleRepository exampleRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreUpdate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preUpdate</span><span class="params">(Example example)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="JPA" scheme="http://inwoo.github.io/categories/Basic/JPA/"/>
    
    
    <category term="JPA" scheme="http://inwoo.github.io/tags/JPA/"/>
    
    <category term="Repository" scheme="http://inwoo.github.io/tags/Repository/"/>
    
  </entry>
  
  <entry>
    <title>PRG(Post-Redirect-Get) 패턴</title>
    <link href="http://inwoo.github.io/11/29/PRGPattern/"/>
    <id>http://inwoo.github.io/11/29/PRGPattern/</id>
    <published>2021-11-29T06:52:26.000Z</published>
    <updated>2021-11-29T07:19:10.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p>최근 프로젝트에 대한 회고를 진행하며 HTTP <code>POST</code> 메서드의 <code>Double-Submit</code> 이슈를 발견하였다.</p><p>POST request에 대한 response가 <code>요청 처리 결과를 반환</code>할 때, 서버는 동일한 결과를 중복으로 처리하여 보여준다.</p><p>Double-Submit을 해결할 수 있는 방법에는 <code>Spring MVC의 어노테이션 기반 해결</code>, <code>JSP의 taglib 기반 해결</code> 등이 있지만, </p><p>이를 회피할 수 있는 또 하나의 방법인 <code>PRG(POST-REDIRECT-GET) 패턴</code>에 대해서 정리해보았다.</p><blockquote><h2 id="PRG-패턴이란"><a href="#PRG-패턴이란" class="headerlink" title="PRG 패턴이란 ?"></a>PRG 패턴이란 ?</h2></blockquote><p>HTTP <code>POST 요청</code>에 대한 응답을 <code>다른 URL에 대한 GET</code>방식의 페이지로 <code>Redirect</code> 시키는 패턴이다.</p><p><code>POST 메서드</code>는 <code>NON-idempotent</code>, 즉 멱등하지 않기 때문에 재요청에 대한 대비가 되어 있어야합니다.</p><p>반대로 <code>GET 메서드</code>는 멱등하기 때문에 재요청이 와도 조회만 반복해서 될 뿐 <code>서버의 리소스</code>에는 영향을 미치진 않습니다.</p><blockquote><h2 id="Spring-MVC의-PRG-패턴"><a href="#Spring-MVC의-PRG-패턴" class="headerlink" title="Spring MVC의 PRG 패턴"></a>Spring MVC의 PRG 패턴</h2></blockquote><p><img src="https://i.stack.imgur.com/CRxzJ.png" alt="PRG Pattern 출처 : Wikipedia"></p><p><code>Post 기반</code>의 결제를 위한 uri로 접근하여 pay() 메서드에 매핑이 되면 비즈니스 로직을 처리하고, GetMapping을 하는 <code>/order</code> 로 redirect 됩니다.</p><p>이 때 POST 요청이 들어오면 브라우저는 <code>302 응답 코드</code>를 받게 되고, <code>/order</code>로 redirect 됩니다.</p><p>결제는 POST로 하였지만, 결제 후에는 GET 메서드에 매핑이 되기 때문에 새로고침을 하여도 로직은 발생하지 않고, GET 메서드만 발생하게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/pay&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 비즈니스 로직</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/order&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;order&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Web &amp; Network" scheme="http://inwoo.github.io/categories/Basic/Web-Network/"/>
    
    
    <category term="POST" scheme="http://inwoo.github.io/tags/POST/"/>
    
    <category term="GET" scheme="http://inwoo.github.io/tags/GET/"/>
    
  </entry>
  
  <entry>
    <title>템플릿 메서드 패턴 (Template Method Pattern)</title>
    <link href="http://inwoo.github.io/11/27/TemplateMethodPattern/"/>
    <id>http://inwoo.github.io/11/27/TemplateMethodPattern/</id>
    <published>2021-11-27T09:46:41.000Z</published>
    <updated>2021-11-28T05:22:43.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h2 id="Template-Method-Pattern-템플릿-메서드-패턴"><a href="#Template-Method-Pattern-템플릿-메서드-패턴" class="headerlink" title="Template Method Pattern (템플릿 메서드 패턴)"></a>Template Method Pattern (템플릿 메서드 패턴)</h2><p><img src="https://miro.medium.com/max/786/1*pdT0SiFTawD8j4KWkJRvdA.png" alt="Template Method"></p><h3 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h3><p>비슷한 형태의 프로그램의 구현에 필요한 <code>뼈대를 일반화</code>하여 제공하는 패턴입니다.</p><p>알고리즘의 <code>구조를 변경하지 않고</code> 알고리즘의 각 단계별로 수행하는 구체적이고, 변화할 수 있는 코드를 <code>재정의</code>할 수 있다.</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>소스 코드상의 알고리즘에서 재정의(확장, 변경 등)가 필요한 경우 유용하다.</li><li>코드의 중복이 감소된다.</li><li>핵심 로직 관리가 유용하다.</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>추상 클래스와 자식 클래스의 복잡성이 높아진다</li></ul><hr><p><img src="https://miro.medium.com/max/838/0*F8RVTE7IqH2-DUP7.png" alt="Template Method UML"></p><h3 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h3><blockquote><ul><li>알고리즘을 구성하는 <code>메서드 목록</code>과 그 <code>호출 순서(알고리즘)</code>을 가진 <code>템플릿 메서드</code></li><li>서브클래스가 꼭 <code>Override</code> 해야 할 <code>추상 메서드</code></li><li>서브클래스가 <code>Override</code> 해도 되는 <code>훅 메서드</code>(hook method)</li></ul></blockquote><h4 id="hook-method-필요할-시-서브-클래스에서-확장할-수-있는-기본적인-행동을-제공하는-메서드"><a href="#hook-method-필요할-시-서브-클래스에서-확장할-수-있는-기본적인-행동을-제공하는-메서드" class="headerlink" title="hook method : 필요할 시 서브 클래스에서 확장할 수 있는 기본적인 행동을 제공하는 메서드"></a>hook method : 필요할 시 서브 클래스에서 확장할 수 있는 기본적인 행동을 제공하는 메서드</h4><h3 id="고려-사항"><a href="#고려-사항" class="headerlink" title="고려 사항"></a>고려 사항</h3><ul><li>템플릿 메서드 내의 알고리즘에 해당하는 메서드를 <strong>템플릿 메서드만 사용할 수 있도록 한다.</strong><ul><li>Keyword : <code>protected</code></li></ul></li><li><code>템플릿 메소드</code>는 오버라이드 할 수 없도록 구현한다.<ul><li>Keyword : <code>final</code></li></ul></li><li>추상 메소드는 접두사를 붙여 <code>가독성</code>을 높여준다.</li></ul><h3 id="예제-코드"><a href="#예제-코드" class="headerlink" title="예제 코드"></a>예제 코드</h3><ul><li><code>공통되는 로직</code>과 <code>개별 로직의 분리</code></li><li>개별 로직 구현</li></ul><h3 id="Template-Method"><a href="#Template-Method" class="headerlink" title="Template Method"></a>Template Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryExecuteDB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Connection conn;</span><br><span class="line">    PreparedStatement stmt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        getConnection();</span><br><span class="line">        executeQuery();</span><br><span class="line">        closeConnection(stmt, conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DB 연동</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DB가 연결되었습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DB 연결 종료</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">(PreparedStatement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DB 연결이 종료되었습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">executeQuery</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Concrete-Class"><a href="#Concrete-Class" class="headerlink" title="Concrete Class"></a>Concrete Class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateExecution</span> <span class="keyword">extends</span> <span class="title">QueryExecuteDB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Create Query가 실행됩니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteExecution</span> <span class="keyword">extends</span> <span class="title">QueryExecuteDB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Delete Query가 실행됩니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Design Pattern" scheme="http://inwoo.github.io/categories/Design-Pattern/"/>
    
    
    <category term="Template Method Pattern" scheme="http://inwoo.github.io/tags/Template-Method-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP, TCP, 3-way-handshaking</title>
    <link href="http://inwoo.github.io/11/18/0-interview-network2/"/>
    <id>http://inwoo.github.io/11/18/0-interview-network2/</id>
    <published>2021-11-18T05:25:00.000Z</published>
    <updated>2021-11-18T05:27:19.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h2 id="2-TCP-IP-프로토콜을-4계층-설명하시오"><a href="#2-TCP-IP-프로토콜을-4계층-설명하시오" class="headerlink" title="2. TCP/IP 프로토콜을 4계층 설명하시오"></a>2. TCP/IP 프로토콜을 4계층 설명하시오</h2><p><img src="https://images.velog.io/images/jehjong/post/68e38b79-1117-4d48-b7c9-e04454205daa/image.png" alt="Layer"></p><p><strong>LINK 계층</strong><br>OSI 7 Layer의 물리적인 영역을 표준화 시킨 계층이다.</p><p>LAN, WAN과 같은 네트워크 표준과 관련된 <code>프로토콜을 정의</code>하며, 물리적인 주소로 MAC을 사용한다.</p><blockquote><p>프로토콜 :  Ethernet, PPP, Token Ring 등</p></blockquote><p><strong>IP 계층</strong><br>OSI 7 Layer의 네트워크 계층에 해당하며, <code>라우팅</code>을 해주는 계층이다.</p><p>IP 자체는 비-연결 지향적이며, 신뢰할 수 없는 프로토콜이다.</p><p>패킷을 전송할 때마다 불규칙적으로 라우팅해주고, 전송 중에 패킷이 손실되거나 오류가 발생할 수 있다.</p><blockquote><p>프로토콜 :  IP, ARP, RARP</p></blockquote><p><strong>TCP/UDP 계층</strong><br>OSI 7 Layer의 전송 계층에 해당하며, 포트를 통해 <code>데이터의 실제 송수신</code>을 담당하는 영역이다.</p><p>UDP는 비연결형 프로토콜이며, 연결형 프로톨인 TCP에 비해 전송 속도가 빠르다.</p><blockquote><p>프로토콜 : TCP, UDP, RTP, RTCP 등</p></blockquote><p><strong>Application 계층</strong><br>OSI 7 Layer의 응용 계층에 해당하며, <code>사용자</code>가 <code>application</code>과 <code>소통</code>할 수 있게 해준다.</p><p>Application들이 데이터를 교환하기 위해 사용되는 프로토콜을 사용한다.</p><blockquote><p>프로토콜 : FTP, HTTP, SSH, Telnet, DNS, SMTP 등</p></blockquote><h3 id="2-1-신뢰할-수-없는-IP-프로토콜을-사용할-때-패킷을-보호할-수-있는-기술"><a href="#2-1-신뢰할-수-없는-IP-프로토콜을-사용할-때-패킷을-보호할-수-있는-기술" class="headerlink" title="2-1. 신뢰할 수 없는 IP 프로토콜을 사용할 때 패킷을 보호할 수 있는 기술"></a>2-1. 신뢰할 수 없는 IP 프로토콜을 사용할 때 패킷을 보호할 수 있는 기술</h3><p>패킷을 <code>암호화</code>, <code>전자 서명</code> 등을 통해 패킷 스니핑을 당했을 때 정보가 유출되지 않게하거나,</p><p>SSH, SSL과 같은 <code>보안 프로토콜</code>을 통해 통신의 안정성을 강화할 수 있다.</p><hr><h2 id="3-TCP란"><a href="#3-TCP란" class="headerlink" title="3. TCP란 ?"></a>3. TCP란 ?</h2><p>TCP는 연결형 프로토콜로 데이터 전송 시 <code>전송 순서</code>와 <code>신뢰성</code>을 보장한다.</p><p>통신을 위한 Path를 만들어놓고, 송수신이 종료되면 연결을 끊는다.</p><p>신뢰성 보장을 위한 절차가 포함되어 UDP에 비해 속도가 느리다.</p><h3 id="3-1-서버와-클라이언트-통신-과정-함수-호출-순서"><a href="#3-1-서버와-클라이언트-통신-과정-함수-호출-순서" class="headerlink" title="3-1. 서버와 클라이언트 통신 과정 (함수 호출 순서)"></a>3-1. 서버와 클라이언트 통신 과정 (함수 호출 순서)</h3><p>서버가 연결해요청 <code>대기 큐를 생성</code>하고, <code>소켓 주소를 할당</code>하고 <code>대기</code>한다.</p><p>클라이언트가 적절한 포트를 통해 <code>연결 요청</code>을 하고,</p><p>서버에서 <code>accept</code> 하기 전까지 <code>block</code>되었다가 accpt를 하면 데이터를 송수신하게 됩니다.</p><h3 id="3-2-TCP의-Header"><a href="#3-2-TCP의-Header" class="headerlink" title="3-2. TCP의 Header"></a>3-2. TCP의 Header</h3><p>통신을 위한 <code>Source port</code>와 <code>Destination Port</code> 정보</p><p>데이터 순서 보장을 위한 <code>sequnece number</code></p><p>연결 설정 및 종료와 관련된 <code>code bits</code> 등이 있다.</p><ul><li>URG, ACK, PSH, RST, SYN, FIN</li></ul><h3 id="3-3-TCP에서-데이터-순서를-보장하는-방법"><a href="#3-3-TCP에서-데이터-순서를-보장하는-방법" class="headerlink" title="3-3. TCP에서 데이터 순서를 보장하는 방법"></a>3-3. TCP에서 데이터 순서를 보장하는 방법</h3><p>흐름제어 : 송신 측과 수신 측의 데이터 처리 속도 차이 조절</p><p>혼잡제어 : 네트워크 내 트래픽을 고려해서 패킷의 양을 설정하는 알고리즘</p><hr><h2 id="4-3-way-handshaking이란"><a href="#4-3-way-handshaking이란" class="headerlink" title="4. 3-way handshaking이란?"></a>4. 3-way handshaking이란?</h2><p>서버와 클라이언트가 TCP를 통해 연결할 때 연결 설정 과정 중 일어나는 3번의 통신</p><p>TCP 헤더에 담긴 <code>code bits</code> 중 <code>SYN</code>, <code>ACK</code>를 사용한다.</p><ul><li>SYN : 연결 요청 플래그</li><li>ACK : 응답</li></ul><ol><li><p>클라이언트에서 연결 요청을 위해 SYN(M) 패킷을 보낸다.</p></li><li><p>서버에서는 SYN(M)을 받고, 수락 시 ACK(M+1)과 SYN(N)을 보낸다.</p></li><li><p>클라이언트는 패킷을 받고, ACK(N+1)을 서버로 다시 보낸다.</p></li></ol><h3 id="4-1-4-way-handshaking이란"><a href="#4-1-4-way-handshaking이란" class="headerlink" title="4-1. 4-way handshaking이란?"></a>4-1. 4-way handshaking이란?</h3><ol><li><p>클라이언트가 연결을 종료하겠다는 FIN 플래그를 전송한다.</p></li><li><p>서버가 패킷을 받고, 확인 메시지로 ACK을 보낸다.</p><ul><li>데이터가 모두 보내질 때까지 TIME_OUT이 된다.</li></ul></li><li><p>데이터가 다 보내지고, 통신이 끝나면 서버에서 클라이언트로 FIN 플래그를 보낸다.</p></li><li><p>클라이언트는 FIN을 받고 ACK를 서버로 보낸다.</p></li><li><p>클라이언트는 서버로부터 아직 받지 못한 데이터가 있는 상황을 대비하여, 일정 시간동안 세션을 남겨놓고, 잉여 패킷을 기다리다가 완전 종료된다.</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Interview" scheme="http://inwoo.github.io/categories/Interview/"/>
    
    <category term="Network" scheme="http://inwoo.github.io/categories/Interview/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Security 개요</title>
    <link href="http://inwoo.github.io/11/16/springsecurity/"/>
    <id>http://inwoo.github.io/11/16/springsecurity/</id>
    <published>2021-11-16T11:20:53.000Z</published>
    <updated>2021-11-16T14:12:51.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p><img src="https://cdn.inflearn.com/public/files/courses/324591/1a3def63-c35e-4e6a-83b6-b8d970594046/spring-security-bgd.png" alt="Spring Security"></p><h1 id="해결하려는-문제"><a href="#해결하려는-문제" class="headerlink" title="해결하려는 문제"></a>해결하려는 문제</h1><blockquote><h3 id="웹사이트의-보안"><a href="#웹사이트의-보안" class="headerlink" title="웹사이트의 보안"></a>웹사이트의 보안</h3></blockquote><p>웹 사이트에는 여러 서비스를 배포하기 위한 리소스와, 이를 사용하는 유저들의 정보가 담겨있습니다.</p><p>악의적인 접근으로 부터 이 리소스를 보호하기 위해 <code>Security Library</code>가 사용됩니다.</p><h2 id="인증-Authentication"><a href="#인증-Authentication" class="headerlink" title="인증 (Authentication)"></a>인증 (Authentication)</h2><p>모든 사용자에게 열려있는 페이지도 있지만, <code>특정 리소스</code>에 접근하거나, <code>private 사용</code>을 보장하기 위해 일반적으로 Login 하는 과정이 필요합니다. </p><p>Login은 기존에 ID와 Password를 입력하여 로그인하였으나, 최근에 생긴 페이지들에서는 <code>KAKAO</code>, <code>NAVER</code> 등을 통해 인증을 대리하는 추세입니다. </p><p>Login 후 인증을 기존에는 <code>Session</code>으로 관리하였으나, 최근에는 서비스가 확장되며 서버들을 <code>scale-out</code>을 해나가면서<br>session을 분산해서 저장하고, 동기화가 필요해졌습니다.</p><p>이를 보완하기 위해 <code>session-less</code>의 <code>token 관리</code> 방식으로 인증을 하기 시작하고 있습니다.</p><h3 id="권한-인가-Authorization"><a href="#권한-인가-Authorization" class="headerlink" title="권한, 인가 (Authorization)"></a>권한, 인가 (Authorization)</h3><p>Login을 완료한 후에 이 사용자가 가진 권한으로 어떤 일을 할 수 있는지 설정합니다. 크게는 <code>관리자(ADMIN)</code>, <code>사용자(USER)</code>로 권한을 설정합니다.</p><p>웹 서비스를 개발할 때에 권한이 있는 사용자만 <code>특정 uri</code>, <code>리소스</code>에 접근할 수 있도록 하여야합니다.</p><p>이는 <code>Spring Security Framework</code>을 통해 보다 쉽게 구현할 수 있습니다.</p><p>비즈니스 로직이 복잡해지고, annotaion으로 체크하는 것이 어려워지면 AOP 등 다양한 방법을 사용한다. 권한을 다루는 방법은 무수히 많습니다.</p><hr><h1 id="예제-코드"><a href="#예제-코드" class="headerlink" title="예제 코드"></a>예제 코드</h1><h2 id="aaplication-yml"><a href="#aaplication-yml" class="headerlink" title="aaplication.yml"></a>aaplication.yml</h2><p>Login과 권한 테스트를 위해 yml파일에 user 1명을 생성해주었습니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user1</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">1111</span></span><br><span class="line">      <span class="attr">roles:</span> <span class="string">USER</span></span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p><strong>index</strong> : uri를 <code>/</code>로 설정하고, “홈페이지”라는 String을 return 해주는 페이지<br><img src="/image/secureindex.png" alt="Index Page"></p><p><strong>/auth</strong> : SecurityContextHolder를 통해 사용자의 권한 등 세부 사항을 return 해주는 페이지<br><img src="/image/secureauth.png" alt="/Auth Page"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;홈페이지&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">auth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext()</span><br><span class="line">                .getAuthentication();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>@PreAuthorize 어노테이션을 사용하여 특정 권한을 가진 사람만 접근 허용</p></blockquote><p><code>SecurityMessage</code>라는 POJO를 만들어 Authentication과 String 타입을 갖는 변수들을 선언해주었습니다.</p><details><summary>SecurityMessage 코드 보기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Authentication auth;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><code>/user</code> 에는 USER라는 권한(ROLE)을 가진 사람, <code>/admin</code>에는 ADMIN 권한을 가진 사람만 접근할 수 있도록 해주었습니다.</p><p>아직까지는 <code>application.yml</code>에서 설정한 user의 <code>roles</code>는 <code>USER</code>이지만 <code>/admin</code>에도 접근이 가능합니다.</p><p><strong>@PreAuthorize(“hasZnyAuthority(‘ROLE’)”)</strong> 을 활성화 시켜주기 위해서는 <code>WebSecurityConfigurerAdapter</code> 클래스를 extends한 클래스가 존재해야하고, 추가로 annotation을 설정해주어야 합니다..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*...*/</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;ROLE_USER&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityMessage <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SecurityMessage.builder()</span><br><span class="line">            .auth(SecurityContextHolder.getContext().getAuthentication())</span><br><span class="line">            .message(<span class="string">&quot;User 정보&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;ROLE_ADMIN&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityMessage <span class="title">admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SecurityMessage.builder()</span><br><span class="line">            .auth(SecurityContextHolder.getContext().getAuthentication())</span><br><span class="line">            .message(<span class="string">&quot;관리자 정보&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Config-Class"><a href="#Config-Class" class="headerlink" title="Config Class"></a>Config Class</h2><h3 id="1-PreAuthorize를-활성화시키기-위해-SecurityConfig라는-클래스를-만들어-WebSecurityConfigurerAdapter를-extends-해주었습니다"><a href="#1-PreAuthorize를-활성화시키기-위해-SecurityConfig라는-클래스를-만들어-WebSecurityConfigurerAdapter를-extends-해주었습니다" class="headerlink" title="1. @PreAuthorize를 활성화시키기 위해 SecurityConfig라는 클래스를 만들어 WebSecurityConfigurerAdapter를 extends 해주었습니다."></a>1. <code>@PreAuthorize</code>를 활성화시키기 위해 SecurityConfig라는 클래스를 만들어 <code>WebSecurityConfigurerAdapter</code>를 extends 해주었습니다.</h3><h3 id="2-EnableWebSecurity-debug-true-default-값은-false이지만-security를-debug로-실행시키기-위해-추가하였습니다"><a href="#2-EnableWebSecurity-debug-true-default-값은-false이지만-security를-debug로-실행시키기-위해-추가하였습니다" class="headerlink" title="2. @EnableWebSecurity(debug = true) : default 값은 false이지만 security를 debug로 실행시키기 위해 추가하였습니다."></a>2. @EnableWebSecurity(debug = true) : default 값은 false이지만 security를 debug로 실행시키기 위해 추가하였습니다.</h3><h3 id="3-EnableGlobalMethodSecurity-prePostEnabled-true-prePostEnabled를-true로-설정하였습니다"><a href="#3-EnableGlobalMethodSecurity-prePostEnabled-true-prePostEnabled를-true로-설정하였습니다" class="headerlink" title="3. @EnableGlobalMethodSecurity(prePostEnabled = true) : prePostEnabled를 true로 설정하였습니다."></a>3. @EnableGlobalMethodSecurity(prePostEnabled = true) : prePostEnabled를 true로 설정하였습니다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity(debug = true)</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 활성화를 시키면 USER 권한을 가진 사용자가 <code>/admin</code>에 접근할 때 아래와 같이 403에러가 발생한다.</p><p><img src="/imgae/secure403.png" alt="권한 관련 Error"></p><h3 id="접근-테스트를-위해-WebSecurityConfigurerAdapter-를-extends한-클래스-내에서-user를-생성하여-테스트-할-수-있다"><a href="#접근-테스트를-위해-WebSecurityConfigurerAdapter-를-extends한-클래스-내에서-user를-생성하여-테스트-할-수-있다" class="headerlink" title="접근 테스트를 위해 WebSecurityConfigurerAdapter 를 extends한 클래스 내에서 user를 생성하여 테스트 할 수 있다."></a>접근 테스트를 위해 WebSecurityConfigurerAdapter 를 extends한 클래스 내에서 user를 생성하여 테스트 할 수 있다.</h3><hr><h2 id="User-Test"><a href="#User-Test" class="headerlink" title="User Test"></a>User Test</h2><p><code>WebSecurityConfigurerAdapter</code>는 <code>configure(AuthenticationManagerBuilder auth)</code> 메서드를 가지고 있는데, parameter에서도 알 수 있듯이 AuthenticationManager를 Build하여 생성할 수 있다.</p><h4 id="configure-AuthenticationManagerBuilder-auth-메서드를-override하게-되면-application-yml에서-설정한-user는-사용할-수-없다"><a href="#configure-AuthenticationManagerBuilder-auth-메서드를-override하게-되면-application-yml에서-설정한-user는-사용할-수-없다" class="headerlink" title="configure(AuthenticationManagerBuilder auth) 메서드를 override하게 되면 application.yml에서 설정한 user는 사용할 수 없다."></a>configure(AuthenticationManagerBuilder auth) 메서드를 override하게 되면 <code>application.yml</code>에서 설정한 user는 사용할 수 없다.</h4><p>아래 코드를 통해 <code>inMemoryAuthentication</code> 방식으로 user 2명을 생성하였다. </p><blockquote><p>이 때 유의할 점은 password를 등록할 때 암호화를 해주어야 한다는 것이다.</p><p>아직까지는 ADMIN 권한을 가진 user는 /admin에만, USER 권한은 /user에만 접근할 수 있다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(User.builder()</span><br><span class="line">                    .username(<span class="string">&quot;user2&quot;</span>)</span><br><span class="line">                    .password(passwordEncoder().encode(<span class="string">&quot;2222&quot;</span>))</span><br><span class="line">                    .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">            ).withUser(User.builder()</span><br><span class="line">                    .username(<span class="string">&quot;user3&quot;</span>)</span><br><span class="line">                    .password(passwordEncoder().encode(<span class="string">&quot;3333&quot;</span>))</span><br><span class="line">                    .roles(<span class="string">&quot;ADMIN&quot;</span>))</span><br><span class="line">            ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="누구나-접근할-수-있는-페이지"><a href="#누구나-접근할-수-있는-페이지" class="headerlink" title="누구나 접근할 수 있는 페이지"></a>누구나 접근할 수 있는 페이지</h2><p>권한에 상관없이 누구나 접근할 수 있는 페이지도 <code>configure(HttpSecurity http)</code> 메서드로 설정할 수 있다.</p><p>index 페이지인 <code>/</code>를 누구나 접근할 수 있도록 설정하였다.</p><p>request를 받아, <code>/</code> 에 접근하는 요청에 대해 <code>permitAll()</code>을 통해 누구나 접근할 수 있도록 설정할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests((requests) -&gt;</span><br><span class="line">                requests.antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                        .anyRequest().authenticated()</span><br><span class="line">        );</span><br><span class="line">        http.formLogin();</span><br><span class="line">        http.httpBasic();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Spring Security" scheme="http://inwoo.github.io/categories/Basic/Spring-Security/"/>
    
    
    <category term="spring security" scheme="http://inwoo.github.io/tags/spring-security/"/>
    
  </entry>
  
  <entry>
    <title>Controller와 Rest-Controller의 차이점</title>
    <link href="http://inwoo.github.io/11/14/ControllerRestController/"/>
    <id>http://inwoo.github.io/11/14/ControllerRestController/</id>
    <published>2021-11-14T13:28:24.000Z</published>
    <updated>2021-11-14T14:30:01.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p>Spring에서 <code>Controller</code>임을 명시하기 위해 클래스 상단에 <code>Controller</code> 혹은 <code>RestController</code> 어노테이션을 붙여준다.</p><blockquote><h4 id="이-둘의-주요-차이점은-HTTP-Response-Body가-생성되는-방식에-있다"><a href="#이-둘의-주요-차이점은-HTTP-Response-Body가-생성되는-방식에-있다" class="headerlink" title="이 둘의 주요 차이점은 HTTP Response Body가 생성되는 방식에 있다."></a>이 둘의 주요 차이점은 HTTP Response Body가 생성되는 방식에 있다.</h4><h4 id="RestController는-Controller와-ResponseBody의-조합으로-생각해도-좋다"><a href="#RestController는-Controller와-ResponseBody의-조합으로-생각해도-좋다" class="headerlink" title="RestController는 Controller와 ResponseBody의 조합으로 생각해도 좋다."></a>RestController는 Controller와 ResponseBody의 조합으로 생각해도 좋다.</h4><p>Controller : Spring MVC 모델에서 사용<br>RestController : RESTful 웹 서비스에서 사용</p></blockquote><h3 id="Spring-MVC-처리과정"><a href="#Spring-MVC-처리과정" class="headerlink" title="Spring MVC 처리과정"></a>Spring MVC 처리과정</h3><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://blog.kakaocdn.net/dn/bXvA4D/btqW4gE9bMH/TzOqxMdEnRXTAVqaLre5TK/img.png" alt="MVC"></p><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value=TYEP)</span></span><br><span class="line"><span class="meta">@Retention(value=RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller</span><br></pre></td></tr></table></figure><ul><li><code>Spring MVC</code>의 Controller는 <code>Model</code> 객체를 만들어 데이터를 담아 적절한 jsp파일 등의 <code>View</code>를 반환해주는 역할을 한다.</li></ul><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value=TYEP)</span></span><br><span class="line"><span class="meta">@Retention(value=RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController</span><br></pre></td></tr></table></figure><ul><li><p>RestController는 단순히 객체를 반환하고, 객체 데이터는 JSON, XML 등의 형식으로 HTTP 응답에 담아서 전송한다.</p></li><li><p>뷰가 아닌 Data를 반환하여 응답에 보다 유용하게 사용된다.</p></li><li><p>RestController 어노테이션에는 Controller와 ResponseBody 어노테이션이 달려있다.</p></li></ul><blockquote><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p><a href="https://dncjf64.tistory.com/288">기회는 찬스</a></p><p><a href="https://www.baeldung.com/spring-controller-vs-restcontroller">Baeldung Blog</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Web &amp; Network" scheme="http://inwoo.github.io/categories/Basic/Web-Network/"/>
    
    
    <category term="Controller" scheme="http://inwoo.github.io/tags/Controller/"/>
    
  </entry>
  
  <entry>
    <title>상태 패턴 (State Pattern)</title>
    <link href="http://inwoo.github.io/11/14/StatePattern/"/>
    <id>http://inwoo.github.io/11/14/StatePattern/</id>
    <published>2021-11-13T17:02:36.000Z</published>
    <updated>2021-11-14T13:31:41.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h2 id="State-Pattern-이란-무엇인가"><a href="#State-Pattern-이란-무엇인가" class="headerlink" title="State Pattern 이란 무엇인가?"></a>State Pattern 이란 무엇인가?</h2><p><img src="https://kscory.com/assets/design/state/state-01.png" alt="UML Diagram"></p><p>객체가 특정 상태에 따라 행위를 달리하는 상황에서,</p><p>상태를 체크하고 이에 따른 행위를 호출하는 것이 아닌</p><p><code>상태를 객체화</code>하여 행동을 할 수 있도록 위임하는 패턴이다.</p><hr><h2 id="Why-State-Pattern을-왜-사용하여아-하는가"><a href="#Why-State-Pattern을-왜-사용하여아-하는가" class="headerlink" title="Why ? State Pattern을 왜 사용하여아 하는가?"></a>Why ? State Pattern을 왜 사용하여아 하는가?</h2><p>State는 literally 상태를 뜻한다. 현실 세계에서 객체는 동일한 동작도 <code>상태에 따라 다른 출력값</code>을 낸다.</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>모든 상태에 대한 behavior가 한 곳에 모여있어서 유지보수에 용이하다.</li><li>긴 분기문을 제거할 수 있다.</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>분기가 많지 않다면 State pattern을 사용하는 것이 오히려 복잡해질 수 있습니다.</li></ul><h3 id="노트북을-예시로-확인해보자"><a href="#노트북을-예시로-확인해보자" class="headerlink" title="노트북을 예시로 확인해보자."></a>노트북을 예시로 확인해보자.</h3><blockquote><p>노트북은 하나의 전원 버튼만 가지고 있다. 전원 버튼은 상태에 따라 아래와 같이 동작한다.</p><p><strong>꺼진 상태 -&gt; 전원 On &amp; 전원 On 상태로 전환</strong></p><p><strong>켜진 상태 -&gt; 전원 Off &amp; 전원 Off 상태로 전환</strong></p><p><strong>절전 모드 -&gt; 화면 깨우기 &amp; 전원 On 상태로 전환</strong></p></blockquote><hr><h2 id="예제-코드"><a href="#예제-코드" class="headerlink" title="예제 코드"></a>예제 코드</h2><p><img src="/image/state.png" alt="StatePattern UML"></p><p><code>PowerState</code>라는 여러 가지 상태가 Implements할 Interface를 선언해주었습니다.</p><p>구체적인 상태 객체로는 <code>Saving</code>, <code>On</code>, <code>Off</code>를 구현하였습니다.</p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PowerState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">powerButtonPush</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateOn</span> <span class="keyword">implements</span> <span class="title">PowerState</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerButtonPush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;전원을 종료합니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateSaving</span> <span class="keyword">implements</span> <span class="title">PowerState</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerButtonPush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;화면을 깨웁니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>다음으로는 Context를 정의하였습니다.</p><p><code>의존성 주입</code>이 필요하기 때문에 <code>abstract class</code>로 구현하여 미리 주입을 해주었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> state.PowerState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PowerState powerState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPowerState</span><span class="params">(PowerState powerState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.powerState = powerState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerButtonPush</span><span class="params">()</span></span>&#123;</span><br><span class="line">        powerState.powerButtonPush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> state.PowerState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacBook</span> <span class="keyword">extends</span> <span class="title">Laptop</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPowerState</span><span class="params">(PowerState powerState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setPowerState(powerState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerButtonPush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.powerButtonPush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>앞서 보았던 Strategy Pattern과 <code>의존성 주입</code>을 하고, setter를 통해서 <code>주입된 객체의 상태를 바꿔준다</code>는 면에서 유사한 패턴이라는 생각이 들었습니다.</p><p>Strategy Pattern은 상태에 따라 다른 전략, 알고리즘을 부여할 때 사용하고,</p><p>State Pattern은 객체의 상태에 따라 어떤 행동을 취할지 부여할 때 사용할 수 있습니다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Design Pattern" scheme="http://inwoo.github.io/categories/Design-Pattern/"/>
    
    
    <category term="State Pattern" scheme="http://inwoo.github.io/tags/State-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>1 - Docker Repository 운영</title>
    <link href="http://inwoo.github.io/11/11/dockerRegis/"/>
    <id>http://inwoo.github.io/11/11/dockerRegis/</id>
    <published>2021-11-11T14:38:03.000Z</published>
    <updated>2021-11-13T17:06:47.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><span id="more"></span><!-- excerpt --><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https://blog.kakaocdn.net/dn/bcXd2G/btrb3nCIJ66/ZraxAM9iewmZO54f9vZ8W0/img.png" alt="Docker"></p><h2 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h2><p><strong>컨테이지 이미지를 저장하는 저장소</strong></p><p>docker push 명령으로 hub에 이미지를 업로드한다.</p><p>registry에는 public한 <code>Docker Hub</code>와 private한 <code>private Registry</code>가 있다.</p><hr><h2 id="Docker-Hub-public"><a href="#Docker-Hub-public" class="headerlink" title="Docker Hub (public)"></a>Docker Hub (public)</h2><p><a href="https://huc.docker.com/">Docker Hub</a> 에서 public으로 업로드 된 이미지를 검색 및 사용할 수 있다.</p><p><code>$ docker search &quot;keyword&quot;</code>를 통해 iTerm 등에서 이미지를 검색할 수 있다.</p><blockquote><p>image 종류 : Officail Images, Verified Publisher 등</p></blockquote><p><strong>Official Images</strong><br>Docker에서 운영하고 관리하는 <code>Official Image</code>들이 담겨있다.<br><img src="/image/docker1.png" alt="Docker Official Images"></p><p>살펴보면 Docker file에 설정할 수 있는 <code>tag</code> 목록과, 사용 방법을 제공한다.<br><img src="/image/docker2.png" alt="img_2.png"></p><p><strong>Verified Publisher</strong><br>Oracle 등의 <code>vendor</code>에서 운영하고 관리하는 Image들이 담겨있다.<br><img src="/image/docker3.png" alt="Verified Publisher"></p><hr><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p><img src="/image/docker4.png" alt="Repository"></p><p>생성한 container를 <code>docker push</code>하게 되면 repository에 등록된다.<br>    - <strong>하지만 내 Repository 또한 검색을 통해 접근이 가능하다</strong><br>    -혼자만 사용할 수 있는 저장소를 갖기 위해서는 비용을 지불하여야한다.</p><h3 id="등록-방법"><a href="#등록-방법" class="headerlink" title="등록 방법"></a>등록 방법</h3><p>local에서 <code>pull</code>, <code>build</code>한 이미지를 Repository에 등록하기 위해 먼저 <strong>1.</strong> <code>login</code>이 필요하다.</p><p><strong>2.</strong> 또한 등록하기 위해서는 Repository 이름으로 설정한 문장 앞에 <code>userId/</code>을 넣어주어야한다.<br>    - 예시 : <code>inwoo/httpd:latest</code></p><p>마지막으로 <code>$ docker push [RepositoryName]</code>으로 <strong>3.</strong> push를 해준다.</p><p>실행이 성공적으로 완료되면 아래와 같이 repository에 container가 등록된다<br>    - 누구나 어디서든 다운로드가 가능하다.<br>    - private으로 전환하는 것은 1개까지는 무료이지만, 이후로는 추가비용이 소요된다.<br><img src="/image/docker6.png" alt="Docker Repository"></p><hr><h2 id="Private-Registry"><a href="#Private-Registry" class="headerlink" title="Private Registry"></a>Private Registry</h2><h3 id="사용-이유"><a href="#사용-이유" class="headerlink" title="사용 이유"></a>사용 이유</h3><p>외부 Network이 되지 않는 곳이나, 사내에서 전용으로 사용하는 registry를 운영하기 위함이다.</p><p>Docker에서 지원하는 <code>registry</code> image를 사용하여 사내 혹은 개인의 계정을 통해 private registry를 생성 및 관리할 수 있다.</p><h3 id="생성-방법"><a href="#생성-방법" class="headerlink" title="생성 방법"></a>생성 방법</h3><p><code>$ docker run -d -p 5000:5000 --restart always --name registry registry:2</code> 를 실행하면</p><p>localhost의 5000번 port를 통해 registry가 아래와 같이 동작된다.</p><p><img src="/image/docker7.png" alt="Registry 동작 중"></p><p>동작 중인 환경에서 등록하고 싶은 이미지의 이름 앞에 <code>localhost:5000</code> 또는 <code>ipName:5000</code>를 붙여서 localhost의 5000번 포트를 통해 관리되는 registry임을 명시해준다.</p><p><img src="/image/docker8.png" alt="REPOSITORY NAME"></p><p>최종적으로 <code>$ docker push localhost:5000/httpd:latest</code>를 통해 push를 해준다.</p><p><img src="/image/docker5.png" alt="Docker registry"></p><p><code>$ docker run -d -p 5000:5000 --restart always --name registry registry:2</code> 명령어를 사용하여 local registry를 실행할 수 있다.</p><h3 id="image-repository"><a href="#image-repository" class="headerlink" title="image repository"></a>image repository</h3><p><code>private registry</code>를 사용할 때는 <code>localhost:5000/ubuntu:18.04</code> 혹은 <code>docker.privateexample.com:5000/ubuntu18.04</code>등과 같이 localhost 이름, 포트 넘버 등으로 repository 이름을 설정하여야한다.</p><p>이후 <code>push</code>를 통해서 생성할 수 있다. </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://inwoo.github.io/categories/Docker/"/>
    
    
    <category term="docker registry" scheme="http://inwoo.github.io/tags/docker-registry/"/>
    
  </entry>
  
  <entry>
    <title>JPA Entity Listener 사용</title>
    <link href="http://inwoo.github.io/11/11/jpaEntityListener/"/>
    <id>http://inwoo.github.io/11/11/jpaEntityListener/</id>
    <published>2021-11-11T08:07:31.000Z</published>
    <updated>2021-11-11T08:17:10.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Entity-Listner-란"><a href="#Entity-Listner-란" class="headerlink" title="Entity Listner 란?"></a>Entity Listner 란?</h2></blockquote><p>Listener는 <code>Entity에 발생하는 Event</code>를 기반으로 동작하며, <code>Annotation</code>을 기반으로 입력한다.</p><p><strong>Pre/Post</strong> + <strong>Persist/Update/Remove/Load(post)</strong> 조합으로 구성된다.</p><p>어떤 시점에서 메서드가 실행되는 지 테스트하기 위해 아래와 같이 함수를 작성해보았다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PrePersist</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prePersist</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;===&gt; prePersist() method 호출&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostPersist</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postPersist</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;===&gt; postPersist() method 호출&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PreUpdate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;===&gt; preUpdate() method 호출&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostUpdate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;===&gt; postUpdate() method 호출&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PreRemove</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preRemove</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;===&gt; preRemove() method 호출&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostRemove</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRemove</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;===&gt; postRemove() method 호출&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PostLoad</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postLoad</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;===&gt; postLoad() method 호출&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래 코드를 통해 user를 <code>INSERT</code>(Persist)하고, findByID()로 <code>SELECT</code>(Load)하고, <code>UPDATE</code>(Update)하고, 마지막으로 <code>DELETE</code>(Remove) 해주었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listenerTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setEmail(<span class="string">&quot;inwoo2@gmail.com&quot;</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;inwoo&quot;</span>);</span><br><span class="line">    <span class="comment">// INSERT 실행</span></span><br><span class="line">    userRepository.save(user);</span><br><span class="line"></span><br><span class="line">    User user2 = userRepository.findById(<span class="number">1L</span>).orElseThrow(RuntimeException::<span class="keyword">new</span>);</span><br><span class="line">    user2.setName(<span class="string">&quot;eddy&quot;</span>);</span><br><span class="line">    userRepository.save(user2);</span><br><span class="line"></span><br><span class="line">    userRepository.deleteById(<span class="number">2L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>결과 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">===&gt; prePersist() method 호출</span><br><span class="line">Hibernate: </span><br><span class="line">    call next value <span class="keyword">for</span> hibernate_sequence</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="function">insert </span></span><br><span class="line"><span class="function">    into</span></span><br><span class="line"><span class="function">        <span class="title">user</span></span></span><br><span class="line"><span class="function">        <span class="params">(created_at, email, gender, name, updated_at, id)</span> </span></span><br><span class="line"><span class="function">    <span class="title">values</span></span></span><br><span class="line"><span class="function">        <span class="params">(?, ?, ?, ?, ?, ?)</span></span></span><br><span class="line"><span class="function"></span>===&gt; postPersist() method 호출</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_0_,</span><br><span class="line">        user0_.created_at as created_2_0_0_,</span><br><span class="line">        user0_.email as email3_0_0_,</span><br><span class="line">        user0_.gender as gender4_0_0_,</span><br><span class="line">        user0_.name as name5_0_0_,</span><br><span class="line">        user0_.updated_at as updated_6_0_0_ </span><br><span class="line">    from</span><br><span class="line">        user user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">===&gt; postLoad() method 호출</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_0_,</span><br><span class="line">        user0_.created_at as created_2_0_0_,</span><br><span class="line">        user0_.email as email3_0_0_,</span><br><span class="line">        user0_.gender as gender4_0_0_,</span><br><span class="line">        user0_.name as name5_0_0_,</span><br><span class="line">        user0_.updated_at as updated_6_0_0_ </span><br><span class="line">    from</span><br><span class="line">        user user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">===&gt; postLoad() method 호출</span><br><span class="line">===&gt; preUpdate() method 호출</span><br><span class="line">Hibernate: </span><br><span class="line">    update</span><br><span class="line">        user </span><br><span class="line">    set</span><br><span class="line">        created_at=?,</span><br><span class="line">        email=?,</span><br><span class="line">        gender=?,</span><br><span class="line">        name=?,</span><br><span class="line">        updated_at=? </span><br><span class="line">    where</span><br><span class="line">        id=?</span><br><span class="line">===&gt; postUpdate() method 호출</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_0_,</span><br><span class="line">        user0_.created_at as created_2_0_0_,</span><br><span class="line">        user0_.email as email3_0_0_,</span><br><span class="line">        user0_.gender as gender4_0_0_,</span><br><span class="line">        user0_.name as name5_0_0_,</span><br><span class="line">        user0_.updated_at as updated_6_0_0_ </span><br><span class="line">    from</span><br><span class="line">        user user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">===&gt; postLoad() method 호출</span><br><span class="line">===&gt; preRemove() method 호출</span><br><span class="line">Hibernate: </span><br><span class="line">    delete </span><br><span class="line">    from</span><br><span class="line">        user </span><br><span class="line">    where</span><br><span class="line">        id=?</span><br><span class="line">===&gt; postRemove() method 호출</span><br></pre></td></tr></table></figure></details>    <hr><blockquote><h2 id="활용"><a href="#활용" class="headerlink" title="활용"></a>활용</h2></blockquote><p>실제로는 <code>데이터베이스 오디팅</code>에 자주 사용된다. 오디팅(Auditing)이란 선택된 DB 사용자의 활동을 감시하는 프로세스이다.</p><p>Entity의 필드 값에 대한 prePersist, preUpdate가 자주 사용한다.</p><ul><li>INSERT 이전</li><li>UPDATE 이전</li></ul><h3 id="Entity에-직접-구현"><a href="#Entity에-직접-구현" class="headerlink" title="Entity에 직접 구현"></a>Entity에 직접 구현</h3><p>Entity에서 아래와 같이 객체의 <code>생성된 날짜</code>와 <code>수정 날짜</code>를 INSERT 이전, UPDATE 이전에 시행하도록 설정할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PrePersist</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prePersist</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.createdAt = LocalDate.now();</span><br><span class="line">    <span class="keyword">this</span>.updatedAt = LocalDate.now();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreUpdate</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.updatedAt = LocalDate.now();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Entity-Listener-class-구현"><a href="#Entity-Listener-class-구현" class="headerlink" title="Entity Listener class 구현"></a>Entity Listener class 구현</h3><p><strong>중복되는 코드를 방지하기위해 별도의 EntityListener class를 구현할 수도 있다.</strong></p><p>공통된 field를 가지고 있는 Entity들을 위해 Interface로 구현해주어도 된다.</p><h4 id="1-원하는-field의-getter-setter-method-를-Interface로-작성한다"><a href="#1-원하는-field의-getter-setter-method-를-Interface로-작성한다" class="headerlink" title="1. 원하는 field의 getter/setter method()를 Interface로 작성한다."></a>1. 원하는 field의 getter/setter method()를 <code>Interface</code>로 작성한다.</h4><pre><code>- 예제에서는 user의 `createdAt`, `updatedAt`을 관리한다.- 아래와 같이 interface를 구현하고 Implements하였다.- Lombok의 `@DATA`를 사용하여 override는 해주지 않아도 되지만, 변수 명에 유의하여야한다.</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Auditable</span> </span>&#123;</span><br><span class="line">    <span class="function">LocalDateTime <span class="title">getCreatedAt</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">LocalDateTime <span class="title">getUpdatedAt</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCreatedAt</span><span class="params">(LocalDateTime createdAt)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUpdatedAt</span><span class="params">(LocalDateTime updatedAt)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Auditable</span></span>&#123;</span><br></pre></td></tr></table></figure><h4 id="2-EventListner-class를-생성하고-Entity에-Annotation을-추가한다"><a href="#2-EventListner-class를-생성하고-Entity에-Annotation을-추가한다" class="headerlink" title="2. EventListner class를 생성하고, Entity에 Annotation을 추가한다."></a>2. EventListner class를 생성하고, Entity에 Annotation을 추가한다.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntityListener</span> </span>&#123;</span><br><span class="line"><span class="comment">/* 아래에서 구현 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어떠한 클래스를 Listener로 사용할 것인지 아래와 같이 추가해준다.</p><ul><li><code>@EntityListeners(value = UserEntityListener.class)</code></li></ul><p><img src="/image/entityListener.png" alt="Prameter를 지정하지 않을 시 오류 발생"></p><p>Entity를 받아서 처리를 해야하지만, 어떠한 타입인지 모르기 때문에 <code>Prameter</code>를 <code>Object</code> 객체로 지정해야한다.</p><p>따라서 아래와 같이 구현해주었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntityListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrePersist</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prePersist</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Auditable)&#123;</span><br><span class="line">            ((Auditable) o).setCreatedAt(LocalDateTime.now());</span><br><span class="line">            ((Auditable) o).setUpdatedAt(LocalDateTime.now());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreUpdate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preUpdate</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Auditable)&#123;</span><br><span class="line">            ((Auditable) o).setUpdatedAt(LocalDateTime.now());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="JPA" scheme="http://inwoo.github.io/categories/Basic/JPA/"/>
    
    
    <category term="Entity Listener" scheme="http://inwoo.github.io/tags/Entity-Listener/"/>
    
  </entry>
  
  <entry>
    <title>OSI 7 Layer</title>
    <link href="http://inwoo.github.io/11/11/0-interview-newtork1/"/>
    <id>http://inwoo.github.io/11/11/0-interview-newtork1/</id>
    <published>2021-11-11T06:05:58.000Z</published>
    <updated>2021-11-11T06:08:36.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="1-OSI-7-Layer"><a href="#1-OSI-7-Layer" class="headerlink" title="1. OSI 7 Layer"></a>1. OSI 7 Layer</h2></blockquote><p>통신 접속에서 완료까지의 과정을 7단계로 정의한 국제 통신 표준 규약</p><p><a href="https://bedongryeol.github.io/11/03/osi7layer/">OSI 7 Layer란?</a></p><p>물리 계층 : 디지털 신호를 전기 신호로 변환</p><p>데이터링크 계층 : Ethernet, Frame, 물리 계층과 데이터 계층의 연결을 담당, 헤더에 Source/Destination MAC Address</p><p>네트워크 계층 : IP, ARP 패킷, 방대한 네트워크 망에서 논리적인 연결을 할 수 있게 해줌, Source/Destination IP, 패킷 트레이서</p><p>전송 계층 : TCP, Segment, 데이터 전송을 담당, 어떤 응용프로그램에 전달해야하는지 port를 통해 식별</p><p>세션 계층 : 세션과 Dialogue 연결 및 관리, FTP를 통해 여러 파일을 받을 때, 각 다운로드는 Session으로 구분하고 연결 및 관리</p><p>표현 계층 : 응용 계층으로부터 전달받거나, 전달하는 데이터를 암호화</p><p>응용 계층 : HTTP, 네트워크 응용프로그램을 위한 인터페이스를 제공</p><blockquote><h3 id="1-1-전송-계층-프로토콜-중-TCP와-UDP의-차이점"><a href="#1-1-전송-계층-프로토콜-중-TCP와-UDP의-차이점" class="headerlink" title="1-1. 전송 계층 프로토콜 중 TCP와 UDP의 차이점"></a>1-1. 전송 계층 프로토콜 중 TCP와 UDP의 차이점</h3></blockquote><p><strong>TCP</strong></p><ul><li>연결형 프로토콜, 데이터의 전송순서 및 신뢰성 보장</li><li>Path를 만들어놓고, 송수신이 끝나면 끊는다.</li></ul><p><strong>UDP</strong></p><ul><li>비연결형 프로토콜, TCP보다 빠른 전송 속도</li><li>스트리밍, 브로드캐스팅 서비스에 사용된다.</li><li>데이터 단위 : 데이터 그램</li></ul><blockquote><h3 id="1-2-일반적으로-상대방의-MAC-주소를-알기-어려운데-어떻게-데이터를-보내는-지"><a href="#1-2-일반적으로-상대방의-MAC-주소를-알기-어려운데-어떻게-데이터를-보내는-지" class="headerlink" title="1-2. 일반적으로 상대방의 MAC 주소를 알기 어려운데 어떻게 데이터를 보내는 지"></a>1-2. 일반적으로 상대방의 MAC 주소를 알기 어려운데 어떻게 데이터를 보내는 지</h3><p>상대의 IP는 알아도 MAC은 모르는데 ARP를 통해 IP에서 MAC주소를 받아온다</p></blockquote><blockquote><h3 id="1-3-Layer를-구분한-이유"><a href="#1-3-Layer를-구분한-이유" class="headerlink" title="1-3. Layer를 구분한 이유?"></a>1-3. Layer를 구분한 이유?</h3><p>어느 부분이 잘못되었는지 파악 및 처리를 하기 위하여 계층을 구분했다.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Interview" scheme="http://inwoo.github.io/categories/Interview/"/>
    
    <category term="Network" scheme="http://inwoo.github.io/categories/Interview/Network/"/>
    
    
  </entry>
  
  <entry>
    <title>Race Condition, System call, Sub-routine</title>
    <link href="http://inwoo.github.io/11/11/0-interview-os5/"/>
    <id>http://inwoo.github.io/11/11/0-interview-os5/</id>
    <published>2021-11-11T06:05:35.000Z</published>
    <updated>2021-11-11T06:07:57.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="14-Race-Condition이란"><a href="#14-Race-Condition이란" class="headerlink" title="14. Race Condition이란?"></a>14. Race Condition이란?</h2></blockquote><p><img src="https://i.stack.imgur.com/m7HYo.png" alt="Race Condition"></p><p>두 개 이상의 프로세스가 <code>공통 자원</code>을 병행적으로 읽거나 쓸 때, 자원에 대한 접근 순서에 따라 결과가 달라지는 상황입니다.</p><p>Race Condition이 발생하게 되면, 모든 프로세스에 원하는 결과가 발생하는 것을 보장할 수 없습니다. Mutax나 Critical section을 설정함으로 해결할 수 있다.</p><blockquote><h3 id="14-1-Dead-Lock-교착-상태-과-Race-Condition-경쟁-상태-의-차이"><a href="#14-1-Dead-Lock-교착-상태-과-Race-Condition-경쟁-상태-의-차이" class="headerlink" title="14-1. Dead Lock(교착 상태)과 Race Condition(경쟁 상태)의 차이"></a>14-1. Dead Lock(교착 상태)과 Race Condition(경쟁 상태)의 차이</h3></blockquote><p><code>Dead Lock</code>은 시스템적으로 한정된 자원을 여러 곳에서 사용하려 할 때, 프로세스가 <code>자원을 얻지 못하여</code> 작업을 수행하지 못하는 상태이고, <code>Race condition</code>은 공통 자원을 병행적으로 읽고 쓸 때, 접근 순서에 따라 결과가 달라지는 상황입니다.</p><blockquote><h3 id="14-2-Race-Condition에서-발생하는-직면하는-문제-상황"><a href="#14-2-Race-Condition에서-발생하는-직면하는-문제-상황" class="headerlink" title="14-2. Race Condition에서 발생하는 직면하는 문제 상황"></a>14-2. Race Condition에서 발생하는 직면하는 문제 상황</h3></blockquote><p>교착상태 : 시스템적으로 한정된 자원을 여러 곳에서 사용하려 할 때, 프로세스가 <code>자원을 얻지 못하여</code> 작업을 수행하지 못하는 상태</p><ul><li>Mutex, Semaphore 등을 통해 해결할 수 있다.<br>기아상태 : 스레드들에게 우선 순위를 부여하여 공유 자원에 접근할 때, 우선순위가 낮은 스레드가 소외되어 아무일도 하지 못하는 상태</li><li>Bounded waiting을 통해 해결</li></ul><hr><blockquote><h2 id="15-시스템-콜과-서브-루틴의-차이"><a href="#15-시스템-콜과-서브-루틴의-차이" class="headerlink" title="15. 시스템 콜과 서브 루틴의 차이"></a>15. 시스템 콜과 서브 루틴의 차이</h2></blockquote><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Priv_rings.svg/440px-Priv_rings.svg.png" alt="Protection Ring"></p><p>서브 루틴은 개발자가 사용하는 대부분의 API이고, 이를 통해 OS와 통신할 수 있는 API인 시스템 콜을 호출합니다.</p><p>시스템 콜 호출 시에 커널이 호출되고, 커널이 수행한 결과를 역순으로 보냅니다.</p><ul><li>커널 : 하드웨어를 제어하기 위한 일종의 API</li><li>서브루틴 : 프로그래밍 시 사용하는 대부분의 API</li></ul><blockquote><h3 id="15-1-시스템-콜의-유형에-대한-설명"><a href="#15-1-시스템-콜의-유형에-대한-설명" class="headerlink" title="15-1. 시스템 콜의 유형에 대한 설명"></a>15-1. 시스템 콜의 유형에 대한 설명</h3></blockquote><p><strong>프로세스 제어</strong></p><ul><li>프로세스를 생성하여 CPU에 프로세스를 적재하거나, 중지시키고, 메모리 할당 및 해제 등</li></ul><p><strong>파일 조작</strong></p><ul><li>open, close, read, write, create, delete 등</li></ul><p><strong>장치 관리</strong></p><ul><li>I/O 작업, 논리적 부착 및 분리 등</li></ul><p><strong>정보 유지</strong></p><ul><li>시간, 날짜, 시스템 데이터의 설정, 획득 등</li></ul><p><strong>통신</strong></p><ul><li>상태 정보 전달, 메세지의 송수신 등</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Interview" scheme="http://inwoo.github.io/categories/Interview/"/>
    
    <category term="OS" scheme="http://inwoo.github.io/categories/Interview/OS/"/>
    
    
    <category term="race condition" scheme="http://inwoo.github.io/tags/race-condition/"/>
    
    <category term="system call" scheme="http://inwoo.github.io/tags/system-call/"/>
    
    <category term="subroutine" scheme="http://inwoo.github.io/tags/subroutine/"/>
    
  </entry>
  
  <entry>
    <title>Context Switching, 스레드 수준, fork()</title>
    <link href="http://inwoo.github.io/11/10/0-interview-os4/"/>
    <id>http://inwoo.github.io/11/10/0-interview-os4/</id>
    <published>2021-11-10T13:24:19.000Z</published>
    <updated>2021-11-10T13:27:01.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="11-Context-Switching-이란"><a href="#11-Context-Switching-이란" class="headerlink" title="11. Context Switching 이란?"></a>11. Context Switching 이란?</h2></blockquote><p>하나의 프로세스가 CPU를 사용 중인 상태에서, 다른 프로세스가 CPU를 점유하려고 할 때,</p><p>사용 중인 프로세스의 context를 PCB에 저장하고, 새로운 프로세스 의 상태를 CPU에 적재하는 작업</p><h3 id="11-1-PCB의-저장-위치"><a href="#11-1-PCB의-저장-위치" class="headerlink" title="11-1. PCB의 저장 위치"></a>11-1. PCB의 저장 위치</h3><p>PCB는 중요 정보를 담고있기 때문에, 일반 사용자가 접근할 수 없는 보호된 메모리에 저장한다.</p><p>일부 OS에서는 안전하고, 편리한 커널의 스택 첫 부분에 저장을 한다.</p><h3 id="11-2-PC-Program-Counter-이란"><a href="#11-2-PC-Program-Counter-이란" class="headerlink" title="11-2. PC(Program Counter) 이란?"></a>11-2. PC(Program Counter) 이란?</h3><p>CPU 내부의 레지스터 중 하나로, 다음에 실행될 명령어의 주소를 가지고 있다.</p><p>명령 주기에 따라 자동으로 증가하고, 반복문 등에서는 다음 코드가 아닌 새로운 코드의 위치 값이 들어간다.</p><hr><blockquote><h2 id="12-사용자-수준-스레드와-커널-수준-스레드의-차이"><a href="#12-사용자-수준-스레드와-커널-수준-스레드의-차이" class="headerlink" title="12. 사용자 수준 스레드와 커널 수준 스레드의 차이"></a>12. 사용자 수준 스레드와 커널 수준 스레드의 차이</h2></blockquote><p>커널 수준 스레드는 OS에서 생성하고, 관리하는 스레드이고, 사용자 수준 스레드는 라이브러리 등을 통해 사용자가 생성한 스레드다.</p><p>영역을 나눠줌으로써 코드 단에서 critical 한 systemcall(중요 파일에 대해 파일삭제 등)을 날리면 커널에서 막아준다.</p><p><strong>사용자 수준 스레드</strong></p><ul><li>장점</li><li>kernel에 접근하지 않기 때문에, context switching이 없다. 따라서 커널 스레드에 비해 오버헤드가 적다.</li><li>라이브러리를 통해 스케줄링을 제어하여 유연한 스케줄링 가능</li><li>단점</li><li>한 스레드가 block되면 모든 스레드가 실행 불가 상태가 된다.</li><li>커널 수준의 보호 방법을 사용할 수 없다.</li></ul><p><strong>커널 수준 스레드</strong></p><ul><li>장점</li><li>각 스레드들을 독립적으로 관리할 수 있고, 멀티 프로세서를 활용할 수 있다.</li><li>한 스레드가 block돼도 다른 스레드들은 실행시킬 수 있다.</li><li>단점</li><li>context switching으로 인한 오버헤드</li></ul><h3 id="12-1-멀티-프로세싱과-멀티-프로그래밍의-차이"><a href="#12-1-멀티-프로세싱과-멀티-프로그래밍의-차이" class="headerlink" title="12-1. 멀티 프로세싱과 멀티 프로그래밍의 차이"></a>12-1. 멀티 프로세싱과 멀티 프로그래밍의 차이</h3><p>멀티 프로세싱</p><ul><li>여러 개의 CPU가 협력적으로 일을 처리하는 것</li><li>fork를 통해 프로세스를 여러 개로 늘려, 여러 프로그램을 병렬로 처리</li></ul><p>멀티 프로그래밍</p><ul><li>한 프로그램이 대기 상태일 때, 다른 프로그램을 수행하는 것</li></ul><p>멀티 태스킹</p><ul><li>OS의 스케줄링을 통해 task를 번갈아가며 수행하는 것</li><li>task를 자주 번갈아가며 수행하여 동시에 수행하고 있다고 느낀다.</li></ul><p>멀티 스레딩</p><ul><li>하나의 프로세스를 여러 개의 스레드끼리 자원을 공유하여 처리하는 것</li><li>하나의 프로그램을 병렬로 처리</li></ul><hr><blockquote><h2 id="13-fork-와-vfork-의-차이점"><a href="#13-fork-와-vfork-의-차이점" class="headerlink" title="13. fork()와 vfork()의 차이점"></a>13. fork()와 vfork()의 차이점</h2></blockquote><p>자식 프로세스를 생성하는 시스템콜이다.</p><p>fork()는 부모 프로세스의 메모리를 복사해서 사용하지만, vfork()는 부모 프로세스의 메모리를 공유한다.</p><p>fork()를 실행하고 자식 프로세스에 변경사항이 생기면 독립적인 주소 공간을 생성시킨다.</p><p>vfork()는 fork()에 비해 생성 속도가 빠르지만, 자원을 공유하기 때문에 <code>race condition</code>이 발생하지 않도록 자식 프로세스가 부모 프로세스를 exit하거나 실행될 때까지 block 해야한다.</p><h3 id="13-1-스레드의-저장-위치"><a href="#13-1-스레드의-저장-위치" class="headerlink" title="13-1. 스레드의 저장 위치"></a>13-1. 스레드의 저장 위치</h3><p>PCB 내부에 Thread Control Block에 저장한다.</p><p>멀티 프로세스에서는 둘 다 교환해준다.</p><h3 id="13-2-오버헤드"><a href="#13-2-오버헤드" class="headerlink" title="13-2. 오버헤드"></a>13-2. 오버헤드</h3><p>어떤 처리를 하기 위해 소요되는 처리시간, 메모리 등을 말한다.</p><h3 id="13-3-혼합-스레드"><a href="#13-3-혼합-스레드" class="headerlink" title="13-3. 혼합 스레드"></a>13-3. 혼합 스레드</h3><p>N:M 매핑을 통해 사용자 수준의 스레드</p><p>오버헤드 측면에서 <code>thread pooling</code>으로 보완가능</p><h3 id="13-4-vfork-를-할-때-공유-자원에-대한-conflict-회피할-수-있는-방법"><a href="#13-4-vfork-를-할-때-공유-자원에-대한-conflict-회피할-수-있는-방법" class="headerlink" title="13-4. vfork()를 할 때 공유 자원에 대한 conflict 회피할 수 있는 방법"></a>13-4. vfork()를 할 때 공유 자원에 대한 conflict 회피할 수 있는 방법</h3><p>=&gt; copyOnWrite() &gt; COW</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Interview" scheme="http://inwoo.github.io/categories/Interview/"/>
    
    <category term="OS" scheme="http://inwoo.github.io/categories/Interview/OS/"/>
    
    
  </entry>
  
  <entry>
    <title>JPA Entity 관련 Annotation</title>
    <link href="http://inwoo.github.io/11/10/jpaAnnotation/"/>
    <id>http://inwoo.github.io/11/10/jpaAnnotation/</id>
    <published>2021-11-10T12:58:39.000Z</published>
    <updated>2021-11-10T13:11:51.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h3 id="Enumerate"><a href="#Enumerate" class="headerlink" title="@Enumerate"></a>@Enumerate</h3><blockquote><p>Enumerate는 JPA에 사용 시 명확히 설정하지 않으면 예기치 못한 에러를 초래할 수 있다.</p></blockquote><p>예를 들어 아래와 같이 Gender enum을 만들었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MALE,</span><br><span class="line"></span><br><span class="line">    FEMALE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Entity에 Gender field를 추가하고 테스트 코드를 통해 확인해보자.</p><p>UserRepository 인터페이스에 <code>@Query</code>를 통해 findRowRecord()라는 custom 쿼리를 작성하였으므로 참고하길 바란다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;select * from user limit 1&quot;, nativeQuery = true)</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">findRowRecord</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enumTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = userRepository.findById(<span class="number">1L</span>).orElseThrow(RuntimeException::<span class="keyword">new</span>);</span><br><span class="line">    user.setGender(Gender.MALE);</span><br><span class="line">    userRepository.save(user);</span><br><span class="line"></span><br><span class="line">    userRepository.findAll().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(userRepository.findRowRecord(<span class="number">1L</span>).get(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/enum1.png" alt="Enumerate ORDINAL"><br>그 결과 위와 같이 <code>findAll()</code>을 해서 조회할 때는 gender=MALE로 입력이 돼었지만, gender의 값을 조회하면 0이라는 값이 나온다.</p><p><img src="/image/enum2.png" alt="EnumType defaule값"><br>Enumerate의 <code>EnumType</code>의 default 값은 <code>ORDINAL</code>이다. zero-base로 값의 index를 설정한다.</p><p>위에서 MALE이 0번째로 설정되어 0이 출력된 것이다.</p><blockquote><h4 id="ORDINAL을-사용하면-추후에-Enum-내의-순서가-바뀌면-index값이-달라지게-되고-에러를-초래할-수-있다"><a href="#ORDINAL을-사용하면-추후에-Enum-내의-순서가-바뀌면-index값이-달라지게-되고-에러를-초래할-수-있다" class="headerlink" title="ORDINAL을 사용하면 추후에 Enum 내의 순서가 바뀌면 index값이 달라지게 되고 에러를 초래할 수 있다."></a>ORDINAL을 사용하면 추후에 Enum 내의 순서가 바뀌면 index값이 달라지게 되고 에러를 초래할 수 있다.</h4></blockquote><p><img src="/image/enum3.png" alt="Enumerate String"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### @Table</span><br><span class="line"></span><br><span class="line">`테이블과 관련된` Annotation으로 이름, Index, 제약조건 등을 설정할 수 있다.</span><br><span class="line"></span><br><span class="line">uniqueConstraints는 여러 column을 사용해 `unique한 복합 column`을 생성하도록 한다.</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Table(name = &quot;user&quot;, </span><br><span class="line">   indexes = &#123;@Index(columnList=&quot;name&quot;)&#125;, </span><br><span class="line">   uniqueConstraints = &#123;@UniqueConstraint(columnNames = &quot;email&quot;)&#125;)</span><br></pre></td></tr></table></figure><h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><p>Field의 각 속성을 지정하는 <code>Field-scope</code>의 Annotation이다.</p><p>과거에는 Column 이름을 모음을 제거하고 설정하는 경우가 많았다. Field name과 Column name을 분리하기 위해 사용된다.</p><p><code>nullable</code> 속성도 자주 사용된다. <code>DDL</code>을 호출할 때 <code>not null column</code>을 만들기 위해 설정한다.</p><ul><li><strong>일반적인 조회 쿼리에서 validation을 하지 않는다.</strong></li></ul><p>Column이 단독적으로 <code>unique</code>해야 한다면 @Column의 속성에 추가할 수 있다.</p><p><code>insertable</code>, <code>updateable</code> 속성은 DDL 외에 DML에도 영향을 받는다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column(name = &quot;crtdat&quot;, nullable = false)</span></span><br><span class="line"><span class="keyword">private</span> LocalDate createdAt;</span><br></pre></td></tr></table></figure><hr><h3 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h3><p>Transient는 JPA의 Entity에서 DB의 column외의 <code>추가 field</code>를 갖고 싶을 때 추가해준다.</p><p>아래와 같이 설정하면 쿼리문을 실행할 때 DB에 반영되지 않고, JPA에서만 사용된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> String secret;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="JPA" scheme="http://inwoo.github.io/categories/Basic/JPA/"/>
    
    
    <category term="JPA Annotation" scheme="http://inwoo.github.io/tags/JPA-Annotation/"/>
    
  </entry>
  
  <entry>
    <title>Spring - 비동기 처리 (async)</title>
    <link href="http://inwoo.github.io/11/09/async/"/>
    <id>http://inwoo.github.io/11/09/async/</id>
    <published>2021-11-09T11:11:06.000Z</published>
    <updated>2021-11-09T12:08:43.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="비동기적-Asynchronous-이란"><a href="#비동기적-Asynchronous-이란" class="headerlink" title="비동기적 (Asynchronous) 이란 ?"></a>비동기적 (Asynchronous) 이란 ?</h2><p><img src="https://media.vlpt.us/images/dorazi/post/dadf63e9-5994-4967-bc3f-ca0bc173897c/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-03-31%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%202.29.45.png" alt="image"></p></blockquote><p>비동기는 요청과 결과가 동시에 일어나지 않는 것입니다.</p><p>위에서 Synchronous 처리는 다른 처리가 끝나야 다른 task를 시작하기 시작합니다.</p><p>반면에 <code>Asynchronous</code>는 다른 작업이 끝나기를 기다리지 않고 또 다른 작업을 수행할 수 있습니다.  </p><p>Web MVC에서는 많이 활용되고 있지는 않습니다.</p><p>Spring에서는 <code>CompletableFuture</code>를 통해 비동기 처리를 할 수 있다.</p><h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h3><p><code>CompletableFuture</code>는 java util에서 제공하는 클래스로 <code>Future</code>과 <code>CompletionStage</code> 인터페이스를 Implements합니다.</p><p>쓰레드를 직접 생성하지 않고, 미리 저장해둔 thread 관련 configure을 통해 호출할 수 있습니다.</p><h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><p>비동기적 연산의 결과를 표현하는 인터페이스입니다.</p><p>멀티 쓰레드 환경에서 처리된 <code>데이터를 다른 쓰레드에 전달</code>할 수 있고, <code>Thread-Safe</code>합니다.</p><hr><blockquote><h2 id="Spring의-비동기-처리"><a href="#Spring의-비동기-처리" class="headerlink" title="Spring의 비동기 처리"></a>Spring의 비동기 처리</h2></blockquote><p>Spring MVC 3.2 버전 이후부터 Servlet 3.0 기반의 비동기 처리가 가능합니다.</p><p>Spring에서는 <code>annotation</code>을 통해 메서드를 비동기적으로 호출할 수 있습니다.</p><h3 id="1-Main-클래스에-EnableAsync-Annotation-추가"><a href="#1-Main-클래스에-EnableAsync-Annotation-추가" class="headerlink" title="1. Main 클래스에 @EnableAsync Annotation 추가"></a>1. Main 클래스에 <code>@EnableAsync</code> Annotation 추가</h3><p>비동기 처리를 사용하기 위해서 <code>@SpringBootApplication</code>이 명시된 곳에 <code>@EnableAsync</code>를 추가해 주어야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AsyncTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ThreadPoolTaskExecutor-구현"><a href="#2-ThreadPoolTaskExecutor-구현" class="headerlink" title="2. ThreadPoolTaskExecutor 구현"></a>2. ThreadPoolTaskExecutor 구현</h3><p>필수적인 것은 아니지만 서버를 개발함에 있어서 traffic을 예상하여 미리 Thread를 할당해주는 방법이 좋다고 생각합니다.</p><p><code>ThreadPoolTaskExecutor</code> 클래스를 통해 Thread Pool의 <code>Max Size</code>, <code>Core Pool Size</code>, <code>Queue Capacity</code>, <code>Thread Name Prefix</code> 등을 설정할 수 있습니다.</p><p><code>Core Pool Size</code>(동시 실행 가능한 쓰레드 개수)에 설정한 쓰레드 풀의 크기를 초과하는 task가 들어오면 <code>Queue Capacity</code>에 task가 쌓입니다.</p><p>이 때 Queue Capacity에 최대 <code>Max Pool Size</code>에 설정한만큼 task를 보관할 수 있습니다.</p><p>이를 통해 호출된 Thread에는 Async-라는 이름이 붙도록 <code>prefix</code>를 설정해주었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;async-thread&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">asyncConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor tpte = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        tpte.setMaxPoolSize(<span class="number">100</span>);</span><br><span class="line">        tpte.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        tpte.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">        tpte.setThreadNamePrefix(<span class="string">&quot;Async-&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> tpte;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Service-단에서-사용"><a href="#3-Service-단에서-사용" class="headerlink" title="3. Service 단에서 사용"></a>3. Service 단에서 사용</h3><p>메서드에 <code>@Async</code>라는 Annotation을 붙이고, 위에서 지정한 <strong>Bean의 id</strong>를 통해 사용할 Thread Pool을 설정하였습니다.</p><p>서비스 로직(hello)을 작성하여 CompletableFuture를 return하는 메서드에 넣어주었습니다.</p><p>여기서 <code>AsyncResult</code>는 비동기처리를위해 Future를 리턴하는 메서드의 <code>method signature</code>로 사용되는 handlerdlek.<br>    - method signature : 메서드 이름과, 파라미터에 관해 약속된 메서드 생성 규칙</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(&quot;async-thread&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult(hello()).completable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                log.info(<span class="string">&quot;Thread Sleeping..&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;service hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이후에 추가적으로 <code>Controller</code>에서 Service Class를 의존성 주입하고, run()메서드를 호출하면 비동기 처리가 가능합니다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Spring" scheme="http://inwoo.github.io/categories/Basic/Spring/"/>
    
    
    <category term="비동기" scheme="http://inwoo.github.io/tags/%EB%B9%84%EB%8F%99%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>TCP Protocol</title>
    <link href="http://inwoo.github.io/11/03/tcpProtocol/"/>
    <id>http://inwoo.github.io/11/03/tcpProtocol/</id>
    <published>2021-11-03T14:33:15.000Z</published>
    <updated>2021-11-03T14:37:15.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="TCP-Header"><a href="#TCP-Header" class="headerlink" title="TCP Header"></a>TCP Header</h2></blockquote><h3 id="Port-정보"><a href="#Port-정보" class="headerlink" title="Port 정보"></a>Port 정보</h3><ul><li><p>TCP는 포트를 통해 통신하므로 Source, Destination Port를 가지고 있다.</p></li><li><p><strong>16bit</strong></p></li><li><p>데이터를 전송할 때 데이터를 순서에 맞게 나눠서 전송하는데 이를 위한 Sequence Number도 있다.</p></li></ul><h3 id="Ack-Number"><a href="#Ack-Number" class="headerlink" title="Ack Number"></a>Ack Number</h3><ul><li>잘 받았는지 확인하기 위한 정보</li></ul><h3 id="Code-Bits"><a href="#Code-Bits" class="headerlink" title="Code Bits"></a>Code Bits</h3><ul><li>URG, ACK, PSH, RST, SYN, FIN</li></ul><hr><blockquote><h2 id="TCP-3-way-handshake-연결"><a href="#TCP-3-way-handshake-연결" class="headerlink" title="TCP 3-way-handshake (연결)"></a>TCP 3-way-handshake (연결)</h2></blockquote><p>Server에 Connect하면 sync를 1로해서 보낸다.</p><p>seq에 1을 더해서 ack을 설정한 뒤 접속한다.</p><blockquote><h2 id="TCP-4-way-handshake-연결-해제"><a href="#TCP-4-way-handshake-연결-해제" class="headerlink" title="TCP 4-way-handshake (연결 해제)"></a>TCP 4-way-handshake (연결 해제)</h2></blockquote><p>Client에서 FIN을 1로 해서 보내고, Server에서 ACK를 1을 주고, 잠시 후에 FIN을 1로 보내고<br>마지막으로 Cli에서 FIN 1을 보낸다.</p><p>port가 사용중이라하면 4th 과정에서 응답을 안해줘서 그럴 수도 있다.</p><hr><blockquote><h2 id="전송"><a href="#전송" class="headerlink" title="전송"></a>전송</h2></blockquote><p>header에 Len 인자에 데이터 길이를 넣어서 보낸다.</p><p>2GB 파일을 패킷의 최대 크기인 1500KB???로 나눠서 보내는데,, ,</p><p>len : 전체 데이터의 길이</p><p>ACK = seq + len(데이터 길이)</p><blockquote><h2 id="제어"><a href="#제어" class="headerlink" title="제어"></a>제어</h2></blockquote><p>수도관처럼 시간 당 보낼 수 있는 양에 한계가 있다.</p><p>적절하게 전송해줘야 유실되지않고, 정확이 도착할 것이다.</p><p>네트워크 트래픽에 따른 효율적/신뢰적 송신을 위한 제어 알고리즘 적용</p><hr><blockquote><h2 id="흐름-제어-Flow-Control"><a href="#흐름-제어-Flow-Control" class="headerlink" title="흐름 제어(Flow Control)"></a>흐름 제어(Flow Control)</h2></blockquote><p>End to End 컴퓨터의 성능을 자동으로 detect해서 전송한다.<br><strong>Sliding Window</strong> 알고리즘을 통해 알맞게 흐름량을 제어해준다.</p><h3 id="Sliding-window"><a href="#Sliding-window" class="headerlink" title="Sliding window"></a>Sliding window</h3><p>송신자와 수신자가 한 번에 주고 받을 수 있는 양의 minimum을 선택하여 window size로 정한다.</p><p><strong>SYN와 SYN/ACK 사이의 시간인 RTT를 기반으로 window size를 재설정해줘서 mininum보다 더 큰 값으로 설정된다.</strong></p><p>ACK를 받지 못해도 window size만큼 데이터를 보낸다.</p><p>ACK를 받으면 한 칸씩 sliding하며 window를 옮겨준다. =&gt; ACK을 받은 만큼 데이터를 또 전송할 수 있다.</p><ul><li>과거에는 Stop and Wait 방식을 사용해서 각 패킷마다 번호를 할당하고, 한 패킷이 보내질 때 이에 대한 ACK가 돌아와야 다른 패킷을 전송했다.</li></ul><hr><blockquote><h2 id="혼잡-제어-Congestion-Control"><a href="#혼잡-제어-Congestion-Control" class="headerlink" title="혼잡 제어(Congestion Control)"></a>혼잡 제어(Congestion Control)</h2></blockquote><p>다양한 망을 타고 데이터가 전송 될 때, 망의 traffic을 고려해서 알맞게 데이터 양을 설정하는 알고리즘</p><h3 id="Congestion-window-초기값"><a href="#Congestion-window-초기값" class="headerlink" title="Congestion window 초기값"></a>Congestion window 초기값</h3><ul><li>1 MSS (기본 단위)</li><li>한 번에 데이터를 보낼 수 있는 크기</li><li>MSS = MTU - (IP 헤더 길이) - (TCP 헤더 길이)<ul><li>보통 1500 - 20 - 20 =. 460</li></ul></li></ul><h3 id="AIMD-Additive-Increase-Multicative-Decrease"><a href="#AIMD-Additive-Increase-Multicative-Decrease" class="headerlink" title="AIMD(Additive Increase/Multicative Decrease)"></a>AIMD(Additive Increase/Multicative Decrease)</h3><ul><li>지속적으로 증가시키다가 트래픽이 안오면 절반으로 감소시키고, 들어오면 다시 증가시키는 알고리즘</li><li>처음 CWND = 1</li><li>패킷 전송이 성공하여 <strong>ACK가 도착하면 CWND += 1</strong></li><li><strong>도착하지않으면 CWND /= 2</strong></li></ul><h3 id="Slow-Start"><a href="#Slow-Start" class="headerlink" title="Slow Start"></a>Slow Start</h3><ul><li>처음 CWND = 1</li><li>패킷 전송이 성공하여 *<em>ACK가 도착하면 CWND <em>= 2</em></em></li><li><strong>도착하지않으면 CWND = 1</strong></li></ul><h3 id="Congestion-Avoidance"><a href="#Congestion-Avoidance" class="headerlink" title="Congestion Avoidance"></a>Congestion Avoidance</h3><ul><li>CWND가 일정 크기에 도달하고, ACK가 도착하면 CWND += 1</li></ul><hr><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><blockquote><h2 id="UDP-란"><a href="#UDP-란" class="headerlink" title="UDP 란?"></a>UDP 란?</h2></blockquote><p>UDP는 User Datagram protocol로 사용자 데이터그램 프로토콜이다.</p><p>TCP와 달리 <strong>브로드캐스팅 지원</strong>을 해주고, <strong>신뢰성이 없기 때문에</strong> 데이터의 유실이 일부있어도 문제 없고, 속도가 필요한 동영상 스트리밍 등의 서비스에서 많이 사용된다.</p><p>헤더도 TCP에 비해 단순하여 비교적 가볍다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Web &amp; Network" scheme="http://inwoo.github.io/categories/Basic/Web-Network/"/>
    
    
  </entry>
  
  <entry>
    <title>OSI 7 Layer</title>
    <link href="http://inwoo.github.io/11/03/osi7layer/"/>
    <id>http://inwoo.github.io/11/03/osi7layer/</id>
    <published>2021-11-03T14:32:47.000Z</published>
    <updated>2021-11-03T14:35:47.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p><img src="https://media.vlpt.us/images/realiron/post/e39bf9c2-b652-4ac9-a3d9-6d651e77ec32/The_7_Layers_of_OSI.png" alt="img"></p><p>여러 프로토콜이 Data에 계속해서 각각의 header를 붙여서 헤더와 정보를 구성한다.</p><ul><li>Application-&gt;Presentation-&gt;Session-&gt;Transport-&gt;Network-&gt;DataLink-&gt;Physical</li><li>이전 계층의 header도 하나의 데이터로 취급한다.</li></ul><p>LAN 카드를 통해 헤더와 데이터를 보내고, 전송받은 곳에서는 역순으로 헤더를 check하고 떼어낸다.</p><ul><li>배열에서 인덱스 0번의 데이터를 제외하고 slicing하는 모습과 유사하다.</li></ul><h3 id="캡슐화와-역캡슐화"><a href="#캡슐화와-역캡슐화" class="headerlink" title="+ 캡슐화와 역캡슐화"></a>+ 캡슐화와 역캡슐화</h3><h4 id="송신측에서-데이터에-header를-붙이고-캡슐화를-한다"><a href="#송신측에서-데이터에-header를-붙이고-캡슐화를-한다" class="headerlink" title="송신측에서 데이터에 header를 붙이고, 캡슐화를 한다."></a>송신측에서 데이터에 header를 붙이고, 캡슐화를 한다.</h4><h4 id="수신측에서는-역캡슐화하여-각-계층의-header에-해당하는-데이터를-제외시킨다"><a href="#수신측에서는-역캡슐화하여-각-계층의-header에-해당하는-데이터를-제외시킨다" class="headerlink" title="수신측에서는 역캡슐화하여 각 계층의 header에 해당하는 데이터를 제외시킨다."></a>수신측에서는 역캡슐화하여 각 계층의 header에 해당하는 데이터를 제외시킨다.</h4><hr><h3 id="Application-Layer-응용-계층"><a href="#Application-Layer-응용-계층" class="headerlink" title="Application Layer (응용 계층)"></a>Application Layer (응용 계층)</h3><p><strong>대표적인 프로토콜 : HTTP</strong><br>네트워크 응용프로그램을 위한 인터페이스를 제공한다.</p><h3 id="Presentation-Layer-표현-계층"><a href="#Presentation-Layer-표현-계층" class="headerlink" title="Presentation Layer (표현 계층)"></a>Presentation Layer (표현 계층)</h3><p>응용 계층으로부터 전달받거나, 전달해야하는 데이터의 암호화를 담당한다.</p><ul><li>Http와 https의 차이는 암호화에 있다.</li></ul><h3 id="Session-Layer-세션-계층"><a href="#Session-Layer-세션-계층" class="headerlink" title="Session Layer (세션 계층)"></a>Session Layer (세션 계층)</h3><p>세션 및 Dialogue 연결 및 관리를 담당한다.</p><p>FTP를 통해 여러 파일을 다운로드 받을 때, 각 다운로드를 Session으로 구분하여 연결하고 관리한다.</p><h3 id="Transport-Layer-전송-계층"><a href="#Transport-Layer-전송-계층" class="headerlink" title="Transport Layer (전송 계층)"></a>Transport Layer (전송 계층)</h3><p><strong>대표적인 프로토콜 : TCP</strong><br><strong>데이터 단위 : segment</strong></p><p>목적지에 신뢰할 수 있는 데이터 전달을 담당한다.</p><p>목적지의 어떤 응용 프로그램에 데이터를 전달해야하는지 <strong>포트를 통해 식별</strong>할 수 있다.</p><h4 id="TCP-vs-UDP"><a href="#TCP-vs-UDP" class="headerlink" title="TCP vs UDP"></a>TCP vs UDP</h4><p><strong>TCP</strong></p><ul><li>연결형 프로토콜, 데이터의 전송순서 및 신뢰성 보장</li><li>Path를 만들어놓고, 송수신이 끝나면 끊는다.</li></ul><p><strong>UDP</strong></p><ul><li>비연결형 프로토콜, TCP보다 빠른 전송 속도</li><li>스트리밍, 브로드캐스팅 서비스에 사용된다.</li><li>데이터 단위 : 데이터 그램</li></ul><h3 id="Network-Layer-네트워크-계층"><a href="#Network-Layer-네트워크-계층" class="headerlink" title="Network Layer (네트워크 계층)"></a>Network Layer (네트워크 계층)</h3><p><strong>대표적인 프로토콜 : IP</strong><br><strong>데이터 단위 : packet</strong></p><p>다양하고, 방대한 네트워크 상에서, 컴퓨터의 논리적인 연결을 할 수 있게 해준다.</p><p>Source, Destination IP Address를 가지고 있다.</p><h3 id="Data-Link-Layer-데이터-링크-계층"><a href="#Data-Link-Layer-데이터-링크-계층" class="headerlink" title="Data Link Layer (데이터 링크 계층)"></a>Data Link Layer (데이터 링크 계층)</h3><p><strong>대표적인 프로토콜 : Ethernet</strong><br><strong>데이터 단위 : Frame</strong></p><p>물리적 네트워크 사이의 데이터 송, 수신을 담당한다.</p><p>Ethernet 헤더는 Source, Destination MAC address 정보를 담고있다.</p><ul><li>각 하드웨어는 유일한 MAC Address를 가지고있다.</li></ul><h3 id="Physical-Layer-물리-계층"><a href="#Physical-Layer-물리-계층" class="headerlink" title="Physical Layer (물리 계층)"></a>Physical Layer (물리 계층)</h3><p>디지털은 0, 1로 데이터를 주고 받지만, 아날로그 신호는 주파수에 데이터를 실어서 송수신한다.<br>물리 계층에서는 디지털 신호를 전기 신호로 변환하여 송수신한다.</p><hr><blockquote><h2 id="TCP-IP-모델"><a href="#TCP-IP-모델" class="headerlink" title="TCP/IP 모델"></a>TCP/IP 모델</h2></blockquote><p><img src="https://user-images.githubusercontent.com/24274424/86514723-94b77900-be4e-11ea-8456-ad39b27d9ba9.png" alt="img"></p><p>인터넷 통신을 위한 모델이다.</p><p>전송계층과, 인터넷(네트워크) 계층은 그래도 존재한다.</p><p>물리, 데이터링크 계층은 네트워크 접속 계층으로, 세션, 표현, 응용 계층은 응용 계층으로 처리한다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Basic" scheme="http://inwoo.github.io/categories/Basic/"/>
    
    <category term="Web &amp; Network" scheme="http://inwoo.github.io/categories/Basic/Web-Network/"/>
    
    
  </entry>
  
</feed>
