<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TroubleShooting SpringBoot와 data.sql 충돌</title>
      <link href="/11/03/jpaTroubleShooting/"/>
      <url>/11/03/jpaTroubleShooting/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><h3 id="해결-방안을-얻고-싶은-분은-이-부분만-참고하시면-됩니다"><a href="#해결-방안을-얻고-싶은-분은-이-부분만-참고하시면-됩니다" class="headerlink" title="해결 방안을 얻고 싶은 분은 이 부분만 참고하시면 됩니다."></a>해결 방안을 얻고 싶은 분은 이 부분만 참고하시면 됩니다.</h3></blockquote><h3 id="Spring-Boot-2-5-버전-이상에서-h2-DB를-통한-테스트를-실행할-때"><a href="#Spring-Boot-2-5-버전-이상에서-h2-DB를-통한-테스트를-실행할-때" class="headerlink" title="Spring Boot 2.5 버전 이상에서 h2 DB를 통한 테스트를 실행할 때,"></a>Spring Boot 2.5 버전 이상에서 h2 DB를 통한 테스트를 실행할 때,</h3><h4 id="1-SQL의-Column은-grave-accent-로-감싸고-Value는-39-single-quote-로-감쌌는지-확인"><a href="#1-SQL의-Column은-grave-accent-로-감싸고-Value는-39-single-quote-로-감쌌는지-확인" class="headerlink" title="1. SQL의 Column은 `(grave accent)로 감싸고, Value는 &#39;(single quote)로 감쌌는지 확인"></a>1. <code>SQL의 Column은 `(grave accent)로 감싸고, Value는 &#39;(single quote)로 감쌌는지 확인</code></h4><h4 id="2-yml파일에-spring-jpa-defer-datasource-initialization-true-추가하기"><a href="#2-yml파일에-spring-jpa-defer-datasource-initialization-true-추가하기" class="headerlink" title="2. yml파일에 spring:jpa:defer-datasource-initialization: true 추가하기"></a>2. <code>yml파일에 spring:jpa:defer-datasource-initialization: true 추가하기</code></h4><hr><blockquote><h2 id="발단"><a href="#발단" class="headerlink" title="발단"></a>발단</h2></blockquote><h4 id="1-Spring-Boot에서-sql파일을-생성하고-JPA-연동을-통해-데이터가-잘-로드되는지-간단한-테스트를-하기위해-프로젝트를-생성했다"><a href="#1-Spring-Boot에서-sql파일을-생성하고-JPA-연동을-통해-데이터가-잘-로드되는지-간단한-테스트를-하기위해-프로젝트를-생성했다" class="headerlink" title="1. Spring Boot에서 sql파일을 생성하고, JPA 연동을 통해 데이터가 잘 로드되는지 간단한 테스트를 하기위해 프로젝트를 생성했다."></a>1. Spring Boot에서 sql파일을 생성하고, <code>JPA 연동을 통해</code> 데이터가 잘 로드되는지 간단한 테스트를 하기위해 프로젝트를 생성했다.</h4><details><summary>build.gradle 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.5.6&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="string">&#x27;1.0.11.RELEASE&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&#x27;com.inwoo.jpa&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line">sourceCompatibility = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    compileOnly &#123;</span><br><span class="line">        extendsFrom annotationProcessor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-data-jpa&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span></span><br><span class="line">    compileOnly <span class="string">&#x27;org.projectlombok:lombok&#x27;</span></span><br><span class="line">    runtimeOnly <span class="string">&#x27;com.h2database:h2&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;org.projectlombok:lombok&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h4 id="2-main-폴더-하위에-JpaRepository를-상속받은-repo를-생성하고-test폴더-하위-resource-폴더-내에-data-sql-파일을-생성하였다"><a href="#2-main-폴더-하위에-JpaRepository를-상속받은-repo를-생성하고-test폴더-하위-resource-폴더-내에-data-sql-파일을-생성하였다" class="headerlink" title="2. main 폴더 하위에 JpaRepository를 상속받은 repo를 생성하고, test폴더 하위 resource 폴더 내에 data.sql 파일을 생성하였다."></a>2. main 폴더 하위에 JpaRepository를 상속받은 repo를 생성하고, test폴더 하위 resource 폴더 내에 data.sql 파일을 생성하였다.</h4><p>Primary Key인 id 증가를 위해 <code>call next value for hibernate_sequence;</code> 코드를 추가해주었다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;INWOO&#x27;</span>, <span class="string">&#x27;INWOO@NAVER.COM&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;DENNIS&#x27;</span>, <span class="string">&#x27;DENNIS@NAVER.COM&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;SOPHIA&#x27;</span>, <span class="string">&#x27;SOPHIA@GOOGLE.COM&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">4</span>, <span class="string">&#x27;JAMES&#x27;</span>, <span class="string">&#x27;JAMES@GMAIL.COM&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>) <span class="keyword">values</span> (<span class="number">5</span>, <span class="string">&#x27;INWOO&#x27;</span>, <span class="string">&#x27;inwoo@gmail.com&#x27;</span>, now(), now());</span><br></pre></td></tr></table></figure><h4 id="3-Test-코드에-repo를-DI한-후-crud-테스트를-진행하였다"><a href="#3-Test-코드에-repo를-DI한-후-crud-테스트를-진행하였다" class="headerlink" title="3. Test 코드에 repo를 DI한 후 crud 테스트를 진행하였다."></a>3. Test 코드에 repo를 DI한 후 crud 테스트를 진행하였다.</h4><hr><blockquote><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2></blockquote><h3 id="BeanCreationException-발생"><a href="#BeanCreationException-발생" class="headerlink" title="BeanCreationException 발생"></a>BeanCreationException 발생</h3><h4 id="Bean-Definition에-있는-bean을-생성하려할-때-BeanFactory에서-발생하는-예외입니다"><a href="#Bean-Definition에-있는-bean을-생성하려할-때-BeanFactory에서-발생하는-예외입니다" class="headerlink" title="Bean Definition에 있는 bean을 생성하려할 때 BeanFactory에서 발생하는 예외입니다."></a>Bean Definition에 있는 bean을 생성하려할 때 BeanFactory에서 발생하는 예외입니다.</h4><blockquote><p>Error creating bean with name ‘dataSourceScriptDatabaseInitializer’ defined in class path resource [path]:</p></blockquote><p>class path에 위치한 Database와 관련된 bean을 생성할 때 오류가 발생하였다.</p><blockquote><p>Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException:</p></blockquote><p>init 메서드를 호출 실패; ScriptStatementFailedException 예외도 따라서 발생되었다.</p><blockquote><p>Failed to execute SQL script statement #2 of URL [filepath]:</p></blockquote><p>path의 2번째에 위치한 script 실행이 실패하였다.</p><hr><blockquote><h2 id="해결-시도"><a href="#해결-시도" class="headerlink" title="해결 시도"></a>해결 시도</h2></blockquote><p>Controller 테스트는 통과하였고, 생성한 repository는 상속만 받았다.</p><p>테스트 코드에서 <code>Autowired</code>를 해주었고, 단순 메서드만 호출하였기 때문에 오류는 없었다.</p><p>Exception을 참고하여 Spring 자체에서 Bean 자체를 생성하지 못하고 있다는 걸 깨달았다.</p><p>SpringBoot 2.5 버전이 나올 때 어떤 이슈가 있었는지 찾아보기 위해 Release Notes를 확인해보았다.<br><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.5-Release-Notes">Release Notes</a></p><hr><blockquote><h2 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h2></blockquote><p>schema.sql and data.sql Files</p><blockquote><p>With Spring Boot 2.5.1 and above, the new SQL initialization properties support detection of embedded datasources for JDBC and R2DBC. </p></blockquote><p>Spring Boot 2.5.1버전 이상부터 새로운 SQL initialization 속성이 JDBC와 R2DBC의 source를 찾아줍니다.</p><blockquote><p>By default, SQL database initialization is only performed when using an embedded in-memory database. </p></blockquote><p>Default로는 in-memory db를 사용할 때만 초기화가 동작합니다.</p><blockquote><p>To always initialize a SQL database, irrespective of its type, set <code>spring.sql.init.mode</code> to <code>always</code>. </p></blockquote><p>모든 Type의 SQL DB를 초기화를 적용하기 위해 spring.sql.init.mode 값을 always로 바꿔주어야합니다.</p><h4 id="application-yml-파일의-설정을-아무리-바꿔주어도-해결되지-않았다"><a href="#application-yml-파일의-설정을-아무리-바꿔주어도-해결되지-않았다" class="headerlink" title="application.yml 파일의 설정을 아무리 바꿔주어도 해결되지 않았다."></a>application.yml 파일의 설정을 아무리 바꿔주어도 해결되지 않았다.</h4><p>그래서 build.gradle 파일을 확인해보았는데, <code>dependency</code>와 <code>test</code>가 제대로 build 되지 않고 있었다.</p><p><code>vi $HOME/.zsh</code>를 통해 jdk 버전을 확인해보았는데 jdk가 16버전이었고, 이는 gradle과 아직 호환이 되지 않는 버전이었다.</p><h4 id="그래도-실행이-되지-않았다"><a href="#그래도-실행이-되지-않았다" class="headerlink" title="그래도 실행이 되지 않았다.."></a>그래도 실행이 되지 않았다..</h4><blockquote><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2></blockquote><p>sql에 syntax 오류가 있는지 확인해봤는데 자세히 보니 <strong><code>column</code>은 <code>(grave accent)</code>로 닫아주고 <code>value</code>는 <code>&#39;(Single Quote)</code>로 닫아주었다</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;martin&#x27;</span>, <span class="string">&#x27;martin@fastcampus.com&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;dennis&#x27;</span>, <span class="string">&#x27;dennis@fastcampus.com&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;sophia&#x27;</span>, <span class="string">&#x27;sophia@slowcampus.com&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">4</span>, <span class="string">&#x27;inwoo&#x27;</span>, <span class="string">&#x27;inwoo@slowcampus.com&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> next <span class="keyword">value</span> <span class="keyword">for</span> hibernate_sequence;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (`id`, `name`, `email`, `created_at`,`updated_at`) <span class="keyword">values</span> (<span class="number">5</span>, <span class="string">&#x27;inwoo&#x27;</span>, <span class="string">&#x27;inwoo@google.com&#x27;</span>, now(), now());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Trouble Shooting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Annotation 기반 Servlet 설정</title>
      <link href="/11/02/webServlet/"/>
      <url>/11/02/webServlet/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="WebServlet-Annotation"><a href="#WebServlet-Annotation" class="headerlink" title="WebServlet Annotation"></a>WebServlet Annotation</h2></blockquote><p><code>@WebServlet(urlPatterns = &quot;/insertBoard.do&quot;, initParams = @WebInitParam(name = &quot;encoding&quot;, value = &quot;EUC-KR&quot;))</code></p><p>web.xml 파일의 servlet-mapping 내의 내용을 넣어줄 수 있다.</p><h3 id="init-param"><a href="#init-param" class="headerlink" title="init-param"></a>init-param</h3><p>xml에 대한 설정을 하는 것이 java 소스코드와 분리되어있어, Annotation 기반으로 처리하게 되었다.</p><ul><li>initParams = 초기화 parameter들을 servlet으로 넘겨줄 수 있다.</li><li>Servlet객체를 생성한 후에 ServletConfig 생성 -&gt; parameter value 호출 -&gt; init()에게 넘겨준다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">// ServletConfig를 이용하면 web.xml에 설정된 로컬 파라미터 정보를 추출할 수 있다.</span></span><br><span class="line">boardEncoding = config.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Global-Parameter-설정"><a href="#Global-Parameter-설정" class="headerlink" title="Global Parameter 설정"></a>Global Parameter 설정</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Global Parameter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>EUC-KR<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>원하는 servlet의 service()단에서 아래 코드를 통해 적용 가능하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">ServletContext context = getServletContext();</span><br><span class="line">boardEncoding = context.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><p><strong>ServletContext는 ServletEngine을 객체화 시킨 거라고 생각하면 된다.</strong></p><ul><li>어디서든, 여려번 parameter에 접근하여 사용할 수 있다.</li><li>ServletConfig는 Servlet이 생성되고, init()이 호출될 때만 사용할 수 있다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
            <tag> annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet 이란</title>
      <link href="/10/30/servlet/"/>
      <url>/10/30/servlet/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Servlet의-특징"><a href="#Servlet의-특징" class="headerlink" title="Servlet의 특징"></a>Servlet의 특징</h2></blockquote><h3 id="servlet은-class이고-이식성이-뛰어나다"><a href="#servlet은-class이고-이식성이-뛰어나다" class="headerlink" title="servlet은 class이고, 이식성이 뛰어나다."></a>servlet은 class이고, 이식성이 뛰어나다.</h3><h3 id="Multi-Thread"><a href="#Multi-Thread" class="headerlink" title="Multi-Thread"></a>Multi-Thread</h3><ul><li>멀티 스레드로 동작하여 성능이 뛰어나다.<h3 id="플랫폼-독립성"><a href="#플랫폼-독립성" class="headerlink" title="플랫폼 독립성"></a>플랫폼 독립성</h3></li><li>java와 같이 플랫폼에 독립적인 기술이다.<h3 id="서버-독립성"><a href="#서버-독립성" class="headerlink" title="서버 독립성"></a>서버 독립성</h3></li><li>servlet은 웹 서버와 무관하게 실행된다.<h3 id="확장성"><a href="#확장성" class="headerlink" title="확장성"></a>확장성</h3></li><li>다양한 vendor에서 제공하는 클래스 라이브러리를 jar형태로 받아 사용할 수 있다.<br>동적인 요청이 들어오면 engine이 처리, 정적인 요청은 web server가 처리한다.<br>servlet을 생성하지 않다가, 동적인 요청이 들어오면 servlet을 생성한다.<ul><li>엔진이 servlet객쳉을 생성해서, method를 호출해준다.</li></ul></li></ul><hr><blockquote><h2 id="Servlet의-문법"><a href="#Servlet의-문법" class="headerlink" title="Servlet의 문법"></a>Servlet의 문법</h2></blockquote><ol><li><p><strong>서블릿 엔진이 접근을 해야하기 때문에</strong> Servlet은 반드시 public으로 작성해야하고, 반드시 Default 생성자만 있어야한다.</p><ul><li>멤버 변수를 default 초기화한다고해서, default 생성자이다.</li></ul></li><li><p>HTTP 프로토콜 상에서 동작하는 sevlet이라면 반드시 HttpServlet 클래스를 상속해야한다.</p><ul><li>상속 관계 : 내가 만든 Servlet -&gt; HttpServlet -&gt; GenericServlet -&gt; Servlet<ul><li>상속을 해주어야만 Servlet타입을 가질 수 있게 된다.</li><li>다른 servlet을 상속해도 되지만, web에서 사용할 수 없다.</li><li>Http 프로토콜에서 최적화된 HTTPServelt을 상속해주어야한다.</li></ul></li></ul></li><li><p>라이프 사이클과 관련된 HttpServlet 클래스의 callback method를 적절하게 override 해주어야한다.</p><ul><li><code>callback method</code> : 서블릿 엔진이 적절한 시점에 호출해주는 메서드<ul><li>우리가 직접 호출하지 않는다.</li></ul></li></ul></li></ol><hr><blockquote><h2 id="흐름"><a href="#흐름" class="headerlink" title="흐름"></a>흐름</h2></blockquote><h3 id="Servlet-객체는-메모리에-1개만-존재할-수-있다"><a href="#Servlet-객체는-메모리에-1개만-존재할-수-있다" class="headerlink" title="Servlet 객체는 메모리에 1개만 존재할 수 있다."></a>Servlet 객체는 메모리에 1개만 존재할 수 있다.</h3><ol start="0"><li>Servlet Engine이 생성되는 순간 Thread Pool을 생성한다.<ul><li>서버마다 Thread 개수다 다르다.</li></ul></li><li>브라우저에서 html, image 파일이 아닌 요청을 보내면 Servlet 엔진으로 전달된다.</li><li>요청하는 Servlet이 메모리에 있는지 확인한다.<ul><li>메모리에 있을 시 바로 4번으로 이동한다.</li></ul></li><li>Servlet class파일을 찾아서 로딩하고, 생성자를 호출하고, 객체가 생성된 직후에 init() 메서드를 호출한다.<ul><li>default 생성자로 생성된 객체를 init() 메서드가 멤버 변수를 초기화 시켜준다.</li></ul></li><li>Thread를 할당받고, run() 메서드가 실행된다.<ul><li>Thread Pool에 있는 Thread 중에서 랜덤으로 할당받는다.</li><li>run() 메서드가 service()를 호출한다.</li></ul></li><li>service() 메서드를 overriding하지 않으면 부모로부터 상속받는다.<ul><li>요청 방식이 get방식의 메서드인지, post방식의 메서드인지 분기시킨다.</li></ul></li><li>Servlet을 수정하고 저장 하면 Reloading을 해준다.<ul><li>destroy() 메서드가 호출되고 수정된 Servlet으로 교체된다.</li><li>혹은 server를 종료시키면, 엔진은 생성한 객체를 destory하고 종료된다.</li></ul></li></ol><blockquote><h4 id="Servlet은-최초-호출-시에만-느리고-그-후에는-바로-Thread를-할당받으므로-빠르게-작동한다"><a href="#Servlet은-최초-호출-시에만-느리고-그-후에는-바로-Thread를-할당받으므로-빠르게-작동한다" class="headerlink" title="Servlet은 최초 호출 시에만 느리고, 그 후에는 바로 Thread를 할당받으므로 빠르게 작동한다."></a>Servlet은 최초 호출 시에만 느리고, 그 후에는 바로 Thread를 할당받으므로 빠르게 작동한다.</h4></blockquote>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gRPC 탐구 생활 (1)</title>
      <link href="/10/29/grpc/"/>
      <url>/10/29/grpc/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h3 id="네트워크-통신"><a href="#네트워크-통신" class="headerlink" title="네트워크 통신"></a>네트워크 통신</h3><h4 id="로컬-컴퓨터의-프로세스-↔️-서버-컴퓨터의-프로세스의-IPC-통신이다"><a href="#로컬-컴퓨터의-프로세스-↔️-서버-컴퓨터의-프로세스의-IPC-통신이다" class="headerlink" title="로컬 컴퓨터의 프로세스 ↔️ 서버 컴퓨터의 프로세스의 IPC 통신이다."></a>로컬 컴퓨터의 프로세스 ↔️ 서버 컴퓨터의 프로세스의 IPC 통신이다.</h4></blockquote><blockquote><h2 id="시작-21-10-29"><a href="#시작-21-10-29" class="headerlink" title="시작 (21. 10. 29.)"></a>시작 (21. 10. 29.)</h2></blockquote><p>한 달 전에 gRPC에 관심이 생겨서 Docs를 찾아보고, 내용을 정리하여 글을 작성했었다.</p><p>오늘 프로토콜 관련 강의를 듣다가, HTTP는 Header에 많은 데이터가 들어가서 현업에서 무겁다는 평가를 받고 있다는 소식을 들었다.</p><p>이 때 gRPC가 계속해서 강조해오던 <strong>빠른 데이터 처리, 편리하고 유연한 환경</strong>이 떠올라 gRPC Quick Start를 통해 실행해 본 과정과 결과에 대해 작성하려 한다.</p><blockquote><h2 id="Quick-Start-21-10-29"><a href="#Quick-Start-21-10-29" class="headerlink" title="Quick Start (21. 10. 29)"></a>Quick Start (21. 10. 29)</h2></blockquote><h3 id="설치-전-환경-설정"><a href="#설치-전-환경-설정" class="headerlink" title="설치 전 환경 설정"></a>설치 전 환경 설정</h3><h4 id="issue-gradle과-자바-버전"><a href="#issue-gradle과-자바-버전" class="headerlink" title="issue : gradle과 자바 버전"></a>issue : gradle과 자바 버전</h4><p>gRPC는 JDK 버전이 7 버전 이상이어야 사용할 수 있다. 나는 16 버전을 사용하고 있어서, 당연히 사용할 수 있을 줄 알았다.</p><p>결과적으로 설치 이후에는 16 버전을 사용해도 상관없었다.</p><p><strong>gRPC가 안내한 방법에는 gradle을 통한 설치 방법이 나와있는데, gradle은 아직 자바 16 버전을 지원하지 않고 있다.</strong> 설치 시 <code>General error during semantic analysis: Unsupported class file major version 60</code> 오류가 발생하였다.</p><p>7 이상 15버전 이하를 사용하면 gradle을 통해 설치할 수 있고, 버전을 다운로드 받은 후 환경 변수를 설정해주면 된다.</p><details><summary>Mac OS 환경변수 설정법 확인</summary><ol><li><code>cd /Library/Java/JavaVirtualMachines</code> 로 이동</li><li><code>ls -al</code> 을 통해 설치되어있는 jdk 버전 확인</li></ol><p>Big sur 버전 이상 : <code>vi $HOME/.zshrc</code><br>Bir sur 버전 미만 : <code>vi ~/.bash_profile</code></p><p><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk폴더이름/Contents/Home</code> 입력</p></details><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>원하는 폴더로 이동하여 <code>git clone</code>을 통하여 설치하거나, zip 파일을 다운로드하여 압축 해제를 해주면된다.</p><ol><li>원하는 폴더로 이동한다.</li><li><code> $ git clone -b v1.41.0 https://github.com/grpc/grpc-java</code>를 입력하여 파일을 받는다.</li><li><code>cd grpc-java/examples</code> 를 통해 폴더를 이동해준다.</li><li><code>./gradlew installDist</code>로 설치를 해준다.</li></ol><h3 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h3><p>gRPC는 서버와 서버 간의 통신에서 자주 사용된다.</p><p>테스트도 위와 같은 상황에서 진행을 해보았다. 이를 위해 터미널 2개를 켜놓고 실행해주어야 한다.</p><p>1개는 Client, 1개는 Server의 역할을 해줄 것이다. 아래 예제 코드는 grpc-java의 하위 폴더 example에서 실행해주어야 한다.</p><h4 id="1-Server-역할-Terminal"><a href="#1-Server-역할-Terminal" class="headerlink" title="1. Server 역할 Terminal"></a>1. Server 역할 Terminal</h4><p><code>$ ./build/install/examples/bin/hello-world-server</code></p><p>위 명령어를 실행하면 </p><p><strong>INFO: Server started, listening on 50051</strong> 라는 메세지가 나타난다.</p><p>50051번 포트를 열어 놓고 서버 측에서 대기를 하고 있게 된다.</p><h4 id="2-Client-역할-Terminal"><a href="#2-Client-역할-Terminal" class="headerlink" title="2. Client 역할 Terminal"></a>2. Client 역할 Terminal</h4><p><code>$ ./build/install/examples/bin/hello-world-client</code></p><p>위 명령어를 실행하면 </p><p><strong>INFO: Will try to greet world …</strong></p><p><strong>INFO: Greeting: Hello world</strong> 메세지가 나타난다.</p><p>REST, HTTP와는 다르게 server 쪽의 메서드를 Client단에서 호출했다. 이렇게되면 gRPC를 통하여 Client-server 어플리케이션을 실행한 것이다.</p>]]></content>
      
      
      <categories>
          
          <category> gRPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>가상 메모리, 페이징, 세그멘테이션, 뮤텍스, 세마포어</title>
      <link href="/10/28/0-interview-os2/"/>
      <url>/10/28/0-interview-os2/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="8-가상-메모리란"><a href="#8-가상-메모리란" class="headerlink" title="8. 가상 메모리란?"></a>8. 가상 메모리란?</h2></blockquote><p>메모리에 로드되어 실행 중인 프로세스가 사용하고 있지 않은 페이지를<br>추상화된 가상 메모리 공간에 저장하고, 필요할 때 참조함으로써,<br><strong>메모리의 효율성을 높여주는 OS의 메모리 관리 기법</strong></p><h3 id="8-1-가상-메모리의-주요-기능"><a href="#8-1-가상-메모리의-주요-기능" class="headerlink" title="8-1. 가상 메모리의 주요 기능"></a>8-1. 가상 메모리의 주요 기능</h3><p>주기억장치를 하드디스크에 대한 캐시로 설정하고, 필요한 페이지만 유지하여 효율적으로 관리하고,</p><p>프로세스 별로 통일된 가상 메모리 주소 공간을 할당해줘서 메모리 관리가 단순해지고,</p><p>거의 무한에 가까운 가상 메모리 공간을 배정하여 프로세스들끼리의 메모리 침범 발생률을 크게 줄인다.</p><h3 id="8-2-가상-메모리와-관련된-하드웨어에-대해-말씀해주세요"><a href="#8-2-가상-메모리와-관련된-하드웨어에-대해-말씀해주세요" class="headerlink" title="8-2. 가상 메모리와 관련된 하드웨어에 대해 말씀해주세요."></a>8-2. 가상 메모리와 관련된 하드웨어에 대해 말씀해주세요.</h3><p>MMU(Memory Management Unit)과 TLB(Translation Lookaside Buffer)</p><p>MMU(메모리 관리 장치)</p><ul><li>가상 메모리 주소를 물리 메모리 주소로 변환해주는 하드웨어 (CPU가 메모리에 접근하는 것을 관리)<br>TLB(변환 참조 버퍼)</li><li>변환 작업의 속도를 높이기 위해 사용되는 Cache (보조 기억장치)</li></ul><hr><blockquote><h2 id="9-페이징과-세그멘테이션이란"><a href="#9-페이징과-세그멘테이션이란" class="headerlink" title="9. 페이징과 세그멘테이션이란?"></a>9. 페이징과 세그멘테이션이란?</h2></blockquote><h3 id="페이징"><a href="#페이징" class="headerlink" title="페이징"></a>페이징</h3><ul><li>메모리 공간 일정한 크기의 블록인 페이지로 나누어 관리하는 기법</li><li>페이징을 사용하기 위해 주소의 동적 재배치를 허용하고, 메모리 주소 변환을 위한 MMU가 필요하다</li><li>외부 단편화를 줄일 수 있지만, 페이지가 커질 수록 내부 단편화가 발생한다.</li></ul><h3 id="세그멘테이션"><a href="#세그멘테이션" class="headerlink" title="세그멘테이션"></a>세그멘테이션</h3><ul><li>사용자 관점에서의 메모리 관리 기법</li><li>페이징은 일정한 크기의 블록으로 미리 공간을 나눠놓지만,<br>세그멘테이션은 메모리를 사용하는 시점에 논리적 내용 단위인 세그먼트로 나눈다.</li><li>동적으로 할당하는 방식이므로 외부 단편화가 발생할 수 있다.</li></ul><h3 id="9-1-페이지나-세그먼트가-메모리에-할당되는-방법"><a href="#9-1-페이지나-세그먼트가-메모리에-할당되는-방법" class="headerlink" title="9-1. 페이지나 세그먼트가 메모리에 할당되는 방법"></a>9-1. 페이지나 세그먼트가 메모리에 할당되는 방법</h3><p>페이지, 세그먼트 테이블에 접근하여 필요한 가상 메모리주소를 MMU가 가상 주소를 물리주소로 변환시켜줍니다.</p><h3 id="9-2-단편화를-해결할-수-있는-방법"><a href="#9-2-단편화를-해결할-수-있는-방법" class="headerlink" title="9-2. 단편화를 해결할 수 있는 방법"></a>9-2. 단편화를 해결할 수 있는 방법</h3><p>세그먼트를 페이징하는 방법을 취하면 해결할 수 있지만, 두 가지 테이블을 모두 거쳐야 하므로 속도가 떨어진다는 단점이 있다.</p><hr><blockquote><h2 id="10-뮤텍스와-세마포어란-차이점은"><a href="#10-뮤텍스와-세마포어란-차이점은" class="headerlink" title="10. 뮤텍스와 세마포어란? 차이점은?"></a>10. 뮤텍스와 세마포어란? 차이점은?</h2></blockquote><h3 id="뮤텍스-상호배제"><a href="#뮤텍스-상호배제" class="headerlink" title="뮤텍스 (상호배제)"></a>뮤텍스 (상호배제)</h3><ul><li>Critical Section에 단 하나의 스레드만 접근할 수 있고, 이 스레드가 빠져나올 때 까지 해당 section에 대한 다른 스레드의 접근을 막고 대기시키는 것</li></ul><h3 id="세마포어"><a href="#세마포어" class="headerlink" title="세마포어"></a>세마포어</h3><ul><li>사전에 허용치를 설정하여, 이 허용치만큼만 동시에 접근이 가능한 방식</li><li>스레드가 접근할 때마다 count가 하나씩 줄어들게 되고, 0이 되면 접근을 대기 시킨다.</li></ul><h3 id="차이점"><a href="#차이점" class="headerlink" title="차이점"></a>차이점</h3><ul><li>세마포어를 허용치를 1로 설정하면 뮤텍스가 될 수 있지만, 뮤텍스는 세마포어가 될 수 없다.</li><li>세마포어는 소유가 불가능하지만, 뮤텍스는 소유가 가능하다.</li><li>뮤텍스는 프로세스 범위, 세마포어는 파일시스템 상 파일로 존재</li><li>뮤텍스는 소유하고 있는 쓰레드만 해제 가능, 세마포어는 다른 스레드가 해제 가능</li></ul><h3 id="10-1-뮤텍스의-소유권"><a href="#10-1-뮤텍스의-소유권" class="headerlink" title="10-1. 뮤텍스의 소유권"></a>10-1. 뮤텍스의 소유권</h3><p>뮤텍스는 신호, 비신호 상태를 가지는데, 이 뮤텍스를 소유하게 되면 비신호 상태가 됩니다.<br>뮤텍스를 생성할 때 어떤 스레드가 소유할 것인지 결정하고, 아무도 소유하지 않으면 신호상태로 기다리게 됩니다.</p>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 가상메모리 </tag>
            
            <tag> 페이징 </tag>
            
            <tag> 세그멘테이션 </tag>
            
            <tag> 뮤텍스 </tag>
            
            <tag> 세마포어 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>메모리 할당 알고리즘, 페이지 폴트, 단편화</title>
      <link href="/10/28/0-interview-os1/"/>
      <url>/10/28/0-interview-os1/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="5-메모리-할당-알고리즘-First-fit-Next-fit-Best-fit-결과에-대해-설명해보세요"><a href="#5-메모리-할당-알고리즘-First-fit-Next-fit-Best-fit-결과에-대해-설명해보세요" class="headerlink" title="5. 메모리 할당 알고리즘 (First fit, Next fit, Best fit) 결과에 대해 설명해보세요"></a>5. 메모리 할당 알고리즘 (First fit, Next fit, Best fit) 결과에 대해 설명해보세요</h2></blockquote><p>메모리의 처음부터 탐색하기 시작해서, 크기가 충분한 첫 번째 메모리에 할당하는 First fit,<br>마지막으로 참조한 메모리 공간부터 탐색을 시작해서 메모리를 할당하는 Next fit,<br>모든 메모리 공간을 검사해서 내부 단편화를 최소화 하는 공간에 할당하는 Best fit이 있습니다.</p><blockquote><h3 id="5-1-메모리-할당-알고리즘의-필요성-가변-배치-전략"><a href="#5-1-메모리-할당-알고리즘의-필요성-가변-배치-전략" class="headerlink" title="5-1. 메모리 할당 알고리즘의 필요성 (가변 배치 전략)"></a>5-1. 메모리 할당 알고리즘의 필요성 (가변 배치 전략)</h3><p>OS가 제공하는 다중 프로그래밍 환경 내에서 / 다양한 프로그램들이 메모리 공간을 불규칙적으로 사용, 반환합니다.<br>이러한 불규칙적인 공간 중 프로세스에게 할당해 줄 메모리 공간을 선택하기 위해 메모리 할당 알고리즘이 필요합니다.</p></blockquote><blockquote><h3 id="5-2-각-알고리즘의-장단점이-있다면"><a href="#5-2-각-알고리즘의-장단점이-있다면" class="headerlink" title="5-2. 각 알고리즘의 장단점이 있다면?"></a>5-2. 각 알고리즘의 장단점이 있다면?</h3><p>First-fit : 가장 간단하고 빠르지만, 공간 활용률이 떨어질 수 있습니다.<br>Next-fit : first-fit에 보다는 느리지만, 빠른 속도가 장점이다, 일반적으로 메모리 공간의 끝에 있는 가장 큰 크기의 메모리를 짧은 시간내에 작은 크기로 조각내서 메모리 집약작업이 추가적으로 필요하다.<br>Best-fit : 공간 활용률이 높아진다는 장점이지만, 가용 메모리가 크기 순으로 정렬되어있지 않으면 메모리 검색 시간이 늘어난다.</p></blockquote><hr><blockquote><h2 id="6-페이지-폴트에-따른-페이지-교체-알고리즘에-대해-설명해주세요"><a href="#6-페이지-폴트에-따른-페이지-교체-알고리즘에-대해-설명해주세요" class="headerlink" title="6. 페이지 폴트에 따른 페이지 교체 알고리즘에 대해 설명해주세요"></a>6. 페이지 폴트에 따른 페이지 교체 알고리즘에 대해 설명해주세요</h2><p>OPT(Optimization) : 가장 오랫동안 사용하지 않을 페이지를 예측하여 교체하는, 최적화 방식<br>FIFO(First In First Out) : 메모리가 할당된 순서대로 페이지를 교체하는 방식<br>LRU(Least Recently Used) : 최근에 가장 오랫동안 사용하지 않은 페이지를 교체<br>LFU(Least Frequently Used) : 사용 빈도가 가장 적은 페이지를 교체<br>NUR(Not Used Recently) : 최근에 가장 사용하지 않은 페이지를 교체</p></blockquote><blockquote><h3 id="6-1-페이지-폴트란-무엇인가"><a href="#6-1-페이지-폴트란-무엇인가" class="headerlink" title="6-1. 페이지 폴트란 무엇인가?"></a>6-1. 페이지 폴트란 무엇인가?</h3><p>운영체제의 스와퍼(Swapper)는 메모리에 동작하고 있는 프로세스 중에서 실제로 필요한 프로세스만 로드하고, 페이저(Pager)는 프로세스의 필요한 페이지만 로드합니다.<br>따라서 필요한 페이지가 물리 메모리에 부재할 수 있는 시점이 있는 데, 이 때를 페이지 폴트라 합니다.</p></blockquote><blockquote><h3 id="6-2-페이지-폴트의-해결과정"><a href="#6-2-페이지-폴트의-해결과정" class="headerlink" title="6-2. 페이지 폴트의 해결과정"></a>6-2. 페이지 폴트의 해결과정</h3><p>필요한 페이지가 없는 것을 해결하기위해 요구를 합니다. 이를 Demand Paging이라하는데,<br>페이지 폴트가 발생하면 CPU에서 trap을 발생시켜 OS에 알립니다.<br>OS에서는 interrupt를 발생시키고 주소 값과 Valid bit가 있는 Page Table을 통해<br>필요한 페이지가 있는 지 확인합니다. 없으면 프로세스를 종료하고, 있으면 물리 메모리에 비어있는 프레임을 찾습니다.</p></blockquote><p>이 때 비어있는 프레임이 없으면 페이지 교체 알고리즘을 통해 페이지를 교체하고,<br>페이지가 있으면 그 공간에 로드합니다.</p><hr><blockquote><h2 id="7-단편화란-무엇인가"><a href="#7-단편화란-무엇인가" class="headerlink" title="7. 단편화란 무엇인가?"></a>7. 단편화란 무엇인가?</h2></blockquote><ul><li>RAM에서 메모리의 공간이 조각으로 나뉘어져, 사용 가능한 메모리가 충분히 존재하지만 할당할 수 없는 상태</li></ul><blockquote><h3 id="7-1-내부-단편화"><a href="#7-1-내부-단편화" class="headerlink" title="7-1. 내부 단편화"></a>7-1. 내부 단편화</h3></blockquote><ul><li>프로세스가 필요한 양보다 더 큰 메모리가 할당되어, 할당된 메모리 내의 공간이 낭비되는 상황</li></ul><blockquote><h3 id="7-2-외부-단편화"><a href="#7-2-외부-단편화" class="headerlink" title="7-2. 외부 단편화"></a>7-2. 외부 단편화</h3></blockquote><ul><li>총 사용 가능 메모리 공간은 충분하지만, 비연속적으로 존재하여 프로세스에 대한 할당이 불가능한 상황</li></ul>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 메모리 할당 알고리즘 </tag>
            
            <tag> 페이지 폴트 </tag>
            
            <tag> 단편화 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring - Interceptor</title>
      <link href="/10/28/springInterceptor/"/>
      <url>/10/28/springInterceptor/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Interceptor-란"><a href="#Interceptor-란" class="headerlink" title="Interceptor 란 ?"></a>Interceptor 란 ?</h2></blockquote><p><img src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http://cfile22.uf.tistory.com/image/9983FB455BB4E5D30C7E10" alt="image"><br><a href="https://goddaehee.tistory.com/154">출처 : 갓대희의 작은 공간</a></p><p>Interceptor는 Filter와 유사한 형태로 존재한다. AOP가 흩어진 관심사를 묶어 처리하는 것과 같이 공통처리를 위해 활용될 수 있다. </p><p>실행순서는 아래와 같다.</p><p><strong>요청 : Filter -&gt; Dispatcher Servlet -&gt; Interceptor -&gt; AOP</strong></p><p><strong>응답 : AOP -&gt; Interceptor -&gt; Dispatcher Servlet -&gt; Filter</strong></p><hr><table><thead><tr><th>비고</th><th>Filter</th><th>Interceptor</th></tr></thead><tbody><tr><td>등록</td><td>WebApplication(web.xml)</td><td>Spring Context</td></tr><tr><td>전,후처리</td><td>chain.doFilter()</td><td>preHandle, postHandle 등</td></tr><tr><td>예외처리</td><td>WebApplication</td><td>ExceptionHandler</td></tr><tr><td>기타</td><td>Servlet 응답, 요청에 대한 교체 가능</td><td>HandlerMethod를 통한 추가 작업, View 렌더링 전 추가 작업, AOP와 유사한 기능 제공(인증단계, 로깅 등), Service business logic과의 분리</td></tr><tr><td>사용</td><td>인코딩처리, XSS 방어 등</td><td>로그인, 권한 체크, 로그확인 등</td></tr></tbody></table><hr><blockquote><h2 id="Interceptor-구현"><a href="#Interceptor-구현" class="headerlink" title="Interceptor 구현"></a>Interceptor 구현</h2></blockquote><h3 id="절차"><a href="#절차" class="headerlink" title="절차"></a>절차</h3><h4 id="1-Interceptor를-생성할-때-HandlerInterceptor-인터페이스를-implements-해준다"><a href="#1-Interceptor를-생성할-때-HandlerInterceptor-인터페이스를-implements-해준다" class="headerlink" title="1. Interceptor를 생성할 때 HandlerInterceptor 인터페이스를 implements 해준다."></a>1. Interceptor를 생성할 때 <strong>HandlerInterceptor</strong> 인터페이스를 implements 해준다.</h4><h4 id="2-Spring이-Component-Scan을-할-때-인식되기-위해-Component-Annotation을-추가해준다"><a href="#2-Spring이-Component-Scan을-할-때-인식되기-위해-Component-Annotation을-추가해준다" class="headerlink" title="2. Spring이 Component Scan을 할 때 인식되기 위해 @Component Annotation을 추가해준다."></a>2. Spring이 Component Scan을 할 때 인식되기 위해 @Component Annotation을 추가해준다.</h4><h4 id="3-전-후처리에-맞추어-method를-override해준다"><a href="#3-전-후처리에-맞추어-method를-override해준다" class="headerlink" title="3. 전, 후처리에 맞추어 method를 override해준다."></a>3. 전, 후처리에 맞추어 method를 override해준다.</h4><ul><li>전처리 : preHandle()</li><li>후처리 : postHandle()</li><li>응답완료 후 : afterCompletion()</li></ul><p>아래 예제에서는 전처리를 하기위해 preHandle()메서드를 override 해주었다.</p><p>request한 uri와 Auth라는 Annotation을 유무 여부를 체크 및 로깅해주고, Annotation이 있다면 query를 log로 찍어주었다.</p><p>CheckAnnotation 메서드는 handler와 handlerMethod를 통해 annotation이 Bean 혹은 MethodAnnotation이 맞는지 체크해주었다.</p><ul><li><code>if (handlerMethod instanceof HttpRequestHandler) &#123; return true; &#125;</code> 코드는 Html 등 resource일 시 true를 반환해주도록했다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;uri : &#123;&#125;&quot;</span>, uri);</span><br><span class="line"></span><br><span class="line">        URI urii = UriComponentsBuilder.fromUriString(uri)</span><br><span class="line">                .query(request.getQueryString())</span><br><span class="line">                .build()</span><br><span class="line">                .toUri();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> hasAnnotation = checkAnnotation(handler, Auth.class);</span><br><span class="line">        log.info(<span class="string">&quot;has annotation : &#123;&#125;&quot;</span>, hasAnnotation);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasAnnotation) &#123;</span><br><span class="line">            String query = urii.getQuery();</span><br><span class="line">            log.info(<span class="string">&quot;query : &#123;&#125;&quot;</span>, query);</span><br><span class="line">            <span class="keyword">if</span> (query.equals(<span class="string">&quot;name=Inwoo&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkAnnotation</span><span class="params">(Object handler, Class clazz)</span> </span>&#123;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        <span class="comment">// pass resource</span></span><br><span class="line">        <span class="keyword">if</span> (handlerMethod <span class="keyword">instanceof</span> HttpRequestHandler) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// pass annotation</span></span><br><span class="line">        <span class="keyword">if</span> (handlerMethod.getBeanType().getAnnotation(clazz) != <span class="keyword">null</span> || handlerMethod.getMethodAnnotation(clazz) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interceptor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring - filter</title>
      <link href="/10/26/springfilter/"/>
      <url>/10/26/springfilter/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><hr><blockquote><h2 id="Filter-란"><a href="#Filter-란" class="headerlink" title="Filter 란 ?"></a>Filter 란 ?</h2></blockquote><p><img src="https://supawer0728.github.io/images/spring-filter-interceptor/spring-request-lifecycle.jpg" alt="image"></p><p>Spring은 Client로부터 request를 받고, response를 줄 때 <strong>Filter</strong>를 거쳐서 전달해준다.</p><p>Filter는 웹 어플리케이션에서 관리되는 영역으로, Spring에 의해서 데이터가 변환 되기 전, Client가 보낸 순수한 요청, 응답 값을 확인할 수 있다.</p><hr><blockquote><h2 id="Filter의-사용"><a href="#Filter의-사용" class="headerlink" title="Filter의 사용"></a>Filter의 사용</h2></blockquote><h3 id="절차"><a href="#절차" class="headerlink" title="절차"></a>절차</h3><ol><li>Filter를 사용하기 위해 <strong>Filter를 implements한 클래스를 생성</strong>한다.</li><li><strong>WebFilter 어노테이션을 추가</strong>하고, 적용범위를 설정한다.<ul><li>default = 모든 url</li></ul></li><li><strong>doFilter()</strong> 메서드를 오버라이드한다.</li><li>SpringBootApplication 어노테이션이 추가된 메인부에 <strong>@ServletComponentScan을 추가해준다</strong></li></ol><h3 id="doFilter-메서드"><a href="#doFilter-메서드" class="headerlink" title="doFilter() 메서드"></a>doFilter() 메서드</h3><p>메서드의 parameter로 FilterChain 타입의 chain을 받을 수 있다. <strong>chain.doFilter() 메서드를 기준으로 필터에 들어오기 전, 후를 구분할 수 있다.</strong></p><h4 id="lt-전처리-gt"><a href="#lt-전처리-gt" class="headerlink" title="&lt; 전처리 &gt;"></a>&lt; 전처리 &gt;</h4><p><strong>다른 parameter 중 ServletRequest request, ServletResponse reponse가 들어온다.</strong></p><p>위 Servlet 타입은 response, request를 단 1번만 사용할 수 있다. 들어온 요청을 log로 서버에 남기면 이를 다른 용도로 활용할 수 없는 것이다.</p><p><strong>따라서 ContentCahchingRequestWrapper, ContentCachingResponseWrapper</strong>를 생성해준다.</p><ul><li>생성자의 인자로 ServletRequest과 ServletResponse를 사용할 수 있다.</li></ul><h4 id="lt-후처리-gt"><a href="#lt-후처리-gt" class="headerlink" title="&lt; 후처리 &gt;"></a>&lt; 후처리 &gt;</h4><p>서버에는 사용자가 보낸 내용과, 요청을 보낸 uri를 확인하기 위해 get메서드를 통해 로그로 남겨주었다.</p><p>응답으로 보내주는 httpStatus와 content 또한 저장하며 log에 기록해주었다.</p><h3 id="1-TalentAPI를-통해-객체에-맞는-데이터를-post-해준다"><a href="#1-TalentAPI를-통해-객체에-맞는-데이터를-post-해준다" class="headerlink" title="1. TalentAPI를 통해 객체에 맞는 데이터를 post 해준다."></a>1. TalentAPI를 통해 객체에 맞는 데이터를 post 해준다.</h3><p><img src="/image/sfilter1.png" alt="img_1.png"></p><h3 id="2-Post한-값과-uri가-log로-찍힌다"><a href="#2-Post한-값과-uri가-log로-찍힌다" class="headerlink" title="2. Post한 값과, uri가 log로 찍힌다."></a>2. Post한 값과, uri가 log로 찍힌다.</h3><p><img src="/image/sfilter2.png" alt="img_2.png"></p><h3 id="3-Response-한-값과-HttpStatus가-알맞게-log에-찍히는-것을-확인할-수-있다"><a href="#3-Response-한-값과-HttpStatus가-알맞게-log에-찍히는-것을-확인할-수-있다" class="headerlink" title="3. Response 한 값과 HttpStatus가 알맞게 log에 찍히는 것을 확인할 수 있다."></a>3. Response 한 값과 HttpStatus가 알맞게 log에 찍히는 것을 확인할 수 있다.</h3><p><img src="/image/sfilter3.png" alt="img_4.png"><br><img src="/image/sfilter4.png" alt="img_3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/api/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 전처리</span></span><br><span class="line">        ContentCachingRequestWrapper contentCachingRequestWrapper = <span class="keyword">new</span> ContentCachingRequestWrapper((HttpServletRequest) request);</span><br><span class="line">        ContentCachingResponseWrapper contentCachingResponseWrapper = <span class="keyword">new</span> ContentCachingResponseWrapper((HttpServletResponse) response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 필터</span></span><br><span class="line">        chain.doFilter(contentCachingRequestWrapper, contentCachingResponseWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 후처리</span></span><br><span class="line">        String reqContetnt = <span class="keyword">new</span> String(contentCachingRequestWrapper.getContentAsByteArray());</span><br><span class="line">        String url = contentCachingRequestWrapper.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;url : &#123;&#125;, reqContent : &#123;&#125;&quot;</span>, url, reqContetnt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> httpStatus = contentCachingResponseWrapper.getStatus();</span><br><span class="line">        String content = <span class="keyword">new</span> String(contentCachingResponseWrapper.getContentAsByteArray());</span><br><span class="line">        log.info(<span class="string">&quot;http status : &#123;&#125;, content : &#123;&#125;&quot;</span>, httpStatus, content);</span><br><span class="line"></span><br><span class="line">        contentCachingResponseWrapper.copyBodyToResponse();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Validation check</title>
      <link href="/10/25/springvalidation/"/>
      <url>/10/25/springvalidation/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Validation-이란"><a href="#Validation-이란" class="headerlink" title="Validation 이란"></a>Validation 이란</h2><p>Java에서 null 값에 대한 접근이 발생할 때 <strong>null pointer exception</strong>이 발생하므로, 이를 사전에 방지하기 위해 유효성을 검사하는 과정이 Validation 입니다. </p></blockquote><p>일반적인 java 코드에서 validation을 체크하는 예제 코드를 확인해보겠습니다.<br>parameter의 값이 null이면 exception이 발생할 수 있으므로, null이 들어오면 return을 하여 이를 막아줍니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPrice</span><span class="params">(<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (price == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 정상 Logic</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>위 코드에서는 검증해야 할 값이 1개지만, 값이 많아질수록 코드가 길어지고, 재사용성에 한계가 있습니다.</p><p>또한 유지 보수 측면에서도 바람직하지 않으며 일반적으로 Service Logic과 분리가 필요합니다..</p><blockquote><h2 id="Spring-Boot-Validation"><a href="#Spring-Boot-Validation" class="headerlink" title="Spring Boot Validation"></a>Spring Boot Validation</h2></blockquote><p>build.gradle에 <code>implementation &#39;org.springframework.boot:spring-boot-starter-validation&#39;</code>을 추가하여 사용할 수 있다.</p><p>클래스 혹은 원하는 변수위에 Annotation을 추가하여 사용할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Max(value = 90)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String Email;</span><br><span class="line">    <span class="meta">@YearMonth</span></span><br><span class="line">    <span class="keyword">private</span> String birthday;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@Size</strong> : 문자 길이 설정<ul><li>min, max값을 통해 최소, 최대 문자 길이 설정 가능</li></ul></li><li><strong>@NotNull</strong> : null 불가</li><li><strong>@NotEmpty</strong> : null 또는 “”(빈문자열) 불가</li><li><strong>@NotBlank</strong> : null 또는 “”(빈문자열), “ “(공백) 불가</li><li><strong>@Past</strong> : 과거 날짜</li><li><strong>@PastOrPresent</strong> : 과거 혹은 오늘 날짜</li><li><strong>@Future</strong> : 미래 날짜</li><li><strong>@Pattern</strong> : 정규식 적용 <ul><li>regex = “[정규식]” 과 같이 사용할 수 있다.</li></ul></li><li><strong>@Max, @Min</strong> : 최대, 최소값 설정</li><li><strong>@Valid</strong> : 해당 object에 대해 validation 실행<ul><li>아래 예시와 같이 ResponseBody로 들어오는 User객체에 대해 Validation을 실행해줍니다.</li><li>객체의 왼쪽, 오른쪽 아무 곳에나 붙여도 상관 없습니다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">post</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><h2 id="Custom-Validation"><a href="#Custom-Validation" class="headerlink" title="Custom Validation"></a>Custom Validation</h2></blockquote><p>원하는 Validation이 존재하지 않을 때 custom으로 생성하여 사용하는 예제를 확인해보겠습니다.</p><p>먼저 Annotation을 생성해주고, 이를 통작하게 해줄 Validator를 구현해주어야합니다.</p><p>저는 아래 예시를 통해 올바른 연(Year), 월(Month) 형식이 들어오는지 체크하는 Annotation을 생성해보겠습니다.</p><h3 id="1-Annotation-생성"><a href="#1-Annotation-생성" class="headerlink" title="1. Annotation 생성"></a>1. Annotation 생성</h3><ul><li><p>Annotation의 Annotation (Annotation의 범위, 타겟 등 설정)</p><ul><li>Constraint : 어떤 클래스(validator)에 의해 유효성 검사가 될 것인지 설정</li><li>Target에는 임의로 메서드, 필드 등을 넣어주었습니다.</li><li>실행 중일 때 동작하도록 Retention은 RUNTIME으로 설정하였습니다.</li></ul></li><li><p>메타 정보 생성</p><ul><li><strong>message()</strong> : 유효하지 않을 시 출력해주는 message를 관리하기 위해 사용됩니다.</li><li><strong>groups()</strong> : Validation을 적용할 그룹을 제한할 수 있습니다.</li><li><strong>payload()</strong> : Custom Annotation에 관련된 메타 정보를 정의합니다.<ul><li>Error가 발생했을 때 심각도를 나타냅니다.</li><li><code>payload = Severity.Error.class</code>와 같이 사용합니다.</li></ul></li><li><strong>pattern()</strong> : 날짜 검증을 위해서 기본 형식을 설정해주었습니다. </li></ul></li></ul><p><img src="/image/springvalid.png" alt="img.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = &#123;YearMonthValidator.class&#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> YearMonth &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;yyyyMMdd 형식으로 입력하세요&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">pattern</span><span class="params">()</span> <span class="keyword">default</span> &quot;yyyyMMdd&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Validator-생성"><a href="#2-Validator-생성" class="headerlink" title="2. Validator 생성"></a>2. Validator 생성</h3><p>위에서 생성한 <code>@YearMonth</code>를 동작시키기 위해서 Validator가 필요합니다.</p><h4 id="1-ConstraintValidator-lt-동작시킬-Annotation-검증-객체-타입-gt-을-implements-해줍니다"><a href="#1-ConstraintValidator-lt-동작시킬-Annotation-검증-객체-타입-gt-을-implements-해줍니다" class="headerlink" title="1. ConstraintValidator&lt;**동작시킬 Annotation**, **검증 객체 타입**&gt;을 implements 해줍니다."></a>1. ConstraintValidator&lt;**동작시킬 Annotation**, **검증 객체 타입**&gt;을 implements 해줍니다.</h4><h4 id="2-객체-검증-기준-생성"><a href="#2-객체-검증-기준-생성" class="headerlink" title="2. 객체 검증 기준 생성"></a>2. 객체 검증 기준 생성</h4><ul><li>위에서 Annotation을 생성할 때, 검증할 때 기준이 되는 String을 pattern()으로 초기화시켜놓았습니다.</li><li>이 패턴을 가져오기 위해 같은 자료형의 변수를 생성해줍니다.</li></ul><h4 id="3-initailize-YearMonth-constraintAnnotation-메서드를-Override해줍니다"><a href="#3-initailize-YearMonth-constraintAnnotation-메서드를-Override해줍니다" class="headerlink" title="3. initailize(YearMonth constraintAnnotation)메서드를 Override해줍니다."></a>3. <code>initailize(YearMonth constraintAnnotation)</code>메서드를 Override해줍니다.</h4><ul><li>Argument로 들어있는 YearMonth에 Custom Annotation을 넣어주면 됩니다.</li><li>2번에서 생성한 변수에 Annotation에서 초기화해주었던 pattern을 넣어줍니다.</li></ul><h4 id="4-isValid-String-value-ContraintValidatorContext-context-메서드-Override"><a href="#4-isValid-String-value-ContraintValidatorContext-context-메서드-Override" class="headerlink" title="4. isValid(String value, ContraintValidatorContext context) 메서드 Override"></a>4. <code>isValid(String value, ContraintValidatorContext context)</code> 메서드 Override</h4><ul><li>비교값과, 정해놓은 기준을 비교하여 유효성을 체크해주는 함수입니다.</li><li>저는 애초에 연(Year), 월(Month)를 체크하고자 Custom Validator를 만들고 있었습니다.</li><li>LocalDate로는 연, 월, 일 값만 비교할 수 있기 때문에, 모든 월이 가지고 있는 <strong>01일</strong>을 비교값에 추가해주었습니다. </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YearMonthValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">YearMonth</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(YearMonth constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pattern = constraintAnnotation.pattern();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            LocalDate localDate = LocalDate.parse(value+<span class="string">&quot;01&quot;</span>, DateTimeFormatter.ofPattern(pattern));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="Custom-Validation-사용"><a href="#Custom-Validation-사용" class="headerlink" title="Custom Validation 사용"></a>Custom Validation 사용</h2></blockquote><figure class="highlight plaintext"><figcaption><span>Target에 Field를 입력해주었기 때문에, 변수에도 사용할 수 있습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">아래와 같이 birthday라는 변수 위에 Annotation을 추가해주었으며,</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class User &#123;</span><br><span class="line">    @NotBlank</span><br><span class="line">    private String name;</span><br><span class="line">    @Max(value = 90)</span><br><span class="line">    private int age;</span><br><span class="line">    @Email</span><br><span class="line">    private String Email;</span><br><span class="line">    @YearMonth</span><br><span class="line">    private String birthday;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>컨트롤러 단에서 User 객체의 멤버 변수에 설정한 Annotation들이 동작하도록 <code>@Valid</code>라는 Annotation을 입력해주었습니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">post</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user, BindingResult bindingResult)</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot에서의 Exception 처리</title>
      <link href="/10/18/SpringException/"/>
      <url>/10/18/SpringException/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><p>Web Application의 입장에서, 에러가 발생했을 때 처리해줄 수 있는 방법은 많지 않다.<br>크게 <strong>에러 페이지</strong>, <strong>4 ~ 500번대 에러</strong>, <strong>별도의 에러 메세지 전달</strong> 정도가 있다.</p><p><strong>아래 예제 코드를 통해 확인해보도록 하자.</strong></p><p>name(String), age(Integer) 속성을 가지고 있는 User 객체에, controller에서 Integer와 int의 합을 도출하도록 해서 억지로 에러를 발생시켜 보았다.</p><details><summary>User 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="meta">@Size(min = 2, max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(1)</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>Controller 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.exception.dto.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String name, <span class="meta">@RequestParam(required = false)</span> Integer age)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        <span class="comment">// 에러 발생 시키기</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>+age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">post</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><p>Client에게 친절한 Exception 처리는 기본적으로 두 가지 방식이 있다. </p><p>이를 <strong>Advice(조언)</strong> 이라고 한다. Server에서 Client에게 오류에 대한 조언을 해주는 것이다.</p><blockquote><h2 id="관련-Annotation"><a href="#관련-Annotation" class="headerlink" title="관련 Annotation"></a>관련 Annotation</h2></blockquote><h3 id="RestControllerAdvice"><a href="#RestControllerAdvice" class="headerlink" title="@RestControllerAdvice"></a>@RestControllerAdvice</h3><ul><li>페이징 처리를 하는 view resolver 영역의 white label page, error page를 global하게 처리할 수 있는 집합 장소</li></ul><h3 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h3><ul><li>Global하게 처리할 때는 <strong>RestControllerAdvice Annotation</strong>이 붙은 클래스 내에, 특정 Controller의 예외 처리를 할 때 특정 컨트롤러 내부에 사용한다.</li><li><strong>동일한 Handler가 Global, Controller에 모두 존재하면 특정 Controller 내부의 handler가 처리된다.</strong></li></ul><details><summary>전역으로 처리하는 handler 생성</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalControlAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">exception</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        System.out.println(e.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        System.out.println(e.getLocalizedMessage());</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>특정 Exception 처리하는 handler생성</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(value = NullPointerException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">methodArg</span><span class="params">(NullPointerException e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="string">&quot;값이 유효하지 않습니다.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>    <p>혹은 RestControllerAdvice Annotation에 basePackageClasses인자를 추가하여 특정 컨트롤러에 한정 시킬 수 있다.</p><ul><li><code>@RestControllerAdvice(basePackageClasses = ApiController.class)</code></li></ul><blockquote><h2 id="Client-단에서-발생할-수-있는-에러"><a href="#Client-단에서-발생할-수-있는-에러" class="headerlink" title="Client 단에서 발생할 수 있는 에러"></a>Client 단에서 발생할 수 있는 에러</h2></blockquote><p><strong>Client가 발생시킬 수 있는 에러는 형식에 맞지 않게 값을 입력하는 것이다.</strong> 이름을 1글자만 입력하거나, 나이를 0살로 입력하는 등의 예가 있다.</p><p>Validated Annotation을 클래스 단에 추가해준 뒤 GetMapping을 해주는 get 메서드의 RequestParam에 제한 사항을 추가해 주었다.</p><p>이름을 최소 2글자 이상 작성하여야 하고, 나이는 최소 1살이며 비워두면 안된다.</p><details><summary>Validated 예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Size(min = 2)</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NotNull</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Min(1)</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam</span> Integer age)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setAge(age);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="처음-접근은-Client단에서-값을-잘못입력했을-때"><a href="#처음-접근은-Client단에서-값을-잘못입력했을-때" class="headerlink" title="처음 접근은 Client단에서 값을 잘못입력했을 때"></a>처음 접근은 Client단에서 값을 잘못입력했을 때</h3><h3 id="어떠한-Exception이-발생하는지-확인하는-것으로-시작한다"><a href="#어떠한-Exception이-발생하는지-확인하는-것으로-시작한다" class="headerlink" title="어떠한 Exception이 발생하는지 확인하는 것으로 시작한다."></a>어떠한 Exception이 발생하는지 확인하는 것으로 시작한다.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ApiController 클래스에서 발생한 오류</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackageClasses = ApiController.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiControllerAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Exception 클래스 내부의 객체가 들어오면 실행 (모든 Exception을 받는다)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">exception</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Exception의 클래스 이름을 출력하여 확인한다.</span></span><br><span class="line">        System.out.println(e.getClass().getName());</span><br><span class="line">        <span class="comment">// 테스트 코드이므로 Client 단에는 아무것도 출력되지 않도록 하였습니다.</span></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/talendTest.png" alt="img_1.png"></p><p>Chrome의 확장 프로그램인 Talend API를 통해 서버 테스트를 해보았다.</p><p>RequestParameter에 아무 값도 넣어주지 않아 아래와 같은 에러가 도출됐다.</p><p><img src="/image/talend.png" alt="img.png"></p><p>위와 같이 <strong>Spring에서 자체적으로 예외에 대한 기본적인 처리는 해준다.</strong></p><p>출력된 클래스는 <strong>org.springframework.web.bind.MissingServletRequestParameterException</strong>가 IDE에 출력되었다.</p><p>MissingServletRequestParameterException이 잡혔으니 value값을 이로 설정해서 원하는 정보를 제공할 수 있도록 구현해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">missingServletRequestParameterException</span><span class="params">(MissingServletRequestParameterException e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(<span class="string">&quot;값이 입력되지 않았습니다.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 body에 정보를 보내주고, HttpStatus는 400을 띄워주었다.</p><p><img src="/image/errorinfo.png" alt="img.png"></p><p>보다 Client들이 발생시키는 오류를 줄일 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>어댑터 패턴 (Adapter Pattern)</title>
      <link href="/10/14/adapter/"/>
      <url>/10/14/adapter/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Adapter-Pattern-이란-무엇인가"><a href="#Adapter-Pattern-이란-무엇인가" class="headerlink" title="Adapter Pattern 이란 무엇인가?"></a>Adapter Pattern 이란 무엇인가?</h2></blockquote><p>어댑터 패턴은 클래스의 인터페이스를 사용자가 기대하는 다른 인터페이스를 변환해주는 패턴으로, 호환성이 없는 인터페이스로 인해 <strong>호환이 되지않는 클래스들을 함께 작동할 수 있도록 해준다.</strong></p><p>대부분의 글에서 이 어댑터를 ‘돼지코’라 불리는 변환 어댑터를 예시로 듭니다.</p><p>또한 아래와 같은 사진을 자주 보실 수 있습니다.</p><p><img src="https://t1.daumcdn.net/cfile/tistory/99AAB74D5C305D4721" alt="image"></p><p><strong>여기서 Client는 사용자를 뜻합니다.</strong></p><p><strong>Target은 돼지코를 꽂을 수 있는 콘센트입니다.</strong> 일본에 여행을 가서 핸드폰을 충전하려고 보니 콘센트가 110V 충전기만 호환되도록 <strong>11자 모양</strong>으로 구멍이 뚫려있습니다. </p><p><strong>Adaptee는 제가 가지고 있는 220V 충전기</strong>인데 일본 콘센트(Target)에 꽂을 수가 없겠죠?</p><p>이 때 필요한게 <strong>Adapter, 돼지코</strong>입니다. 돼지코는 220V의 콘센트를 받아 110V로 변환시켜줍니다. 돼지코의 단자, 출력은 Target(110V 콘센트)과 같은 110V입니다. 이 부분을 계속 떠올리셔야 헷갈리지 않게 구현할 수 있습니다.</p><blockquote><h4 id="여기서-포인트는-기존의-충전기-자체를-변경하지않고-그대로-사용할-수-있는-것입니다"><a href="#여기서-포인트는-기존의-충전기-자체를-변경하지않고-그대로-사용할-수-있는-것입니다" class="headerlink" title="여기서 포인트는 기존의 충전기 자체를 변경하지않고, 그대로 사용할 수 있는 것입니다."></a><strong>여기서 포인트는 기존의 충전기 자체를 변경하지않고, 그대로 사용할 수 있는 것입니다.</strong></h4></blockquote><blockquote><h2 id="Adapter-Pattern의-구현"><a href="#Adapter-Pattern의-구현" class="headerlink" title="Adapter Pattern의 구현"></a>Adapter Pattern의 구현</h2></blockquote><p>돼지코를 통해 전체적인 흐름을 보았으니, 실무적인 영역으로 넘어가 보겠습니다.</p><p><strong>1. Client는 항상 같은 Target을 통해 Web에 특정한 요청을 하고 있습니다.</strong></p><p><strong>2. Client에게 새로운 기능을 제공하기 위해 외부에 요청하여 바이트코드 파일을 전달받았습니다.</strong></p><ul><li>기존에 기능을 제공하는 Interface와 호환되지 않고, 직접적인 접근이 불가능합니다.</li></ul><p><strong>3. Adapter를 통해 기존 Interface와 외부 코드를 호환시켜줍니다.</strong></p><ul><li>이때 Adapter는 위의 돼지코 단자, 출력이 Target, 110V와 같은 것과 같이 기존 Interface와 같아야합니다.</li></ul><h4 id="1-Target-콘센트-WebRequester"><a href="#1-Target-콘센트-WebRequester" class="headerlink" title="1. Target (콘센트, WebRequester)"></a>1. Target (콘센트, WebRequester)</h4><ul><li>Target은 <strong>WebRequester</strong> 입니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebRequester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">requestHandler</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-외부-코드"><a href="#2-외부-코드" class="headerlink" title="2. 외부 코드"></a>2. 외부 코드</h4><ul><li>기존 Target Interface와 호환이 되지 않는 형태입니다.</li><li>예시에서는 제가 임의로 작성하였기에 직접적인 접근도 가능하고 수정이 가능하지만, 바이트코드로 저장해서 불러오면 직접적인 접근이 어렵습니다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;New Service&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-Adapter-생성"><a href="#3-Adapter-생성" class="headerlink" title="3. Adapter 생성"></a>3. Adapter 생성</h4><ul><li><strong>계속 강조했던 부분이 나옵니다.</strong> 아래 질문에 대해 생각을 잠시 해보고 넘어가시면 좋습니다.<ul><li><strong>Target(콘센트)은</strong> 몇 V였나요?</li><li>돼지코는 220V를 호환시켜주기 위해 <strong>220V를 받아주고</strong>, <strong>결국 몇 V 였을까요?</strong></li></ul></li></ul><p>여기서부터는 다시 정리를 하며 한 줄씩 작성해 나가보겠습니다.</p><p><strong>3-1. 어댑터 클래스를 만들어줍니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">질문1. 돼지코 예제에서 Target은 몇 V였나요?</span><br><span class="line"></span><br><span class="line">질문2. 돼지코는 몇 V에 꽂으려한 거 였을까요?</span><br><span class="line"></span><br><span class="line">&lt; 정답 : 콘센트와 돼지코는 호환이되는 110V였습니다. &gt;</span><br></pre></td></tr></table></figure><p><strong>3-2. Adapter를 Target과 호환시키기 위해 형태를 맞춰줍니다.</strong></p><ul><li>Target, Adapter는 콘센트와 돼지코처럼 호환되기 위해 형태가 같아야겠죠?</li><li>Adapter class에 WebRequester를 implements해줍니다.<ul><li>Interface였으니까 Override를 해주어야겠죠?</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">WebRequester</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-호환시켜주고-싶은-Adaptee를-Adapter에-꽂아줍니다"><a href="#4-호환시켜주고-싶은-Adaptee를-Adapter에-꽂아줍니다" class="headerlink" title="4. 호환시켜주고 싶은 Adaptee를 Adapter에 꽂아줍니다."></a>4. 호환시켜주고 싶은 Adaptee를 Adapter에 꽂아줍니다.</h4><ul><li>돼지코만 콘센트에 꽂아두면 안되겠죠 ?, 돼지코에 220V 충전기(Adaptee)를 연결해주어야 의미가 있는 거겠죠 !</li><li><strong>여기서 Adaptee는 2번에서 보았던 외부 코드, 새로운 기능입니다.</strong></li><li>NewService 클래스를 Adapter에 주입해주었습니다 (돼지코(Adapter)에 220V(NewService)를 꽂아준 것입니다.)<ul><li>다른 클래스의 객체를 내부에 주입시키는 것을 의존성 주입(Dependency Injection)이라고 합니다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">WebRequester</span></span>&#123;</span><br><span class="line">    NewService newService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(NewService newService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.newService = newService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        newService.newService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Adapter-Pattern-완성"><a href="#5-Adapter-Pattern-완성" class="headerlink" title="5. Adapter Pattern 완성"></a>5. Adapter Pattern 완성</h4><ul><li>4번과 같이 의존성 주입을 통해 호환이 되지 않던 기능과 인터페이스가 Adapter를 통해 호환이 되게 되었습니다!</li><li>테스트를 해보겠습니다.</li><li>궁극적인 형태는 WebRequester(Target)였죠?<ul><li><code>WebRequester webRequester =</code></li></ul></li><li>NewService를 Adapter에 꽂아 형태를 맞춰줍니다.<ul><li><code>new Adapter(new NewService())</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebRequester webRequester = <span class="keyword">new</span> Adapter(<span class="keyword">new</span> NewService());</span><br><span class="line">        webRequester.requestHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 어탭터 패턴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>프로세스, 스레드, 교착상태, 메모리 계층</title>
      <link href="/10/14/0-interview-os/"/>
      <url>/10/14/0-interview-os/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="1-프로세스와-스레드-차이"><a href="#1-프로세스와-스레드-차이" class="headerlink" title="1. 프로세스와 스레드 차이"></a>1. 프로세스와 스레드 차이</h2></blockquote><p>프로세스는 프로그램이 OS로부터 메모리를 할당받은 동적인 상태의 프로그램 (OS 입장에서 최소 작업단위)</p><p>스레드는 프로세스가 할당받은 자원을 이용하는 실행 흐름의 단위 (CPU 입장에서 최소 작업단위)</p><p>프로세스 별로 최소 1개의 스레드를 보유하며, PCB라는 별도의 독립적인 주소 공간을 할당 받는다</p><p>프로세스 내의 스레드는 stack 영역을 독립적으로 갖으며, 나머지 영역은 서로 공유하게 됩니다.</p><blockquote><h3 id="1-1-PCB-영역에-대한-설명"><a href="#1-1-PCB-영역에-대한-설명" class="headerlink" title="1-1. PCB 영역에 대한 설명"></a>1-1. PCB 영역에 대한 설명</h3><p>PCB : stack, heap, data, code</p></blockquote><ul><li>OS가 프로세스를 제어하기 위해 프로세스의 상태 정보를 저장하는 곳</li><li>PID, state, 포인터, 레지스터 관련 정보, priority, account(CPU 관련), 입출력 상태 정보</li><li>프로세스 생성 시 만들어지며 주 기억장치에 저장된다.</li><li>interrupt시 context switching 에 사용</li></ul><blockquote><h3 id="1-2-Data-영역에는-무엇이-저장되는가"><a href="#1-2-Data-영역에는-무엇이-저장되는가" class="headerlink" title="1-2. Data 영역에는 무엇이 저장되는가"></a>1-2. Data 영역에는 무엇이 저장되는가</h3></blockquote><ul><li>전역 변수(정적 변수, 배열, 구조체 등), 프로그램 종료 시 시스템에 반환한다.</li><li>초기화된 변수를 저장하는 data와, 초기화 되지 않은 변수를 저장하는 bss로 나뉜다.</li></ul><blockquote><h3 id="1-3-프로세스-안의-4가지-영역-중-메모리가-끝날때까지-남는-영역"><a href="#1-3-프로세스-안의-4가지-영역-중-메모리가-끝날때까지-남는-영역" class="headerlink" title="1-3. 프로세스 안의 4가지 영역 중 메모리가 끝날때까지 남는 영역"></a>1-3. 프로세스 안의 4가지 영역 중 메모리가 끝날때까지 남는 영역</h3></blockquote><ul><li>코드와 데이터 영역</li><li>코드 : 실행할 프로그램 코드가 저장되는 영역, 프로그램이 시작되고 끝날 때까지 메모리에 유지된다.</li><li>데이터 : 전역 변수와 스태틱 변수가 저장되며 프로그램 시작때 할당되고 종료될 때 해제된다.</li></ul><blockquote><h3 id="1-4-스레드가-생겨난-배경"><a href="#1-4-스레드가-생겨난-배경" class="headerlink" title="1-4. 스레드가 생겨난 배경"></a>1-4. 스레드가 생겨난 배경</h3></blockquote><ul><li>프로그램이 복잡해지면서 단일 프로세스를 이용하여 프로그램을 실행해지기 힘들어짐 </li><li>안정성때문에 여러 프로세스를 사용하지않고 더 작은 실행 단위 개념인 스레드를 만들었다.</li></ul><hr><blockquote><h2 id="2-멀티-프로세스로-처리-가능한-것을-멀티-스레드로-처리하는-이유"><a href="#2-멀티-프로세스로-처리-가능한-것을-멀티-스레드로-처리하는-이유" class="headerlink" title="2. 멀티 프로세스로 처리 가능한 것을 멀티 스레드로 처리하는 이유"></a>2. 멀티 프로세스로 처리 가능한 것을 멀티 스레드로 처리하는 이유</h2></blockquote><p>프로세스는 생성할 때마다 자원을 할당하는 system call을 호출하게 되고, IPC를 통해 interrupt를 발생시키며 통신하게 됩니다.</p><p>멀티 스레드로 처리할 시 system call이 감소하고, IPC보다 스레드간의 통신비용이 더 적기 때문에 자원의 효율성을 위해 멀티스레드로 처리합니다.</p><p>하지만 스레드들은 PCB 중 stack 영역을 제외한 자원을 공유하기 때문에, 이를 해결하기 위해 동기화에 신경써야합니다.</p><blockquote><h3 id="2-1-스택을-스레드마다-독립적으로-할당하는-이유"><a href="#2-1-스택을-스레드마다-독립적으로-할당하는-이유" class="headerlink" title="2-1. 스택을 스레드마다 독립적으로 할당하는 이유"></a>2-1. 스택을 스레드마다 독립적으로 할당하는 이유</h3><p>스택은 함수 호출시 전달되는 인자, 되돌아갈 주소값, 함수 내에서 선언하는 변수 등을 저장하기 위해 사용하는 메모리 공간이다.</p></blockquote><p>스택이 독립적이라는 것은 독립적인 함수의 호출이 가능하고, 독립적인 실행 흐름이 추가되는 것이다.</p><p>따라서 스레드의 정의에 따라 독립적인 실행 흐름을 추가하기 위한 최소 조건으로 독립된 스택을 할당하는 것이다.</p><blockquote><h3 id="2-2-PC-Program-Counter-Register를-스레드마다-독립적으로-할당하는-이유"><a href="#2-2-PC-Program-Counter-Register를-스레드마다-독립적으로-할당하는-이유" class="headerlink" title="2-2. PC(Program Counter) Register를 스레드마다 독립적으로 할당하는 이유"></a>2-2. PC(Program Counter) Register를 스레드마다 독립적으로 할당하는 이유</h3><p>PC는 명령어의 어디까지 수행하였는가를 가리킨다.</p></blockquote><p>Interrupt가 발생하면서 명령어는 연속적으로 수행되지 못하기 때문에, 어느 부분까지 수행했는지를 기억하고 있어야한다.</p><p>그러므로 PC 레지스터가 독립적으로 할당될 필요가 있다.</p><blockquote><h3 id="2-3-프로세스를-생성할-때-어떤-system-call을-필요로-하는가"><a href="#2-3-프로세스를-생성할-때-어떤-system-call을-필요로-하는가" class="headerlink" title="2-3. 프로세스를 생성할 때 어떤 system call을 필요로 하는가"></a>2-3. 프로세스를 생성할 때 어떤 system call을 필요로 하는가</h3></blockquote><ul><li>fork() : 부모와 완전히 독립된, 새로운 pid를 갖는 자식 프로세스 생성</li><li>exec() : 프로세스의 메모리 영역을 덮어씌워 다른 프로세스로 변환 -&gt; 프로세스 유지를 위해 fork를 하여 자식에서 주로 사용된다.</li></ul><hr><blockquote><h2 id="3-교착-상태-Dead-Lock"><a href="#3-교착-상태-Dead-Lock" class="headerlink" title="3. 교착 상태 (Dead Lock)"></a>3. 교착 상태 (Dead Lock)</h2></blockquote><p>교착 상태는 시스템적으로 한정된 자원을 여러 곳에서 사용하려고 할 때 발생하며, 프로세스가 자원을 얻지 못해 작업을 수행하지 못하는 상태입니다.</p><blockquote><h3 id="3-1-교착-상태의-4가지-조건"><a href="#3-1-교착-상태의-4가지-조건" class="headerlink" title="3-1. 교착 상태의 4가지 조건"></a>3-1. 교착 상태의 4가지 조건</h3></blockquote><p>조건에는 프로세스들이 필요로 하는 자원에 대해 배타적인 통제권을 요구하는 <strong>상호배제</strong>,</p><p>프로세스가 할당된 자원을 가진 상태에서 다른 자원을 기다리는 <strong>점유대기</strong>,</p><p>자원의 사용이 끝날 때까지 자원을 가져올 수 없는 <strong>비선점</strong>,</p><p>순환적으로 다음 프로세스가 요구하는 자원을 갖는 <strong>순환대기</strong>가 있습니다.</p><p>해결 방법으로는 예방, 회피, 무시, 발견이 있습니다.</p><hr><blockquote><h2 id="4-메모리-계층"><a href="#4-메모리-계층" class="headerlink" title="4. 메모리 계층"></a>4. 메모리 계층</h2></blockquote><p>피라미드 구조로 위에서부터 레지스터 - 캐시 - 메모리 - 하드디스크의 구조를 가지고있습니다.<br>이 구조는 CS 관점과, 경제성 관점에서 확립될 수 있습니다.</p><p>레지스터와 캐시는 CPU 내부에 존재하여 빠르게 접근이 가능하고, 메모리는 CPU 외부에 존재하여 비교적 느리게 접근합니다. </p><p>하드 디스크에는 CPU가 직접적으로 접근할 수 없습니다.</p><p>접근하기 위해서는 하드 디스크의 데이터를 메모리로 이동시켜서 접근가능한데 속도가 느립니다.</p><blockquote><h3 id="4-1-메모리-계층왜-이렇게-구조화되어-있는가"><a href="#4-1-메모리-계층왜-이렇게-구조화되어-있는가" class="headerlink" title="4-1. 메모리 계층왜 이렇게 구조화되어 있는가?"></a>4-1. 메모리 계층왜 이렇게 구조화되어 있는가?</h3></blockquote><ul><li>컴퓨터 과학계에서 증명된 ‘참조의 지역성’의 관점에서 자주 쓰일 거 같은 데이터를 하드디스크에서 메모리로, 메모리에서 캐시로 읽어 오는데, 이 크기는 점진적으로 작아진다.</li><li>비용적인 측면에서도 비싼 레지스터, 캐시는 필요한만큼의 크기만 사용하고, 저렴한 하드디스크는 넉넉하게 사용하여 피라미드 형태로 나타난다.</li></ul><blockquote><h3 id="4-2-캐시가-존재하는-이유"><a href="#4-2-캐시가-존재하는-이유" class="headerlink" title="4-2. 캐시가 존재하는 이유"></a>4-2. 캐시가 존재하는 이유</h3><p>메인메모리와 프로세서 간의 시간적, 공간적 차이가 나기 때문에, </p></blockquote><p>캐시를 사용하여 자주 쓰고 인접한 데이터를 빠르게 처리한다.</p>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 프로세스 </tag>
            
            <tag> 스레드 </tag>
            
            <tag> 교착상태 </tag>
            
            <tag> 메모리 계층 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell Script와 서버 작업 자동화</title>
      <link href="/10/14/shell/"/>
      <url>/10/14/shell/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h2 id="쉘-스크립트를-통한-서버-작업-자동화-및-운영-DevOps"><a href="#쉘-스크립트를-통한-서버-작업-자동화-및-운영-DevOps" class="headerlink" title="쉘 스크립트를 통한 서버 작업 자동화 및 운영(DevOps)"></a>쉘 스크립트를 통한 서버 작업 자동화 및 운영(DevOps)</h2><blockquote><h3 id="Why-왜-필요한가"><a href="#Why-왜-필요한가" class="headerlink" title="Why? 왜 필요한가?"></a>Why? 왜 필요한가?</h3></blockquote><p>서버는 일반적으로 로그파일을 생성한다. 생성 도중 용량 문제 등으로 작업이 중지되어 프로그램이 비정상적인 동작을 하여 다운되었다고 가정했을 때, 어떻게 문제를 해결할 수 있을까?</p><p>간단한 쉘 스크립트를 통해 일정 시간이 경과한 로그파일을 자동으로 삭제해주면 저장 공간에 대한 오류는 해결할 수 있다.</p><blockquote><h3 id="쉘-스크립트"><a href="#쉘-스크립트" class="headerlink" title="쉘 스크립트"></a>쉘 스크립트</h3></blockquote><p>쉘 명령어를 기본으로 하되, 몇 가지 문법이 추가된 형태이다.</p><p>쉘 스크립트는 <code>filename.sh</code> 형태의 파일로 작성 후, 파일을 실행한다.</p><blockquote><h3 id="기본-문법"><a href="#기본-문법" class="headerlink" title="기본 문법"></a>기본 문법</h3></blockquote><p>파일의 가장 첫 라인은 <code>#!/bin/bash</code>로 시작한다.</p><p>쉘 스크립트 파일은 실행 시 권한을 가지고 있어야한다.<br>    - <code>chmod 777 &lt;FileName&gt;</code>등과 같이 실행 권한을 부여해준다.</p><h4 id="1-변수"><a href="#1-변수" class="headerlink" title="1. 변수"></a>1. 변수</h4><ul><li><p><code>변수명=&#39;text&#39;</code> 와 같이 띄어쓰기 없이 입력해준다. text 내의 띄어쓰기는 가능하다.</p></li><li><p><code>$</code> 기호를 통해 변수임을 알려준다.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">my_name=<span class="string">&#x27;Dongryeol Jeong&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_name</span></span><br></pre></td></tr></table></figure><h4 id="2-배열"><a href="#2-배열" class="headerlink" title="2. 배열"></a>2. 배열</h4><ul><li><p><code>변수명=(데이터1 데이터2 데이터3)</code> 과 같이 배열을 선언할 수 있다.</p></li><li><p><code>$&#123;변수명[인덱스번호])</code> 로 배열을 출력할 수 있다.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>=(<span class="string">&quot;http&quot;</span> <span class="string">&quot;sqld&quot;</span> <span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 모든 데이터 출력 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test[@]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test[*]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 특정 인덱스 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;test[1]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 배열의 크기 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#test[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 디렉토리의 파일 리스트를 배열로 입력받는 법</span></span><br><span class="line">file = $(ls)</span><br><span class="line"><span class="comment"># 출력</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file[*]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-지역변수"><a href="#3-지역변수" class="headerlink" title="3. 지역변수"></a>3. 지역변수</h4><ul><li><p><code>$$</code> : 쉘의 프로세스 번호, pid</p></li><li><p><code>ls -al -z</code>를 실행했을 때</p><ul><li><p><code>$0</code> : 쉘 스크립트 이름 (<code>ls</code>)</p></li><li><p><code>$1 ~ $9</code> : 명령 줄의 인수 (<code>$1</code> : <code>-al</code> , <code>$2</code> : <code>-z</code>)</p></li><li><p><code>$*</code> : 모든 명령줄 인수 리스트 (<code>-al -z</code>)</p></li><li><p><code>$#</code> : 인수의 개수 (2개)</p></li><li><p><code>$?</code> : 최근 실행한 명령어의 종료 값</p><ul><li>0 : 성공</li><li>1 ~ 255 : 에러 메세지</li></ul></li></ul></li></ul><h4 id="4-연산"><a href="#4-연산" class="headerlink" title="4. 연산"></a>4. 연산</h4><ul><li><p><code>`expr`</code> : 숫자 계산</p></li><li><p>피 연산자와 연산 기호를 expr 뒤에 붙혀준다.</p></li><li><p><strong>괄호에는 항상 <code>\</code>(역슬래쉬)를 붙여주어야한다.</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ret=`expr \( 10 + 20 \) / 8 + 1`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ret</span></span><br></pre></td></tr></table></figure><h4 id="5-조건문"><a href="#5-조건문" class="headerlink" title="5. 조건문"></a>5. 조건문</h4><ul><li><p><code>if</code>로 시작하여 <code>fi</code>로 끝내준다.</p></li><li><p><strong>값 비교 문법</strong></p><ul><li><code>-z</code> : 문자가 null이면 true</li><li><code>-n</code> : 문자가 null이면 false</li><li><code>-eq</code> : equal (같으면 참)</li><li><code>-ne</code> : not equal (다르면 참)</li><li><code>-lt</code> : less than</li><li><code>-le</code> : less or equal</li><li><code>-gt</code> : greater than</li><li><code>-ge</code> : greater or equal</li></ul></li></ul><p><strong>파일 검사 문법</strong></p><ul><li><code>-e</code> : 파일이 존재하면 true<ul><li><code>-d</code> : 파일이 디렉토리이면 true</li><li><code>-h</code> : 심볼링 링크파일이면 true</li><li><code>-f</code> : 일반 파일이면 true</li><li><code>-r</code> : 읽기 가능하면 true</li><li><code>-s</code> : 파일 크기가 0이 아니면 true</li><li><code>-u</code> : 파일이 set-user-id가 설정되면 true</li><li><code>-w</code> : 파일이 쓰기 가능 상태이면 true</li><li><code>-x</code> : 파일이 실행 가능 상태이면 true</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -eq <span class="variable">$2</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Same Values&quot;</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Different Values&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="6-반복문"><a href="#6-반복문" class="headerlink" title="6. 반복문"></a>6. 반복문</h4><h5 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h5><ul><li><p><code>for 변수 in 변수값1 변수값 2 ...</code> 로 범위를 설정하고, <code>do</code> 다음 줄에 실행구문을 작성하고 <code>done</code>으로 반복문을 종료한다.</p></li><li><p><code>ls</code>를 통해 디렉토리에 있는 모든 파일을 출력해주고 끝내는 반복문</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> $(ls)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$data</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h5 id="while문"><a href="#while문" class="headerlink" title="while문"></a>while문</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">list=$(ls)</span><br><span class="line">num=<span class="variable">$&#123;#list[*]&#125;</span></span><br><span class="line">index=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$num</span> -ge 0 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;list[$index]&#125;</span></span><br><span class="line">index=`expr <span class="variable">$index</span> + 1`</span><br><span class="line">num=`expr <span class="variable">$num</span> - 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="서버에서-쉘-스크립트-사용"><a href="#서버에서-쉘-스크립트-사용" class="headerlink" title="서버에서 쉘 스크립트 사용"></a>서버에서 쉘 스크립트 사용</h3></blockquote><p>ping 명령어를 통해 ip에 요청을 보내고 응답이 돌아올 시 “GateWay ping succeed” 구문을 출력하고, 실패 시 “GateWay ping failed” 구문을 출력하게 하여 서버가 열려있는지 확인할 수 있다.</p><p>타 컴퓨터와 협업을 할 때 ping을 통해 확인하고, 성공 시 작업을 수행하게 할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ping -c 1 192.168.0.3 1&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GateWay ping succeed&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GateWay ping failed&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="백업하기"><a href="#백업하기" class="headerlink" title="백업하기"></a>백업하기</h4><p>두 개의 인자를 받았을 때 null이면 파일을 만들어서 폴더에 넣어주고, 아니면 각각 디렉토리에 날짜를 포함한 이름을 설정하여 저장</p><h5 id="압축-명령"><a href="#압축-명령" class="headerlink" title="압축 명령"></a>압축 명령</h5><ul><li><code>tar</code> : 과게어는 여러 파일을 묶기만 했었지만, 현재는 파일을 묶고 압축할 수 있다.</li><li>주요 옵션<ul><li>x : 묶음 해제</li><li>c : 파일 묶음</li><li>v : 묶음 / 해제 과정을 화면에 표시</li><li>z : gunzip 사용</li><li>f : v파일 이름 지정</li><li>압축 시 주로 사용하는 옵션 : <code>tar -cvzf [압축파일 이름] [압축할 파일 or 폴더명]</code></li><li>해제 시 주로 사용하는 옵션 : <code>tar -xvzf [압출 해제할 아카이브 이름]</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ]||[ -z <span class="variable">$2</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> usage: <span class="variable">$0</span> sourcedir targetdir</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">SRCDIR=<span class="variable">$1</span></span><br><span class="line">DSTDIR=<span class="variable">$2</span></span><br><span class="line">BACKUPFILE=backup.$(date +%y$m$d$H$M<span class="variable">$S</span>).tar.gz</span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$DSTDIR</span> ]; <span class="keyword">then</span></span><br><span class="line">tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mkdir <span class="variable">$DSTDIR</span></span><br><span class="line">tar -cvzf <span class="variable">$DSTDIR</span>/<span class="variable">$BACKUPFILE</span> <span class="variable">$SRCDIR</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="Logfile-정리하기"><a href="#Logfile-정리하기" class="headerlink" title="Logfile 정리하기"></a>Logfile 정리하기</h3></blockquote><p><strong>정책을 먼저 정하고, 그에 따라 파일을 어떻게 관리해줄 것인지 구현한다.</strong></p><p>2일이 경과한 log파일은 gz파일로 압축시켜주고, 압축된 지 3일이 경과한 파일은 삭제하도록한다.</p><p>find 함수를 통해 아래와 같이 구현할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LOGDIR=/var/<span class="built_in">log</span></span><br><span class="line">GZIPDAY=1</span><br><span class="line">DELDAY=2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$LOGDIR</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cd <span class="variable">$LOGDIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line">sudo find . -<span class="built_in">type</span> f -name <span class="string">&#x27;*log.*&#x27;</span> -mtime +<span class="variable">$GZIPDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;gzip &#123;&#125;&quot;</span> \; 2&gt; /dev/null</span><br><span class="line">sudo find . -<span class="built_in">type</span> f -name <span class="string">&#x27;*.gz&#x27;</span>  -mtime +<span class="variable">$DELDAY</span> -<span class="built_in">exec</span> bash -c <span class="string">&quot;rm -f &#123;&#125;&quot;</span> \; 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 서버 자동화 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPC - 파이프 (Pipe)</title>
      <link href="/10/12/realpipe/"/>
      <url>/10/12/realpipe/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Pipe-파이프-기법"><a href="#Pipe-파이프-기법" class="headerlink" title="Pipe(파이프) 기법"></a>Pipe(파이프) 기법</h2></blockquote><p><img src="https://miro.medium.com/max/4800/1*O9f0bRS5cPfLQBM1-SpbIQ.png" alt="image"></p><p>기본적인 파이프 기법은 <strong>단방향 통신</strong>으로 구성되어 있습니다. Half-Duplex 통신이라고 불리기도 합니다.</p><p>두 개의 프로세스를 연결하여 한 쪽에서는 데이터를 write하고, 다른 한 쪽에서는 read만 할 수 있습니다. 또는 <strong>한 프로세스의 출력 스트림을 다른 프로세스의 입력 스트림으로 사용할 때 사용됩니다.</strong></p><p>C언어에서 <code>fork()</code>로 자식 프로세스를 생성했을 때, <strong>부모와 자식간의 통신</strong>도 파이프를 통해 이루어지게 됩니다.</p><p>아래 예제를 통해 파이프 코드를 살펴보도록 하겠습니다.</p><blockquote><h2 id="Pipe-예제-코드"><a href="#Pipe-예제-코드" class="headerlink" title="Pipe 예제 코드"></a>Pipe 예제 코드</h2></blockquote><h3 id="1-출력-스트림을-입력-스트림으로-사용"><a href="#1-출력-스트림을-입력-스트림으로-사용" class="headerlink" title="1. 출력 스트림을 입력 스트림으로 사용"></a>1. 출력 스트림을 입력 스트림으로 사용</h3><p>Mac OS의 iterm에서 디렉토리 내 디렉토리, 파일을 보여주는 ls코드로 예제를 만들어 보겠습니다.</p><p><code>ls -al</code>를 입력하여 아래와 같은 화면이 출력되었습니다. </p><p><img src="/image/lsal.png" alt="img.png"></p><p>위 폴더 중 <strong>단어 code</strong>가 포함된 결과물만을 출력할 때 파이프 라인을 사용할 수 있습니다.</p><p><code>ls -al | grep code</code> </p><ul><li>파이프 라인을 통하여 위 1차 출력을 입력으로 받고, 그 중 code가 포함된 결과물을 가져 옵니다.</li><li>여기서 <code>|</code>가 파이프 라인을 의미합니다.</li></ul><p><img src="/image/grep.png" alt="img_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPC </tag>
            
            <tag> Pipe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPC (Inter-Process Communication)</title>
      <link href="/10/12/pipe/"/>
      <url>/10/12/pipe/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="IPC란-무엇인가"><a href="#IPC란-무엇인가" class="headerlink" title="IPC란 무엇인가?"></a>IPC란 무엇인가?</h2></blockquote><p><img src="https://static.packt-cdn.com/products/9781785883057/graphics/0af92d22-6bef-42c8-84cf-528fa13becf0.jpg" alt="image"></p><p><strong>IPC는 Inter-Process Communication의 약어로 프로세스간 통신의 약어이다.</strong></p><p><strong>프로세스는 서로 독립되어 있어 다른 프로세스의 영향을 받지 않습니다.</strong> 이는 보는 관점에 따라 장점이 될 수도, 단점이 될 수도 있습니다. </p><p>서로 독립되어 있어 다른 프로세스의 영향을 받지 않을 수 있다는 장점이 있지만, 이는 서로 간의 통신이 어려운 것으로 해석할 수 있습니다.</p><p>이를 위해 OS의 커널 영역에서는 IPC를 제공하고, 이를 통해 프로세스간 통신이 가능해집니다.</p><h3 id="IPC-표준"><a href="#IPC-표준" class="headerlink" title="IPC 표준"></a>IPC 표준</h3><h4 id="1-System-V-IPC"><a href="#1-System-V-IPC" class="headerlink" title="1. System V IPC"></a>1. System V IPC</h4><ul><li>오랜 역사를 가지고 있다.</li><li>서로 다른 기종간의 코드 호환성을 안정적으로 보장해준다.</li><li>불명확한 함수명과 API의 버전이 오래되었다.</li></ul><h4 id="2-POSIX-IPC"><a href="#2-POSIX-IPC" class="headerlink" title="2. POSIX IPC"></a>2. POSIX IPC</h4><ul><li>유닉스 시스템 프로그래밍 인터페이스 표준이다.</li><li>IEEE (Institute of Electronic and Electronics Engineers)에서 표준화를 시도함</li><li>직관적인 API로 인해 비교적 사용하기 쉽다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPC </tag>
            
            <tag> POSIX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object Mapper</title>
      <link href="/10/07/obejctmapper/"/>
      <url>/10/07/obejctmapper/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Object-Mapper"><a href="#Object-Mapper" class="headerlink" title="Object Mapper"></a>Object Mapper</h2></blockquote><p>Object Mapper를 통하여 Java에서 JSON 값을 가공 및 활용할 수 있습니다.</p><p>Java Object를 JSON으로 <strong>Serializing</strong> 하거나 반대로 JSON 객체를 Object로 <strong>Deserializing</strong> 할 수 있습니다.</p><blockquote><h2 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h2></blockquote><p>저는 <strong>Gradle</strong>과 <strong>Jackson Databind 2.12.3</strong> API를 사용하였습니다.</p><p>maven repository 홈페이지에서 <code>object mapper</code>키워드를 검색해서 찾을 수 있습니다.</p><p>편의를 위해 아래 코드 블럭에 위 버전의 dependency를 복사해두었습니다.</p><p>다른 버전 이용은 아래 링크를 참고해주세요</p><p><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind">MVN REPOSITORY - jackson databind</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind</span></span><br><span class="line"><span class="attr">implementation</span> <span class="string">group: &#x27;com.fasterxml.jackson.core&#x27;, name: &#x27;jackson-databind&#x27;, version: &#x27;2.12.3&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>build.gradle</strong>에 dependency를 추가하면 jar파일을 온라인에서 불러와 클래스 패스에 자체적으로 추가시켜줍니다.</p><blockquote><h2 id="Using-Case"><a href="#Using-Case" class="headerlink" title="Using Case"></a>Using Case</h2></blockquote><p>User 객체가 내부적으로 Car 객체의 배열을 갖는 형태로 구성하였습니다.</p><p>이해를 돕기 위해 아래 사진을 첨부하였습니다.</p><p><img src="/image/json.png" alt="img.png"></p><p><strong>User 클래스 멤버 변수</strong></p><ul><li>String name</li><li>int age</li><li>List<Car> cars</li></ul><p><strong>Car 클래스 멤버 변수</strong></p><ul><li>String name</li><li>String carNumber</li><li>String type</li></ul><details><summary>User 객체 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Car&gt; cars;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Car&gt; <span class="title">getCars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCars</span><span class="params">(List&lt;Car&gt; cars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cars = cars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, cars=&quot;</span> + cars +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>Car 객체 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String carNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCarNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCarNumber</span><span class="params">(String car_number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carNumber = car_number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, car_number=&#x27;&quot;</span> + carNumber + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><blockquote><h3 id="0-객체-준비"><a href="#0-객체-준비" class="headerlink" title="0. 객체 준비"></a>0. 객체 준비</h3></blockquote><ol><li><p><strong>User 객체</strong>에 나이와 이름을 <code>setter</code>를 통해 입력해줍니다.</p></li><li><p><strong>car 객체</strong> 2개를 생성하여 이름, 차량 번호, type을 입력해줍니다.</p><ul><li>User 객체에 보유한 차들을 List 형태로 가지고 있기 때문에 2개를 생성하였습니다.</li></ul></li><li><p>생성한 car 객체 2개를 Array 형태로 변환하여 User 객체에 넣어줍니다.</p></li></ol><details><summary>객체 생성 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">&quot;홍길동&quot;</span>);</span><br><span class="line">user.setAge(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car1 = <span class="keyword">new</span> Car();</span><br><span class="line">car1.setName(<span class="string">&quot;K5&quot;</span>);</span><br><span class="line">car1.setCarNumber(<span class="string">&quot;11가 1111&quot;</span>);</span><br><span class="line">car1.setType(<span class="string">&quot;sedan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car2 = <span class="keyword">new</span> Car();</span><br><span class="line">car2.setName(<span class="string">&quot;Q5&quot;</span>);</span><br><span class="line">car2.setCarNumber(<span class="string">&quot;22가 2222&quot;</span>);</span><br><span class="line">car2.setType(<span class="string">&quot;SUV&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Car&gt; carList = Arrays.asList(car1,car2);</span><br><span class="line">user.setCars(carList);</span><br></pre></td></tr></table></figure></details><blockquote><h3 id="1-Object를-JSON-등의-타입으로-변환"><a href="#1-Object를-JSON-등의-타입으로-변환" class="headerlink" title="1. Object를 JSON 등의 타입으로 변환"></a>1. Object를 JSON 등의 타입으로 변환</h3></blockquote><ol><li>ObjectMapper 객체를 생성해줍니다.</li><li><code>writeValueAsString()</code>메서드를 통하여 객체를 String으로 변환하고 String 변수에 담아줍니다.<ul><li>User 객체를 JSON 형태로 설계하였기 때문에 JSON 형태의 String이 출력됩니다.</li><li>객체의 Value를 String으로 저장한다라고 해석하시면 이해하기 편합니다.</li></ul></li></ol><p><img src="/image/json2.png" alt="img.png"></p><details><summary>Object Mapper 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = objectMapper.writeValueAsString(user);</span><br><span class="line">    System.out.println(json);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과값</span></span><br><span class="line"><span class="comment">// &#123;&quot;name&quot;:&quot;홍길동&quot;,&quot;age&quot;:10,&quot;cars&quot;:[&#123;&quot;name&quot;:&quot;K5&quot;,&quot;carNumber&quot;:&quot;11가 1111&quot;,&quot;type&quot;:&quot;sedan&quot;&#125;,&#123;&quot;name&quot;:&quot;Q5&quot;,&quot;carNumber&quot;:&quot;22가 2222&quot;,&quot;type&quot;:&quot;SUV&quot;&#125;]&#125;</span></span><br></pre></td></tr></table></figure></details><blockquote><h3 id="1-1-JSON-특정-key의-value-조회"><a href="#1-1-JSON-특정-key의-value-조회" class="headerlink" title="1-1. JSON 특정 key의 value 조회"></a>1-1. JSON 특정 key의 value 조회</h3></blockquote><h4 id="readTree-메서드"><a href="#readTree-메서드" class="headerlink" title="readTree() 메서드"></a>readTree() 메서드</h4><p>JSON의 가장 바깥부분의 key들은 JsonNode를 가지고 있어, 이를 통해 JSON 객체에 직접적인 접근을 할 수 있습니다.</p><p>JSON은 트리 구조와 같이 생겨서 Node를 읽어올 때는 <code>readTree(객체)</code> 메서드를 사용합니다.</p><details><summary>JsonNode 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JsonNode jsonNode = objectMapper.readTree(json);</span><br><span class="line">String _name = jsonNode.get(<span class="string">&quot;name&quot;</span>).asText();</span><br><span class="line"><span class="keyword">int</span> _age = jsonNode.get(<span class="string">&quot;age&quot;</span>).asInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;name : &quot;</span> + _name);</span><br><span class="line">System.out.println(<span class="string">&quot;age : &quot;</span> + _age);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과값</span></span><br><span class="line"><span class="comment">// name : 홍길동</span></span><br><span class="line"><span class="comment">// age : 10</span></span><br></pre></td></tr></table></figure></details><p><strong>하지만, 일반적인 key, value 쌍과는 다르게 cars는 내부적으로 배열 형태를 띄고 있습니다.</strong><br>내부의 배열은 <strong>ArrayNode</strong>라는 타입을 이용하여 접근할 수 있습니다.</p><p><strong>순서</strong></p><ol><li>JsonNode로 cars 배열의 Node 불러오기</li><li>JsonNode를 ArrayNode로 명시적 형변환</li></ol><details><summary>ArrayNode 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JsonNode _cars = jsonNode.get(<span class="string">&quot;cars&quot;</span>);</span><br><span class="line">ArrayNode arrayNode = (ArrayNode)_cars;</span><br><span class="line">System.out.println(<span class="string">&quot;cars : &quot;</span> + arrayNode);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과값</span></span><br><span class="line"><span class="comment">// cars : [&#123;&quot;name&quot;:&quot;K5&quot;,&quot;carNumber&quot;:&quot;11가 1111&quot;,&quot;type&quot;:&quot;sedan&quot;&#125;,&#123;&quot;name&quot;:&quot;Q5&quot;,&quot;carNumber&quot;:&quot;22가 2222&quot;,&quot;type&quot;:&quot;SUV&quot;&#125;]</span></span><br></pre></td></tr></table></figure></details><blockquote><h3 id="1-2-JSON-특정-key의-value-변경"><a href="#1-2-JSON-특정-key의-value-변경" class="headerlink" title="1-2. JSON 특정 key의 value 변경"></a>1-2. JSON 특정 key의 value 변경</h3><p><strong>JsonNode는 value를 변경할 수 없도록 되어 있습니다.</strong> </p></blockquote><p>따라서 값을 변경하고 싶을 때는 JsonNode를 <strong>ObjectNode로 명시적 형변환</strong> 해준 뒤에 값을 변경할 수 있습니다.</p><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectNode objectNode = (ObjectNode) jsonNode;</span><br><span class="line">objectNode.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;정동렬&quot;</span>);</span><br></pre></td></tr></table></figure></details><p>추가 적으로 objectNode의 값을 보기 편하게 출력하려면 <code>toPrettyString()</code>메서드를 사용하면 됩니다.</p><ul><li><code>System.out.println(objectNode.toPrettyString());</code></li></ul><blockquote><h3 id="2-JSON을-Object로-변환"><a href="#2-JSON을-Object로-변환" class="headerlink" title="2. JSON을 Object로 변환"></a>2. JSON을 Object로 변환</h3><p>바로 위 <strong>ArrayNode 코드 확인하기</strong>에서 cars의 값을 arrayNode에 초기화시켜주었습니다.</p></blockquote><p>이번에는 역으로 JSON 형태로 존재하는 arrayNode를 기존 User객체에 넣어주었던 List<Cars> 객체로 mapping 해보겠습니다.</p><p><strong>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)</strong></p><ul><li>fromValue : 변환하고 싶은 객체 (JSON형태의 값)</li><li>TypeReference<T> : mapping하고 싶은 객체의 타입 (List<Car>)</li></ul><details><summary>Object로 mapping하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Car&gt; cars = objectMapper.convertValue(arrayNode, <span class="keyword">new</span> TypeReference&lt;List&lt;Car&gt;&gt;() &#123;&#125;);</span><br><span class="line">System.out.println(cars);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 결과값</span></span><br><span class="line"><span class="comment">// [Car&#123;name=&#x27;K5&#x27;, car_number=&#x27;11가 1111&#x27;, type=&#x27;sedan&#x27;&#125;, Car&#123;name=&#x27;Q5&#x27;, car_number=&#x27;22가 2222&#x27;, type=&#x27;SUV&#x27;&#125;]</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object Mapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>싱글톤 패턴 (Singleton Pattern)</title>
      <link href="/10/04/singleton/"/>
      <url>/10/04/singleton/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h2 id="Singleton-Pattern-이란-무엇인가"><a href="#Singleton-Pattern-이란-무엇인가" class="headerlink" title="Singleton Pattern 이란 무엇인가?"></a>Singleton Pattern 이란 무엇인가?</h2><p>프로그램 내에서 오로지 1개만 존재하는 객체를 생성하여, 내부에서 이를 호출하여 사용하는 경우가 있습니다.</p></blockquote><p>이벤트의 스케줄링, 환경설정, 로그 파일의 생성, 하드웨어 기기의 인터페이스, 캐시 등의 다양한 케이스가 있습니다.</p><p>위와 같은 상황에서 <strong>Singleton 패턴</strong>을 이용하여 객체를 프로그램 내부에서 단 1개만 생성하고,<br>멀티 쓰레드 환경에서 이 객체를 공유하고, 동시 접근으로 인해 발생하는 동시성 문제도 해결할 수 있습니다.</p><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><ul><li><h4 id="Singleton-패턴"><a href="#Singleton-패턴" class="headerlink" title="Singleton 패턴"></a><strong>Singleton 패턴</strong></h4><ol><li>프로그램 내에 특정 객체가 단 1개가 존재한다.</li><li>프로그램 내부의 다른 부분에서 이 객체를 공유하며 사용한다.</li></ol></li></ul><blockquote><h2 id="Singleton를-사용하는-이유"><a href="#Singleton를-사용하는-이유" class="headerlink" title="Singleton를 사용하는 이유"></a>Singleton를 사용하는 이유</h2></blockquote><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>인스턴스를 1개만 생성함으로써, 메모리 공간을 절약할 수 있다.</li><li>호출할 때마다 생성하지 않아도 되므로, 로딩 시간이 절약된다.</li><li>어디서든 전역 변수처럼 사용할 수 있고, 다른 인스턴스들과 데이터 공유가 잘 이루어진다.</li></ul><h3 id="유의-사항"><a href="#유의-사항" class="headerlink" title="유의 사항"></a>유의 사항</h3><ul><li><p>클래스 내부에서 객체를 직접 생성하기 때문에 DIP(Dependency Inversion Principle) 를 위배하게 된다.</p><ul><li>특정 인터페이스에 의존하는 것이 아닌 한 개의 인스턴스에 의존, 전역적으로 직접 참조하게 됩니다.</li><li>이는 의존성 주입(Dependency Injection)을 통해 피할 수 있습니다.</li></ul></li><li><p>멀티 쓰레드 환경에서 안전하게 구현하려면 <strong>Thread-Safe</strong>, <strong>동기화</strong> 처리를 해주어야한다.</p></li></ul><blockquote><h2 id="Singleton-구현"><a href="#Singleton-구현" class="headerlink" title="Singleton 구현"></a>Singleton 구현</h2></blockquote><h3 id="기본-구현"><a href="#기본-구현" class="headerlink" title="기본 구현"></a>기본 구현</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체에 대한 직접적인 접근을 막기위해 private으로 생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CentralBank centralBank;</span><br><span class="line"><span class="comment">// 생성자를 외부에서 접근할 수 없도록 private으로 설정</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">CentralBank</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 객체에 접근할 수 있는 public 코드 작성</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CentralBank <span class="title">getCentralBank</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 객체가 null이면 객체 생성</span></span><br><span class="line">    <span class="keyword">if</span> (centralBank == <span class="keyword">null</span>) &#123;</span><br><span class="line">        centralBank = <span class="keyword">new</span> CentralBank();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 객체 return</span></span><br><span class="line">    <span class="keyword">return</span> centralBank;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>인스턴스와 생성자 모두 private으로 설정하여 외부에서 직접적인 접근을 막아줍니다.</p><p>getCentralBank() 메서드를 통해서만 인스턴스에 접근이 가능합니다.</p><p><strong>하지만 위 코드는 멀티 쓰레드 환경에서 Thread-safe</strong>를 보장하지 않습니다.</p><p>인스턴스가 null인 상태에서 두 개의 쓰레드에서 동시에 getInstance를 호출하면 instance를 두 번 생성할 수 있게 됩니다.</p><p>이를 해결하기 위해서는 <strong>동기화</strong>가 필요합니다.</p><h3 id="동기화-구현"><a href="#동기화-구현" class="headerlink" title="동기화 구현"></a>동기화 구현</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 객체에 대한 직접적인 접근을 막기위해 private으로 생성</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CentralBank centralBank;</span><br><span class="line"><span class="comment">// 생성자를 외부에서 접근할 수 없도록 private으로 설정</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">CentralBank</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 객체에 접근할 수 있는 public 코드 작성</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> CentralBank <span class="title">getCentralBank</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 객체가 null이면 객체 생성</span></span><br><span class="line">    <span class="keyword">if</span> (centralBank == <span class="keyword">null</span>) &#123;</span><br><span class="line">        centralBank = <span class="keyword">new</span> CentralBank();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 객체 return</span></span><br><span class="line">    <span class="keyword">return</span> centralBank;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여러 쓰레드가 동시 접근이 가능한 메서드에 <code>synchronized</code> 키워드를 추가하여 이를 해결할 수 있습니다.</p><p>위 코드에서는 Thread-safe는 보장되지만 <strong>속도가 저하된다는 문제가 발생합니다.</strong></p><p>반갑게도 Thread-safe와 속도를 모두 보장하는 방법이 존재합니다.</p><p>아래에서 두 가지 예시로 살펴보도록 하겠습니다.</p><h3 id="Double-Check-Lock-DCL-방식"><a href="#Double-Check-Lock-DCL-방식" class="headerlink" title="Double Check Lock(DCL) 방식"></a>Double Check Lock(DCL) 방식</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CentralBank</span> </span>&#123;</span><br><span class="line">  <span class="comment">// volatile 키워드를 통해 cache가 아닌 main memory에서 데이터를 읽고 쓴다.</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> CentralBank centralBank;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">CentralBank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CentralBank <span class="title">getCentralBank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// null인지 1번 체크</span></span><br><span class="line">    <span class="keyword">if</span> (centralBank == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (CentralBank.class) &#123;</span><br><span class="line">        <span class="comment">// 동기화 후에 null인지 다시 한번 체크 (Double check)</span></span><br><span class="line">        <span class="keyword">if</span> (centralBank == <span class="keyword">null</span>) &#123;</span><br><span class="line">          centralBank = <span class="keyword">new</span> CentralBank();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> centralBank;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여러 쓰레드가 접근하는 인스턴스에 <code>volatile</code> 키워드를 추가해줍니다.</p><ul><li>volatile 키워드가 없을 때, 멀티 쓰레드 어플리케이션에서는 작업을 수행하는 동안 <strong>성능 향상</strong>을 위해 메인 메모리에서 읽은 변수의 값을 Cache에 저장합니다.</li><li>이 때, 각 CPU Cache에 저장되는 값이 불일치하는 상황이 발생할 수 있습니다.</li><li>volatile 키워드를 추가하여 각 CPU의 Cache가 아닌 메인 메모리에 값을 저장하고 읽어오기 때문에, 불일치 문제를 해결할 수 있습니다.</li></ul><p>인스턴스를 return해주는 <code>getCentralBank()</code>함수에서 <strong>Double-Check</strong>를 수행하게 됩니다.</p><ol><li><strong>First Check</strong></li></ol><ul><li>인스턴스를 호출할 때 null이면 동기화를 통해 class에 대한 접근을 Lock합니다.</li></ul><ol start="2"><li><strong>Second Check</strong></li></ol><ul><li>접근을 막은 상태에서 다시 한 번 인스턴스가 null인지 확인하고, null이면 객체를 생성합니다.</li></ul><h3 id="LazyHolder-방식"><a href="#LazyHolder-방식" class="headerlink" title="LazyHolder 방식"></a>LazyHolder 방식</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CentralBank</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 외부에서의 생성을 막기위해 private으로 설정</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">CentralBank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="comment">// private한 내부 클래스를 만들고, 그 안에서 final로 인스턴스를 상수화시켜 생성</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CentralBank centralBank = <span class="keyword">new</span> CentralBank();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 호출 시 클래스에서 인스턴스를 호출</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> CentralBank <span class="title">getCentralBank</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LazyHolder.centralBank;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LazyHolder 방식은 <strong>윌리엄 푸</strong>가 제안한 방법으로 <strong>Bill Pugh Solution</strong>으로 불리기도 합니다.</p><p>클래스 내부에 private static class를 만들어 사용하고 싶을 때 public static 메서드를 통해 호출하게 됩니다.</p><p>이는 <code>private static class</code>의 특징을 이용하였습니다.</p><ul><li><strong>private static class</strong><ul><li>static이지만 메모리에 바로 올라가지 않고, 누군가가 getCentralBank() 메서드를 호출할 때만 호출이 되게 됩니다.</li><li>처음 호출할 때 JVM이 LazyHolder를 load하여 초기화합니다.</li><li>LazyHolder 클래스를 초기화하면 인스턴스(centralBank)가 초기화시키기 위해 생성자를 호출합니다.</li><li>클래스 초기화 단계는 <strong>JLS에 의해 순차적으로 보장</strong>되므로, 호출 시에 추가적인 동기화는 불필요하게 됩니다.</li><li>또한 static 변수인 centralBank를 순차적으로 입력하기 때문에 동기화가 불필요합니다.</li></ul></li></ul><p>내부 변수 또한 <code>final</code>키워드를 통해 차후에 값이 변하지 않도록 설정하였습니다.</p>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> singleton </tag>
            
            <tag> 디자인 패턴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LINUX의 사용</title>
      <link href="/09/29/Aboutlinux/"/>
      <url>/09/29/Aboutlinux/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="리눅스-파일-및-권한-관리"><a href="#리눅스-파일-및-권한-관리" class="headerlink" title="리눅스 파일 및 권한 관리"></a>리눅스 파일 및 권한 관리</h1></blockquote><h4 id="리눅스의-default-editor로-주로-사용되는-bash를-통해-관련-명령을-알아보자"><a href="#리눅스의-default-editor로-주로-사용되는-bash를-통해-관련-명령을-알아보자" class="headerlink" title="리눅스의 default editor로 주로 사용되는 bash를 통해 관련 명령을 알아보자."></a>리눅스의 default editor로 주로 사용되는 <code>bash</code>를 통해 관련 명령을 알아보자.</h4><blockquote><h2 id="User-관련-명령어"><a href="#User-관련-명령어" class="headerlink" title="User 관련 명령어"></a>User 관련 명령어</h2></blockquote><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><ul><li>super user do의 약어로 관리자 권한으로 실행할 때 명령어 앞에 붙여 사용한다.</li></ul><p><img src="/image/img.png" alt="img.png"></p><h3 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h3><ul><li>로그인한 사용자의 ID를 알려준다.</li></ul><p><img src="/image/img_1.png" alt="img_1.png"></p><h3 id="useradd-adduser"><a href="#useradd-adduser" class="headerlink" title="useradd | adduser"></a>useradd | adduser</h3><ul><li>사용자를 추가할 때 사용된다.</li><li>useradd : 사용자 기본 설정을 자동으로 하지 않고 추가한다.<ul><li>계정을 생성할 때 필요한 모든 설정들을 명시해주어야 한다.</li></ul></li><li>adduser : 사용가 기본 설정을 자동으로 수행한다.<ul><li>/etc/adduser.conf 에 있는 정보를 물어보고 설정하게 해준다.</li><li>사용자 홈 디렉토리 생성 등<br><img src="/image/img_2.png" alt="img_2.png"></li></ul></li></ul><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><ul><li>로그인한 사용자 ID의 암호를 설정 / 변경한다.</li></ul><p><img src="/image/img_3.png" alt="img_3.png"></p><h3 id="su-su"><a href="#su-su" class="headerlink" title="su | su -"></a>su | su -</h3><ul><li>사용자를 변경할 때 사용한다.</li><li>su user : 현재 로그인 되어있는 사용자의 환경 설정을 기반으로, 계정만 user로 전환한다.</li><li>su - user : user의 환경설정을 기반으로 계정을 user로 전환한다.</li></ul><blockquote><h2 id="Directory-File-일반-명령어"><a href="#Directory-File-일반-명령어" class="headerlink" title="Directory/File 일반 명령어"></a>Directory/File 일반 명령어</h2></blockquote><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><ul><li>현재 디렉토리 확인</li></ul><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><ul><li>폴더 이동</li><li><code>cd ~</code> : home으로 이동</li><li><code>cd -</code> : 이전 폴더로 이동</li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul><li>현재 디렉토리의 파일 목록 출력</li><li><code>ls -al</code>로 주로 사용된다.<br><img src="/image/img_4.png" alt="img_4.png"></li><li>디렉토리 내 파일의 다양한 정보를 포함하고 있다.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   (1)    (2) (3)  (4)  (5)   (6)   (7)  (8)  </span><br><span class="line">drwxr-xr-x 4 root root 4096 Sep 29 11:55 ..</span><br></pre></td></tr></table></figure></li></ul><ol><li>10개의 문자로 이루어지며, <strong>1, 3, 3, 3개의 문자</strong>로 구분하여 읽는다.<ul><li>첫 번째 그룹(1) : d, l, - 이 위치할 수 있다.<ul><li>d : directory, 폴더(디렉토리)</li><li>l : link, 링크</li><li>f : file, 파일</li></ul></li><li>두 번째 그룹(2~4) : 소유자가 갖는 권한</li><li>세 번째 그룹(5~7) : 그룹이 갖는 권한</li><li>네 번째 그룹(8~10) : 기타 사용자가 갖는 권한<ul><li>권한을 표현하는 방법 중에는 rwx로 표현하는 기호 표기법과 숫자 표기법이 있다. </li></ul></li></ul></li><li>하드링크 번호 : 링크된 파일의 수를 의미한다.</li><li>소유자</li><li>소유 그룹 (소유자의 소유 그룹이 없을 때는 소유자를 나타낸다.)</li><li>파일의 크기(Byte)</li><li>파일이 생성, 수정된 날짜</li><li>파일이 생성, 수정된 시간</li><li>파일 및 디렉토리 이름</li></ol><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul><li>파일 내용 출력<br><img src="/image/img_5.png" alt="img_5.png"></li></ul><h3 id="head-tail"><a href="#head-tail" class="headerlink" title="head | tail"></a>head | tail</h3><ul><li>파일 내용 출력 (출력되는 라인 수 설정 가능)</li><li>기본 값 : 10</li></ul><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><ul><li>파일 내용 출력</li><li>파일 내용을 터미널 화면의 크기에 맞춰 페이지 단위로 보여준다.</li><li>스페이스바로 다음 페이지를 확인할 수 있으며 끝까지 확인하면 화면이 종료된다.<br><img src="/image/img_6.png" alt="img_6.png"></li></ul><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul><li>삭제</li><li>LINUX에는 휴지통이 없으므로 파일이 바로 삭제된다.</li><li><code>rm -rf</code>로 디렉토리를 삭제하면 하위 모든 파일과 함께 강제로 삭제된다.</li><li>r : recursive</li><li>f : force</li></ul><blockquote><h2 id="Directory-File-권한-관련-명령어"><a href="#Directory-File-권한-관련-명령어" class="headerlink" title="Directory/File 권한 관련 명령어"></a>Directory/File 권한 관련 명령어</h2></blockquote><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><ul><li>change mode : 파일 권한 변경</li><li><code>ls -al</code>에서 나타났던 권한을 변경한다.</li><li>기호 표기법<ul><li>누구에게 : u(사용자), g(그룹), o(기타 사용자), a(전부)</li><li>권한을 : +(준다), -(뺐는다), =(설정)</li><li>권한 : r(읽기), w(쓰기), x(실행)</li><li>모두에게 profile 파일에 대한 읽기 권한을 준다.</li><li><code>chmode a+r profile</code></li></ul></li><li>숫자 표기법<ul><li>소유자, 그룹, 기타 사용자에 대한 권한을 3개의 숫자로 표현한다.</li><li>3비트로 구성되어 r = 4, w = 2 , x = 1를 뜻한다.</li><li>rwxrwxrwx :777</li><li>rwx—— : 700</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> LINUX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINUX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 환경에서 LINUX 설치</title>
      <link href="/09/29/linux/"/>
      <url>/09/29/linux/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="Virtual-Machine"><a href="#Virtual-Machine" class="headerlink" title="Virtual Machine"></a>Virtual Machine</h1><h3 id="Parallels-Desktop-for-Mac-버전-17"><a href="#Parallels-Desktop-for-Mac-버전-17" class="headerlink" title="Parallels Desktop for Mac 버전 17"></a>Parallels Desktop for Mac 버전 17</h3></blockquote><p>Intel 등의 CPU는 가상화 기술을 지원하지만 M1은 아직 안정적으로 지원하지 않고 있었다.</p><p>하지만 지난 8월 가상화 소프트웨어 전문 기업인 <strong>Parallels</strong>에서 애플 M1칩 기반 맥에서 정식적으로 가상화를 지원하는 <strong>Parallels Desktop for Mac 버전 17</strong>을 공개하였다.</p><img src="https://it.donga.com/media/__sized__/images/2021/8/13/e0ac8508028840e7-thumbnail-1920x1080-70.jpg" class="fig-75 center clear"><p>출처 : Parallels 공식 홈페이지</p><p>M1 칩 맥에서도 Linux의 Ubuntu, Fedora, Windows 11버전 등의 가상화를 지원한다.</p><blockquote><h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1></blockquote><p><a href="https://www.parallels.com/products/desktop/">Parallels 다운로드 링크</a></p><p><a href="https://ubuntu.com/download/server/arm">Ubuntu Server 다운로드 링크</a></p><h4 id="위-링크를-통해-Parallels와-Ubuntu-Server-이미지를-다운로드하였다"><a href="#위-링크를-통해-Parallels와-Ubuntu-Server-이미지를-다운로드하였다" class="headerlink" title="위 링크를 통해 Parallels와 Ubuntu Server 이미지를 다운로드하였다."></a>위 링크를 통해 Parallels와 Ubuntu Server 이미지를 다운로드하였다.</h4><p><img src="/image/linux1.PNG" alt="img_1.png"></p><p><img src="/image/linux.PNG" alt="img_3.png"></p><h4 id="안정적으로-가상화가-되었다"><a href="#안정적으로-가상화가-되었다" class="headerlink" title="안정적으로 가상화가 되었다."></a>안정적으로 가상화가 되었다.</h4>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> LINUX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> M1 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST(Representational State Transfer)</title>
      <link href="/09/29/rest/"/>
      <url>/09/29/rest/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="REST-Representational-State-Transfer"><a href="#REST-Representational-State-Transfer" class="headerlink" title="REST (Representational State Transfer)"></a>REST (Representational State Transfer)</h1></blockquote><h2 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h2><ol><li>Client와 Server의 분리<ul><li>서로 독립적으로 분리되어 있어야 한다.</li></ul></li><li>Stateless<ul><li>요청에 대해서 클라이언트의 상태를 서버에 저장하지 않는다.</li><li>매 요청을 새롭게 처리한다</li></ul></li><li>Cache (캐시)<ul><li>클라이언트는 서버의 응답을 임시 저장하여, 재사용하고 부하를 낮추어야한다.</li></ul></li><li>Layered System (계층화)<ul><li>서버와 클라이언트 사이를 다양한 계층 형태로 구성하고, 이를 확장할 수 있어야한다.</li></ul></li><li>인터페이스 일관성<ul><li>인터페이스의 일관성을 지킨다.</li><li>아키텍처를 단순화, 작은 단위로 분리하여 클라이언트, 서버를 독립적으로 개선할 수 있어야한다.</li></ul></li></ol><blockquote><p>인터페이스의 일관성을 기초로 REST를 잘 사용하였는지 판단할 수 있다.</p><ul><li>자원의 식별<ul><li>URI를 통하여 리소스에 접근한다.</li></ul></li><li>메시지를 통한 리소스 조작<ul><li>데이터의 타입을 알려주는 header부분의 content-type</li></ul></li><li>자기 서술적 메시지<ul><li>요청하는 데이터가 어떻게 처리되어야하는지 충분한 데이터 포함</li></ul></li><li>애플리케이션 상태에 대한 엔진으로써 하이퍼미디어<ul><li>요청에 대한 데이터만이 아닌 관련된 리소스에 대한 Link정보 포함</li></ul></li></ul></blockquote><ol start="6"><li>Code On Demand<ul><li>특정 기능을 서버로부터 전달받아 클라이언트가 실행할 수 있어야한다.</li></ul></li></ol><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><ol><li>GET<ul><li>리소스 취득</li><li>CRUD 중 R(Read)</li></ul></li><li>POST<ul><li>리소스 생성, 추가</li><li>CRUD 중 C(Create)</li></ul></li><li>PUT<ul><li>리소스 갱신, 생성</li><li>CRUD 중 C(Create)/U(Update)</li><li>데이터가 없으면 생성하고, 있으면 갱신한다.</li></ul></li><li>DELETE<ul><li>리소스 삭제</li><li>CRUD 중 D(Delete)</li></ul></li><li>HEAD<ul><li>헤더 데이터 취득</li></ul></li><li>OPTIONS<ul><li>지원하는 메소드 취득</li></ul></li><li>TRACE<ul><li>요청메시지 반환</li></ul></li><li>CONNECT<ul><li>프록시 동작의 터널 접속으로 변경</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REST </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gRPC (Google Remote Procedure Call)</title>
      <link href="/09/16/gRPC/"/>
      <url>/09/16/gRPC/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="gRPC는-무엇인가"><a href="#gRPC는-무엇인가" class="headerlink" title="gRPC는 무엇인가?"></a>gRPC는 무엇인가?</h1></blockquote><p>Google사에서 개발한 RPC(Remote Procedure Call) 시스템으로, HTTP 2.0, TCP/IP 프로토콜을 사용한다.</p><ul><li>RPC는 원격 프로시저 호출로 별도의 코딩없이 다른 주소의 메서드나 프로시저를 실행할 수 있게하는 프로세스 간의 통신 기술이다.</li></ul><p>프로토콜 버퍼(protocol buffer)를 인터페이스 정의어(IDL),  메세지 교환 형식으로 사용한다.</p><ul><li>프로토콜 버퍼를 사용하여 보다 빠르고, 편리하게 통신할 수 있다.</li><li><a href="https://jeong-pro.tistory.com/190">프로토콜 버퍼란?</a> (개인적으로 프로토콜 버퍼를 이해할 때 참고한 블로그입니다.)<ul><li>장점<ul><li>통신이 빠르다</li><li>파싱을 할 필요가 없다</li></ul></li><li>단점<ul><li>프로토콜 버퍼에서 독자적으로 쓰이는 proto 문법을 익혀야한다.</li><li>모든 클라이언트에서 proto파일이 있어야 하기 때문에 내부 서비스 데이터 교환에서 주로 쓰인다.</li></ul></li></ul></li></ul><p>gRPC를 사용하면 클라이언트 단에서 서버 단의 메소드를 로컬 객체처럼 바로 호출할 수 있다.</p><ul><li>Server side : 인터페이스를 구현하여 Client 요청을 handling할 수 있다.</li><li>Client side : 서버에 있는 메소드와 동일한 stub을 제공한다.<ul><li>stub을 client라 칭하는 언어도 있다.</li></ul></li></ul><img src="https://grpc.io/img/landing-2.svg" class="center clear"><p>출처 : <a href="https://grpc.io/">https://grpc.io/</a></p><p>서버와 클라이언트 구글 내부 서버부터 데스크톱까지 다양한 환경에서 실행도 가능하다.</p><p>API에서도 지원하여 기능 구현에 용이하다.  </p><p>지원하는 언어로 서버와 클라이언트를 구현할 수 있다.</p><ul><li>서버는 java, 클라이언트는 python과 같이 다른 언어로 구현할 수 있다.</li></ul><p><strong>빠른 데이터 처리, 편리하고 유연한 환경을 계속해서 강조하고 있다.</strong> </p><blockquote><h1 id="RPC-Life-Cycle"><a href="#RPC-Life-Cycle" class="headerlink" title="RPC Life Cycle"></a>RPC Life Cycle</h1></blockquote><h2 id="Unary-RPC-단항-RPC"><a href="#Unary-RPC-단항-RPC" class="headerlink" title="Unary RPC (단항 RPC)"></a>Unary RPC (단항 RPC)</h2><p>클라이언트에서 <strong>단일 요청</strong>을 보내고 <strong>단일 응답</strong> 받는다.</p><ol><li>클라이언트가 stub 메서드를 호출하면 이에 대한 메타데이터(요청, 메소드명, 대기시간 등)를 서버에 알린다.<ul><li>서버는 response를 보내기 전에 초기 메타데이터를 클라이언트에 바로 되돌려주거나, 요청 메시지를 기다린다.    </li><li>어떤 것이 먼저 발생할 지는 application마다 다르다.</li></ul></li><li>클라이언트의 요청 메시지를 받으면 서버에서는 응답 생성에 필요한 모든 실행을 한다.<ul><li>성공적으로 생성 시 status code, message 등과 함께 response를 보낸다.</li></ul></li></ol><h2 id="Server-Streaming-RPC"><a href="#Server-Streaming-RPC" class="headerlink" title="Server Streaming RPC"></a>Server Streaming RPC</h2><ul><li>클라이언트가 <strong>단일 요청</strong> 시 서버는 응답에 대해 <strong>stream을 응답</strong>하는 것을 제외하면 단항 RPC와 동일하다.</li></ul><h2 id="Client-streaming-RPC"><a href="#Client-streaming-RPC" class="headerlink" title="Client streaming RPC"></a>Client streaming RPC</h2><ul><li>클라이언트가 단일 요청이 아닌 메시지의 <strong>stream으로 요청</strong>하는 것을 제외하면 단항 RPC와 동일하다.</li></ul><h2 id="Bidirectional-streaming-RPC"><a href="#Bidirectional-streaming-RPC" class="headerlink" title="Bidirectional streaming RPC"></a>Bidirectional streaming RPC</h2><p>클라이언트가 메서드를 호출하고, 서버가 client의 메타데이터를 받으면 시작된다.</p><ul><li>서버는 초기 메타데이터를 응답하거나, 클라이언트가 메시지를 streaming할 때 까지 대기한다.</li></ul><p>Client side와 Server side의 스트림 처리는 애플리케이션마다 다르다.<br>    - 두 스트림이 독립적이므로 순서에 상관없이 메시지를 읽고 쓸 수 있다.<br>        - 클라이언트의 모든 메시지를 수신할 때까지 서버는 대기하거나, 계속 해서 요청과 응답을 주고받을 수 있다.</p><blockquote><h1 id="Terminate-Cancel"><a href="#Terminate-Cancel" class="headerlink" title="Terminate | Cancel"></a>Terminate | Cancel</h1></blockquote><h2 id="Terminate-종료"><a href="#Terminate-종료" class="headerlink" title="Terminate (종료)"></a>Terminate (종료)</h2><p>클라이언트와 서버에서는 <strong>호출에 대한 성공 여부</strong>를 각각 독립적이고, local하게 결정을 내린다.</p><ul><li>서버에서는 성공, 클라이언트에서는 실패가 나올 수 있다.</li><li>서버에서 모든 response를 성공적으로 보내도, 클라이언트의 Deadline이 지나서 응답하면 클라이언트는 실패로 인식한다.<ul><li>클라이언트는 요청에 대한 응답까지의 시간을 지정할 수 있으며, 시간이 지나면 <code>DEADLINE_EXCEEDED</code> Error로 종료된다.  </li><li>서버에서는 DeadLine까지 남은 시간과 시간이 만료된 요청이 있는지 query를 통해 확인할 수 있다.</li></ul></li></ul><p>클라이언트의 요청이 끝나지않아도 서버에서 완료 처리를 할 수 있다.</p><h2 id="Cancel-취소"><a href="#Cancel-취소" class="headerlink" title="Cancel (취소)"></a>Cancel (취소)</h2><p>클라이언트와 서버단에서 언제든 RPC에 대해 취소할 수 있고, 취소할 시 RPC가 즉시 종료된다.</p><ul><li>취소 이전의 내용은 복구할 수 없음에 유의하여야 한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> gRPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP (Aspect Oriented Programming)</title>
      <link href="/09/13/AOP/"/>
      <url>/09/13/AOP/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><blockquote><h1 id="AOP-Aspect-Oriented-Programming"><a href="#AOP-Aspect-Oriented-Programming" class="headerlink" title="AOP (Aspect Oriented Programming)"></a>AOP (Aspect Oriented Programming)</h1></blockquote><p>관점 지향 프로그래밍이라고도 불리는 AOP는 로직을 <strong>핵심, 부가적인 관점을 나누어 각각 모듈화하는 프로그래밍</strong>이다.</p><ul><li>핵심적인 관점 : 핵심 비즈니스 로직</li><li>부가적인 관점 : DB 연결, 로깅, 파일 입출력 등</li></ul><p>AOP를 통해 스프링 IoC와 연동하여 중복 코드, 객체 간 복잡도 등에 대한 해결책을 지원한다.</p><ul><li>중복되는 코드를 Aspect로 모듈화하여 재사용성을 높일 수 있다.</li><li>중복되는 코드들을 **흩어진 관심사(Crosscutting Concerns)**라고 칭한다.</li><li>실행 전 후 특정 기능 추가(method의 실행시간 체크 등), response 정보 저장 등    </li></ul><p>Spring Bean(스프링 빈)에만 적용 가능하며, 접근 제어와 부가 기능 추가를 위해 proxy패턴 기반의 구현체를 사용한다.</p><blockquote><h2 id="AOP-구성-요소"><a href="#AOP-구성-요소" class="headerlink" title="AOP 구성 요소"></a>AOP 구성 요소</h2></blockquote><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6mjjk9E6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pe617dbmwowpyyo1ycgw.png" class="fig-50 center clear"><p>출처 : cloudinary</p><ul><li><p><strong>Aspect</strong></p><ul><li>중복되는 코드(흩어진 관심사)를 모듈화한 것</li></ul></li><li><p><strong>Target Object</strong> </p><ul><li>Aspect가 적용되는 클래스, 메서드 등의 객체</li></ul></li><li><p><strong>Proxy</strong> </p><ul><li>Aspect와 Target을 연결해주는 클래스</li></ul></li><li><p><strong>Join Point</strong> </p><ul><li>Advice가 적용되는 지점 (실행 전 후 특정 기능 추가와 관련)</li></ul></li><li><p><strong>Point Cut</strong> </p><ul><li>JointPoint를 구체화한 Advice가 실행 될 지점 </li></ul></li><li><p><strong>Advice</strong> </p><ul><li>Joint Point, Point Cut에서 실행되는 코드, 실질적인 구현부</li></ul></li><li><p><strong>Weaving</strong> </p><ul><li>Joint Point에 Advice를 적용하는 방법</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>데코레이터 패턴 (Decorator Pattern)</title>
      <link href="/09/06/DecoratorPattern/"/>
      <url>/09/06/DecoratorPattern/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="데코레이터-패턴"><a href="#데코레이터-패턴" class="headerlink" title="데코레이터 패턴"></a>데코레이터 패턴</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>여러 decorator들을 활용하여 다양한 기능을 제공한다.<ul><li>상속보다 유연한 방식을 갖는다.</li><li>지속적인 기능의 추가 제거가 용이하다.</li></ul></li><li>다른 데코레이터나 컴포넌트를 포함하여야한다.    <ul><li>기반 스트림 클래스 : 직접 읽고 쓸 수 있다. (Component)</li><li>보조 스트림 : 추가 기능 제공 (Decorator)</li></ul></li></ul><h2 id="구성"><a href="#구성" class="headerlink" title="구성"></a>구성</h2><ul><li><p>최상위 컴포넌트 (예시 : Coffee)</p></li><li><p>하위 컴포넌트 (예시 : EtiopiaAmericano)</p></li><li><p>데코레이터 (예시 : Decorator)</p></li><li><p>하위 데코레이터 (예시 : Moch, Latte)</p></li><li><p>하위 컴포넌트와 데코레이터는 최상위 컴포넌트를 상속받는다.</p></li><li><p>데코레이터는 혼자 쓰이지않고, 상속용(abstract)으로 구현한다.</p><blockquote><p>@Decorator</p><ul><li>최상위 컴포넌트의 default Constructor가 없으므로, 생성자를 명시해준다.</li></ul><p>@하위 Decorator</p><ul><li>상위 클래스 Decorator의 default 생성자가 없으므로 매개변수가 있는 super를 명시적으로 호출해야한다.</li></ul></blockquote></li><li><p>하위 데코레이터는 데코레이터는 상속받아 각 기능을 구현한다.</p><blockquote><p>하위 컴포넌트 생성시 하위 데코레이터를 wrapper 형식을 통해 원하는 기능을 추가한다.</p></blockquote></li></ul><details><summary>최상위 컴포넌트 예제코드</summary><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package ch17;</span><br><span class="line"></span><br><span class="line">public abstract class Coffee &#123;</span><br><span class="line"></span><br><span class="line"><span class="code">    public abstract void brewing();</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure></details><details><summary>하위 컴포넌트 예제 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EtiopiaAmericano</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Etiopia Americano&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>데코레이터 예제코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"><span class="comment">// 데코레이터는 혼자 쓰이지 않는다. (상속용으로 쓰인다.)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// component를 멤버 변수, 생성자 parameter로 갖는다.</span></span><br><span class="line">    Coffee coffee;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Coffee coffee)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        coffee.brewing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>하위 데코레이터 예제코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Moch</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Moch</span><span class="params">(Coffee coffee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.brewing();</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding Moch syrup&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Latte</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="comment">// 상위 클래스 Decorator의 default 생성자가 없으므로 매개변수가 있는 super를 명시적으로 호출해야한다.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Latte</span><span class="params">(Coffee coffee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.brewing();</span><br><span class="line">        System.out.print(<span class="string">&quot;Adding Milk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>테스트 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 하위(상세) 컴포넌트 생성</span></span><br><span class="line">        Coffee etio = <span class="keyword">new</span> EtiopiaAmericano();</span><br><span class="line">        etio.brewing();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 하위(상세) Decorator로 기능을 추가한 컴포넌트</span></span><br><span class="line">        Coffee mochEtio = <span class="keyword">new</span> Moch(<span class="keyword">new</span> EtiopiaAmericano());</span><br><span class="line">        mochEtio.brewing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 데코레이터 패턴 </tag>
            
            <tag> Decorator Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>직렬화 (Serialization)</title>
      <link href="/09/06/Serial/"/>
      <url>/09/06/Serial/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="직렬화-Serialization"><a href="#직렬화-Serialization" class="headerlink" title="직렬화 (Serialization)"></a>직렬화 (Serialization)</h1><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><ul><li>인스턴스의 상태를 그대로 저장(파일), 전송(네트워크), 복원하는 방식</li><li>바이트 스트림의 연속으로 객체 정보를 저장하고, 복원한다.</li><li>보조 스트림을 활용한다.</li></ul><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><ul><li>직렬화는 인스턴스의 정보가 외부로 유출되는 것이다.</li><li>직렬화를 하려면 명시해줘야한다. (Marker interface)<ul><li><code>implements Serializable</code></li><li>구현코드가 없는 interface</li></ul></li><li>클래스 내에서 직렬화하고 싶지 않은 변수, 불가능한 변수는 <code>transient</code>로 명시한다.<ul><li> default 값으로 출력된다. (String = null)</li></ul></li></ul><details><summary>예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">transient</span> String job;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String job)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;,&quot;</span> + job;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person personLee = <span class="keyword">new</span> Person(<span class="string">&quot;이순신&quot;</span>, <span class="string">&quot;대표&quot;</span>);</span><br><span class="line">        Person personKim = <span class="keyword">new</span> Person(<span class="string">&quot;김유신&quot;</span>, <span class="string">&quot;상무이사&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;serial.txt&quot;</span>);</span><br><span class="line">             ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Serialization</span></span><br><span class="line">            oos.writeObject(personLee);</span><br><span class="line">            oos.writeObject(personKim);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;serial.txt&quot;</span>);</span><br><span class="line">             ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis))</span><br><span class="line">        &#123;</span><br><span class="line">            Person pLee = (Person)ois.readObject();</span><br><span class="line">            Person pKim = (Person)ois.readObject();</span><br><span class="line">            System.out.println(pLee);</span><br><span class="line">            System.out.println(pKim);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li><code>implements Externalizable</code><ul><li>읽고 쓰는 메서드를 구현해주어야 한다.</li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String job;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, String job)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;, &quot;</span> + job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeUTF(name);</span><br><span class="line">        out.writeUTF(job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        name = in.readUTF();</span><br><span class="line">        job = in.readUTF();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalizableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People peopleLee = <span class="keyword">new</span> People(<span class="string">&quot;이순신&quot;</span>, <span class="string">&quot;대표&quot;</span>);</span><br><span class="line">        People peopleKim = <span class="keyword">new</span> People(<span class="string">&quot;김유신&quot;</span>, <span class="string">&quot;상무이사&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;external.txt&quot;</span>);</span><br><span class="line">             ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos))</span><br><span class="line">        &#123;</span><br><span class="line">            oos.writeObject(peopleLee);</span><br><span class="line">            oos.writeObject(peopleKim);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;external.txt&quot;</span>);</span><br><span class="line">             ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis))&#123;</span><br><span class="line">            People peopleL = (People)ois.readObject();</span><br><span class="line">            People peopleK = (People)ois.readObject();</span><br><span class="line">            System.out.println(peopleL);</span><br><span class="line">            System.out.println(peopleK);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Serialization </tag>
            
            <tag> 직렬화 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>쓰레드 (Thread)</title>
      <link href="/09/06/Thread/"/>
      <url>/09/06/Thread/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="쓰레드"><a href="#쓰레드" class="headerlink" title="쓰레드"></a>쓰레드</h1><h2 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h2><h3 id="프로세스-Process"><a href="#프로세스-Process" class="headerlink" title="프로세스 (Process)"></a>프로세스 (Process)</h3><ul><li>실행 중인 프로그램이 실행되면 OS로부터 메모리를 할당받아 프로세스 상태가 된다.</li><li>프로그램이 메모리에 올라간 상태</li><li>프로세스는 하나 이상의 쓰레드를 가지게 된다.</li></ul><h3 id="쓰레드-Thread"><a href="#쓰레드-Thread" class="headerlink" title="쓰레드 (Thread)"></a>쓰레드 (Thread)</h3><ul><li>프로세스가 메모리를 점유하고 CPU에서 수행이 된다.</li><li>쓰레드 : CPU에서 프로세스가 실행되는 단위</li><li>스케줄러 : 쓰레드의 배분</li><li>웹서버에 멀티쓰레드가 구현되어 있기 때문에 웹프로그래밍에서는 멀티쓰레드를 구현할 일이 없다.</li><li>쓰레드는 자신만의 작업 공간인 context(변수 정보 등)를 가지고 있다.</li></ul><h4 id="쓰레드-상태-Thread-Status"><a href="#쓰레드-상태-Thread-Status" class="headerlink" title="쓰레드 상태 (Thread Status)"></a>쓰레드 상태 (Thread Status)</h4><ul><li><p>Runnable  </p><ul><li>쓰레드가 start 되면 쓰레드 풀에서 대기하게 된다.</li><li>언제든지 CPU가 배분되면 실행될 수 있는 상태</li></ul></li><li><p>Not Runnable</p><ul><li>CPU를 절대 점유할 수 없는 상태</li><li>자바에서 메서드를 통해 Not Runnable로 만들 수 있다.<ol><li><strong>sleep(millisecond)</strong><ul><li>millisecond후에 Runnable로 변경 </li></ul></li><li><strong>wait()</strong><ul><li>자원이 한정되어 있을 때, 유효한 thread가 생길 때 까지 대기상태</li><li>유효한 상태가 되면 <strong>notify</strong>, <strong>notifyAll</strong>을 통해 쓰레드를 불러온다.</li></ul></li><li><strong>join()</strong><ul><li>한 개의 쓰레드가 다른 쓰레드를 참조할 때 join()을 하면 참조하는 쓰레드가 끝날 때 까지 자기 자신을 Not Runnable 상태로 만든다.</li></ul></li></ol></li></ul></li><li><p>Dead</p><ul><li>쓰레드가 다 수행된 상태, 종료된 상태</li></ul></li></ul><h4 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait() / notify()"></a>wait() / notify()</h4><ul><li>리소스가 유효하지 않은 경우 유효할 때 까지 Thread는 wait상태가 된다.</li><li>유효한 리소스가 생기면 <code>notify()</code>/<code>notifyAll()</code>를 통해 Thread가 호출된다.<ul><li>notify() : 무작위 쓰레드 호출</li><li>notifyAll() : wait상태의 Thread 모두 호출<ul><li>유효한 리소스만큼 호출되며, 자원을 갖지 못하면 다시 wait상태가 된다.</li></ul></li></ul></li><li>예제<ul><li>도서관(공유 자원)에서 책을 빌리려하는 학생(Thread)이 있다.</li><li>책(자원)은 한정되어 있고, 학생(쓰레드)들이 책(자원)을 빌리려 할 때 책이 없으면 wait()</li><li>책(자원)이 반납되면 다른 학생(쓰레드)가 빌림</li></ul></li></ul><details><summary>notify 예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;String&gt; shelf = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Library</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥1&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥2&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">lendBook</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shelf.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : waiting start&quot;</span>);</span><br><span class="line">            wait();</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : waiting end&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shelf.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            String book = shelf.remove(<span class="number">0</span>);</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : &quot;</span> + book + <span class="string">&quot; lend&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> book;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">returnBook</span><span class="params">(String book)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        shelf.add(book);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; : &quot;</span> + book + <span class="string">&quot; return&quot;</span>);</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String title = LibraryMain.library.lendBook();</span><br><span class="line">            <span class="keyword">if</span> (title == <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot; : 빌리지 못했음&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sleep(<span class="number">5000</span>);</span><br><span class="line">            LibraryMain.library.returnBook(title);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LibraryMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Library library = <span class="keyword">new</span> Library();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student std1 = <span class="keyword">new</span> Student(<span class="string">&quot;std1&quot;</span>);</span><br><span class="line">        Student std2 = <span class="keyword">new</span> Student(<span class="string">&quot;std2&quot;</span>);</span><br><span class="line">        Student std3 = <span class="keyword">new</span> Student(<span class="string">&quot;std3&quot;</span>);</span><br><span class="line">        Student std4 = <span class="keyword">new</span> Student(<span class="string">&quot;std4&quot;</span>);</span><br><span class="line">        Student std5 = <span class="keyword">new</span> Student(<span class="string">&quot;std5&quot;</span>);</span><br><span class="line">        Student std6 = <span class="keyword">new</span> Student(<span class="string">&quot;std6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        std1.start();</span><br><span class="line">        std2.start();</span><br><span class="line">        std3.start();</span><br><span class="line">        std4.start();</span><br><span class="line">        std5.start();</span><br><span class="line">        std6.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>notifyAll() 예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;String&gt; shelf = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Library</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥1&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥2&quot;</span>);</span><br><span class="line">        shelf.add(<span class="string">&quot;태백산맥3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">lendBook</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (shelf.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : waiting start&quot;</span>);</span><br><span class="line">            wait();</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : waiting end&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shelf.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            String book = shelf.remove(<span class="number">0</span>);</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; : &quot;</span> + book + <span class="string">&quot; lend&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> book;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">returnBook</span><span class="params">(String book)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        shelf.add(book);</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; : &quot;</span> + book + <span class="string">&quot; return&quot;</span>);</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String title = LibraryMain.library.lendBook();</span><br><span class="line">            <span class="keyword">if</span> (title == <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot; : 빌리지 못했음&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sleep(<span class="number">5000</span>);</span><br><span class="line">            LibraryMain.library.returnBook(title);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LibraryMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Library library = <span class="keyword">new</span> Library();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student std1 = <span class="keyword">new</span> Student(<span class="string">&quot;std1&quot;</span>);</span><br><span class="line">        Student std2 = <span class="keyword">new</span> Student(<span class="string">&quot;std2&quot;</span>);</span><br><span class="line">        Student std3 = <span class="keyword">new</span> Student(<span class="string">&quot;std3&quot;</span>);</span><br><span class="line">        Student std4 = <span class="keyword">new</span> Student(<span class="string">&quot;std4&quot;</span>);</span><br><span class="line">        Student std5 = <span class="keyword">new</span> Student(<span class="string">&quot;std5&quot;</span>);</span><br><span class="line">        Student std6 = <span class="keyword">new</span> Student(<span class="string">&quot;std6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        std1.start();</span><br><span class="line">        std2.start();</span><br><span class="line">        std3.start();</span><br><span class="line">        std4.start();</span><br><span class="line">        std5.start();</span><br><span class="line">        std6.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="멀티-쓰레딩-Multi-Threading"><a href="#멀티-쓰레딩-Multi-Threading" class="headerlink" title="멀티 쓰레딩 (Multi-Threading)"></a>멀티 쓰레딩 (Multi-Threading)</h3><ul><li>여러 thread가 동시에 수행되는 프로그래밍, 여러 작업이 동시에 실행되는 효과</li><li>thread는 각각 자신만의 작업 공간을 가짐 (context)</li><li>각 thread 사이에서 공유하는 자원이 있을 수 있음 (자바에서는 static instance)</li><li>여러 thread가 자원을 공유하여 작업이 수행되는 경우 서로 자원을 차지하려는 <code>race condition</code>이 발생할 수 있음</li><li>이렇게 여러 thread가 공유하는 자원 중 경쟁이 발생하는 부분을 <code>critical section</code>이라고 함</li><li>critical section에 대한 <code>동기화(일종의 순차적 수행)</code>를 구현하지 않으면 오류가 발생할 수 있음<ul><li>관련 : Synchronization, Monitor, Semaphore 등</li></ul></li></ul><h3 id="동기화-Synchronization"><a href="#동기화-Synchronization" class="headerlink" title="동기화 (Synchronization)"></a>동기화 (Synchronization)</h3><ul><li>공유 자원을 사용할 때 한 쓰레드가 사용 중이면 Lock을 걸어서 다른 쓰레드의 접근을 막는다<ol><li>메서드에 <code>synchronized</code> 키워드 입력</li><li>synchronized 블록 생성 @쓰레드, 메서드<ul><li><code>synchronized(참조형 수식) &#123;&#125;</code></li></ul></li></ol></li></ul><details><summary>예제 코드1 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">saveMoney</span><span class="params">(<span class="keyword">int</span> save)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = getMoney();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setMoney(m + save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">minusMoney</span><span class="params">(<span class="keyword">int</span> minus)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = getMoney();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setMoney(m-minus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Park</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start save&quot;</span>);</span><br><span class="line">        SyncMain.myBank.saveMoney(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;saveMoney : &quot;</span> + SyncMain.myBank.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParkWife</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start minus&quot;</span>);</span><br><span class="line">        SyncMain.myBank.minusMoney(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;minusMoney : &quot;</span> + SyncMain.myBank.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bank myBank = <span class="keyword">new</span> Bank();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Park p = <span class="keyword">new</span> Park();</span><br><span class="line">        p.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ParkWife pw = <span class="keyword">new</span> ParkWife();</span><br><span class="line">        pw.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>예제 코드 2 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveMoney</span><span class="params">(<span class="keyword">int</span> save)</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = getMoney();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setMoney(m + save);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h2><h3 id="우선순위"><a href="#우선순위" class="headerlink" title="우선순위"></a>우선순위</h3><ul><li><code>Thread.MIN_PRIORITY(=1) ~ Thread.MAX_PRIORITY(=10)</code></li><li>디폴트 우선순위 : Thread.NORMAL_PRIORITY(=5)</li><li>우선 순위가 높은 Thread가 CPU의 배분을 받을 <strong>확률이 높다</strong></li><li>우선순위 설정 및 호출이 가능하다<ul><li><code>setPriority()/getPriority()</code></li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line">System.out.println( t + <span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;=<span class="number">1000000</span>; i++)&#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println( t.getPriority() + <span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=Thread.MIN_PRIORITY; i&lt;= Thread.MAX_PRIORITY; i++)&#123;</span><br><span class="line"></span><br><span class="line">PriorityThread pt = <span class="keyword">new</span> PriorityThread();</span><br><span class="line">pt.setPriority(i);</span><br><span class="line">pt.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><ul><li>동시에 두 개 이상의 Thread가 실행 될 때 다른 Thread의 결과를 참조 하여 실행해야 하는 경우 join() 함수를 사용</li><li>join() 함수를 호출한 Thread가 not-runnable 상태가 감</li><li>다른 Thread의 수행이 끝나면 runnable 상태로 돌아옴</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">int</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JoinTest</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = start; i &lt;= end; i++)&#123;</span><br><span class="line">            total += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JoinTest jt1 = <span class="keyword">new</span> JoinTest(<span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line">        JoinTest jt2 = <span class="keyword">new</span> JoinTest(<span class="number">51</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        jt1.start();</span><br><span class="line">        jt2.start();</span><br><span class="line">        <span class="comment">// jt1, jt2가 끝날 때까지 main thread는 Not Runnable 상태가 된다.</span></span><br><span class="line">        <span class="comment">// 무한 루프 등 hang을 해결하기 위해 Exception을 날려준다.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jt1.join();</span><br><span class="line">            jt2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 아직 계산하고 있는 중이라서 값이 할당되지 않을 수 있다.</span></span><br><span class="line">        <span class="keyword">int</span> lastTotal = jt1.total + jt2.total;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;jt1.total = &quot;</span> + jt1.total);</span><br><span class="line">        System.out.println(<span class="string">&quot;jt2.total = &quot;</span> + jt2.total);</span><br><span class="line">        System.out.println(<span class="string">&quot;LastTotal = &quot;</span> + lastTotal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h3><ul><li>다른 Thread에 예외를 발생시키는 interrupt를 보낸다.</li><li>join(), sleep(), wait()에 의해 Not Runnable 상태일 때, 호출하면 다시 runnable 상태가 된다.</li></ul><h3 id="쓰레드-종료"><a href="#쓰레드-종료" class="headerlink" title="쓰레드 종료"></a>쓰레드 종료</h3><ul><li>무한 반복의 경우 while(flag)의 flag를 false로 바꾸어 종료시킨다.</li><li>while(true)가 아닌 다른 값을 입력해주기 위해 변수를 사용한다.</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminateThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TerminateThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!flag)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println( getName() + <span class="string">&quot; end&quot;</span> );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.flag = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">TerminateThread threadA = <span class="keyword">new</span> TerminateThread(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">TerminateThread threadB = <span class="keyword">new</span> TerminateThread(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">TerminateThread threadC = <span class="keyword">new</span> TerminateThread(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"></span><br><span class="line">threadA.start();</span><br><span class="line">threadB.start();</span><br><span class="line">threadC.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">in = System.in.read();</span><br><span class="line"><span class="keyword">if</span> ( in == <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">threadA.setFlag(<span class="keyword">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(in == <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">threadB.setFlag(<span class="keyword">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( in == <span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">threadC.setFlag(<span class="keyword">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( in == <span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">threadA.setFlag(<span class="keyword">true</span>);</span><br><span class="line">threadB.setFlag(<span class="keyword">true</span>);</span><br><span class="line">threadC.setFlag(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;type again&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><h3 id="extends-Thread"><a href="#extends-Thread" class="headerlink" title="extends Thread"></a>extends Thread</h3><ul><li>Thread가 수행이되면 run 메서드가 실행된다.</li><li>기본적으로 메인 쓰레드가 수행이된다.</li><li>예제에서 쓰레드 2개를 추가하여 테스트 (메인 포함 총 3개 쓰레드)</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;=<span class="number">200</span>; i++)&#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 현재 main 내의 thread확인</span></span><br><span class="line">        <span class="comment">// [호출한 함수, priority, threadGroup]</span></span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;start&quot;</span>);</span><br><span class="line">        MyThread th1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread th2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="implements-Runnable"><a href="#implements-Runnable" class="headerlink" title="implements Runnable"></a>implements Runnable</h3><ul><li><code>run 메서드</code>를 override 해주어어야 한다.</li><li>Main에서 Thread를 생성할 때 <code>runnable 객체</code>를 생성하여 <code>생성자의 parameter</code>로 넣어준다. </li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch17;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">200</span>; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="comment">// runnable 객체 생성</span></span><br><span class="line">        MyThread runnable = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">// runnable기반으로 쓰레드가 돌아간다.</span></span><br><span class="line">        Thread th1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        Thread th2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line"></span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>        ]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> 쓰레드 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOStream</title>
      <link href="/09/02/IOStream/"/>
      <url>/09/02/IOStream/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="IO-스트림"><a href="#IO-스트림" class="headerlink" title="IO 스트림"></a>IO 스트림</h1><h2 id="IO-Stream-입출력-스트림"><a href="#IO-Stream-입출력-스트림" class="headerlink" title="IO Stream (입출력 스트림)"></a>IO Stream (입출력 스트림)</h2><ul><li>스트림 : 네트워크에서 자료의 흐름이 물의 흐름과 같다는 비유에서 유래</li><li>java의 입출력을 위한 스트림</li><li>입출력 매개체에 독립적으로 일관성있는 입출력을 제공한다.<ul><li>키보드, 마우스, 네트워크, 메모리 등</li></ul></li></ul><h2 id="구분"><a href="#구분" class="headerlink" title="구분"></a>구분</h2><h3 id="대상-기준"><a href="#대상-기준" class="headerlink" title="대상 기준"></a>대상 기준</h3><ul><li>입력과 출력 스트림은 독립적으로 구분된다.</li></ul><details><Summary>대상 기준에 따른 스트림</Summary><h4 id="입력-스트림-입력용"><a href="#입력-스트림-입력용" class="headerlink" title="입력 스트림(입력용)"></a>입력 스트림(입력용)</h4><ul><li>FileInputStream</li><li>FileReader</li><li>BufferedInputStream</li><li>BufferedReader …</li></ul><h4 id="출력-스트림-출력용"><a href="#출력-스트림-출력용" class="headerlink" title="출력 스트림(출력용)"></a>출력 스트림(출력용)</h4><ul><li>FileOutputStream</li><li>FileWriter</li><li>BufferedOutputStream</li><li>BufferedWriter …</details></li></ul><h3 id="자료의-종류"><a href="#자료의-종류" class="headerlink" title="자료의 종류"></a>자료의 종류</h3><details><summary>자료의 종류에 따른 스트림</summary><h4 id="바이트-스트림"><a href="#바이트-스트림" class="headerlink" title="바이트 스트림"></a>바이트 스트림</h4><ul><li>동영상, 음악 파일, 실행 파일 등을 읽고 쓸 때 사용</li><li>FileInputStream</li><li>FileOutputStream</li><li>BufferedInputStream</li><li>BufferedOutputStream …</li></ul><h4 id="문자-스트림"><a href="#문자-스트림" class="headerlink" title="문자 스트림"></a>문자 스트림</h4><ul><li>바이트 단위로 자료를 처리하면 문자는 깨진다.</li><li>인코딩에 맞게 2바이트 이상으로 처리할 때 사용</li><li>FileReader</li><li>FileWriter</li><li>BufferedReader</li><li>BufferedWriter …</details></li></ul><h3 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h3><details><summary>기능에 따른 스트림</summary><h4 id="기반-스트림"><a href="#기반-스트림" class="headerlink" title="기반 스트림"></a>기반 스트림</h4><ul><li>대상에 직접 자료를 읽고 쓰는 기능의 스트림</li><li>FileInputStream</li><li>FileOutputStream</li><li>FileReader</li><li>FileWriter</li></ul><h4 id="보조-스트림"><a href="#보조-스트림" class="headerlink" title="보조 스트림"></a>보조 스트림</h4><ul><li>실제로 읽고 쓰는 기능은 없으나, 다른 스트림을 감싸서(wrap), 다른 스트림이 하는 일을 보조해준다.</li><li>다른 기반 스트림이나, 보조 스트림을 생성자의 매개변수로 갖는다.</li><li>InputStreamReader</li><li>OutputStreamWriter</li><li>BufferedInputStream</li><li>BufferedOutputStream</details></li></ul><h2 id="표준-입출력-스트림"><a href="#표준-입출력-스트림" class="headerlink" title="표준 입출력 스트림"></a>표준 입출력 스트림</h2><ul><li><p>System.out</p><ul><li>표준 출력(모니터) 스트림</li><li><code>System.out.println(&quot;출력 메세지&quot;);</code></li></ul></li><li><p>System.in</p><ul><li>표준 입력(키보드) 스트림</li><li><code>int d = System.in.read() // 한 바이트 읽기</code><blockquote><p>한 바이트로 읽으면 한글과 같은 2바이트 이상은 불러올 수 없기 때문에 보조스트림으로 감싸주어야한다.</p></blockquote></li></ul></li><li><p>System.err</p><ul><li>표준 에러 출력(모니터) 스트림</li><li><code>System.err.println(&quot;에러 메세지&quot;);</code></li></ul></li></ul><details><summary>한 바이트 읽기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;알파벳 여러 개를 쓰고 [Enter]를 누르세요&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader irs = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">            <span class="keyword">while</span> ((i = irs.read()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>보조 스트림으로 감싸기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;알파벳 여러 개를 쓰고 [Enter]를 누르세요&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader irs = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">            <span class="keyword">while</span> ((i = irs.read()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="바이트-단위-입출력-스트림"><a href="#바이트-단위-입출력-스트림" class="headerlink" title="바이트 단위 입출력 스트림"></a>바이트 단위 입출력 스트림</h2><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><ul><li>바이트 단위 입력 스트림의 최상위 추상 클래스</li><li>다양한 추상 메서드들이 선언되어 있고, 하위 스트림 클래스가 상속받아서 구현한다.</li></ul><h4 id="하위-클래스"><a href="#하위-클래스" class="headerlink" title="하위 클래스"></a>하위 클래스</h4><ul><li>FileInputStream<ul><li>파일에서 바이트 단위로 자료를 읽는다.</li></ul></li><li>ByteArrayInputStream<ul><li>바이트 배열 메모리에서 바이트 단위로 자료를 읽는다.</li></ul></li><li>FilterInputStream<ul><li>기반 스트림에서 자료를 읽을 때 추가 기능을 제공하는 보조 스트림의 상위 클래스</li></ul></li></ul><h4 id="주요-메서드"><a href="#주요-메서드" class="headerlink" title="주요 메서드"></a>주요 메서드</h4><ul><li>int read() <ul><li>입력 스트림으로부터 한 바이트의 자료를 읽고, 바이트 수를 반환</li></ul></li><li>int read(byte b[])<ul><li>b 크기의 자료를 읽고, 바이트 수를 반환</li></ul></li><li>int read(byte b[], int off, int len)<ul><li>b 크기 자료에서의 인덱스 0으로부터 Off만큼 떨어진 곳부터 len까지 자료를 읽고, 바이트 수를 반환</li></ul></li><li>void close()<ul><li>파일, 스트림을 불러왔을 때는 항상 close를 해주어야한다.</li></ul></li></ul><details><summary>int read() 하나씩 출력하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)fis.read());</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)fis.read());</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)fis.read());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                System.out.println(ioException);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                System.out.println(e2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                System.out.println(e2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>파일 내 데이터 모두 불러오기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// try의 resource에 파일을 넣어주면 AutoClosable이 되어 close를 하지 않아도 된다.</span></span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;input.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// read()메서드는 파일의 끝에서 -1을 반환해준다.</span></span><br><span class="line">            <span class="keyword">while</span> ( (i = fis.read()) != -<span class="number">1</span> )&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>int read(바이트 배열) 출력하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;input2.txt&quot;</span>);)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">while</span> ((i = fis.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; i ; j++) &#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>)bs[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot; : &quot;</span> + i + <span class="string">&quot;바이트 읽음&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><ul><li>바이트 단위 출력 스트림의 최상위 클래스</li><li>InputStream과 같이 하위 스트림이 상속받아 구현한다.</li></ul><h4 id="하위-클래스-1"><a href="#하위-클래스-1" class="headerlink" title="하위 클래스"></a>하위 클래스</h4><ul><li><p>FileOutputStream</p><ul><li>파일에서 바이트 단위로 자료를 쓴다.<blockquote><p>파일을 불러올 때 해당 이름의 파일이 없으면 생성한다.</p><ul><li>default : Overwrite(덮어쓰기, 기존 데이터는 무시한다.)</li><li>append를 true로 설정하여 이어서 작성할 수 있다.<ul><li><code>new FileOutputStrem(&quot;a.txt&quot;, true);</code></li></ul></li></ul></blockquote></li></ul></li><li><p>ByteArrayOutputStream</p><ul><li>byte배열에서 바이트 단위로 자료를 쓴다.</li></ul></li><li><p>FilterOutputStream</p><ul><li>기반 스트림에서 자료를 쓸 때 추가 기능을 제공하는 보조 스트림의 상위 클래스</li></ul></li></ul><h4 id="주요-메서드-1"><a href="#주요-메서드-1" class="headerlink" title="주요 메서드"></a>주요 메서드</h4><ul><li>int write() <ul><li>한 바이트를 출력한다.</li></ul></li><li>int write(byte b[])<ul><li>b[] 크기의 자료를 출력한다.</li></ul></li><li>int write(byte b[], int off, int len)<ul><li>b 크기 자료에서의 인덱스 0으로부터 Off만큼 떨어진 곳부터 len까지 자료를 출력</li></ul></li><li>int flush()<ul><li>네트워크에서 socket을 쓰면 socket의 출력용 버퍼테 일정 크기의 데이터가 쌓이면 전송이된다.</li><li>강제적으로 버퍼를 비워 자료를 출력하게한다.</li></ul></li><li>void close()<ul><li>리소스를 닫으면서 flush()를 수행한다.</li></ul></li></ul><details><summary>Byte별로 write하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>))&#123;</span><br><span class="line">            fos.write(<span class="number">65</span>);</span><br><span class="line">            fos.write(<span class="number">66</span>);</span><br><span class="line">            fos.write(<span class="number">67</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>Byte 배열 write하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(fos)&#123; <span class="comment">//java9 이후로 제공</span></span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="keyword">byte</span> data = <span class="number">65</span>; <span class="comment">// ASCII &#x27;A&#x27;값</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; bs.length ; j++)&#123;</span><br><span class="line">                bs[j] = data;</span><br><span class="line">                data++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fos.write(bs);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;완료되었습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="문자단위-입출력-스트림"><a href="#문자단위-입출력-스트림" class="headerlink" title="문자단위 입출력 스트림"></a>문자단위 입출력 스트림</h2><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><ul><li>문자 단위 입력 스트림의 최상위 추상 클래스</li><li>추상 메서드를 하위 스트림이 상속받아 구현한다.</li></ul><h4 id="하위-클래스-2"><a href="#하위-클래스-2" class="headerlink" title="하위 클래스"></a>하위 클래스</h4><ul><li>FileReader<ul><li>파일에서 문자 단위로 읽는 스트림 클래스</li></ul></li><li>InputStreamReader<ul><li>보조 스트림</li><li>바이트 단위로 읽은 자료(스트림)를 문자로 변환</li></ul></li><li>BufferedReader<ul><li>보조 스트림</li><li>배열을 제공하여 한꺼번에 읽을 수 있는 기능을 제공</li></ul></li></ul><h4 id="주요-메서드-2"><a href="#주요-메서드-2" class="headerlink" title="주요 메서드"></a>주요 메서드</h4><ul><li>문자, 문자열을 읽어 온다.</li><li>int read()</li><li>int read(char[] buf)</li><li>int read(char[] buf, int off, int len)</li><li>void close()</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;reader.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">while</span> ((i = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h3><ul><li>문자 단위 출력 스트림의 최상위 클래스</li><li>추상 메서드를 하위 스트림이 상속받아 구현한다.</li></ul><h4 id="하위-클래스-3"><a href="#하위-클래스-3" class="headerlink" title="하위 클래스"></a>하위 클래스</h4><ul><li>FileWriter</li><li>OutputStreamWriter</li><li>Buffered Writer</li></ul><h4 id="주요-메서드-3"><a href="#주요-메서드-3" class="headerlink" title="주요 메서드"></a>주요 메서드</h4><ul><li>int write(int c)</li><li>int write(char[] buf)</li><li>int write(char[] buf, int off, int len)</li><li>int write(String str)</li><li>int write(String str, int off, int len)</li><li>int flush()</li><li>void close()</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;writer.txt&quot;</span>)) &#123;</span><br><span class="line">            fw.write(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            <span class="keyword">char</span> buf[] = &#123;<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line">            fw.write(buf);</span><br><span class="line">            fw.write(<span class="string">&quot;안녕하세요.&quot;</span>);</span><br><span class="line">            fw.write(buf, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            fw.write(<span class="string">&quot;65&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="보조-스트림-1"><a href="#보조-스트림-1" class="headerlink" title="보조 스트림"></a>보조 스트림</h2><ul><li>실제 읽고 쓰는 스트림이 아닌 보조 기능을 제공하는 스트림이다.<ul><li>FileInputStream과 FileOutputStream의 하위 클래스</li></ul></li><li>여러 기능을 조합하여 사용할 수 있는 Decorator Pattern으로 구현된다.</li><li>생성자의 매개 변수로 파일 이름이 아닌 기반 스트림, 보조 스트림을 갖는다.</li></ul><h3 id="InputStreamReader-OutputStreamReader"><a href="#InputStreamReader-OutputStreamReader" class="headerlink" title="InputStreamReader, OutputStreamReader"></a>InputStreamReader, OutputStreamReader</h3><details><summary>예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;reader.txt&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">while</span>( (i = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="BufferedInputStream-BufferedOutputStream"><a href="#BufferedInputStream-BufferedOutputStream" class="headerlink" title="BufferedInputStream, BufferedOutputStream"></a>BufferedInputStream, BufferedOutputStream</h3><details><summary>예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> millisecond = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;reader.txt&quot;</span>));</span><br><span class="line">             BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;copy.txt&quot;</span>))) &#123;</span><br><span class="line"></span><br><span class="line">            millisecond = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">while</span> ((i = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            millisecond = System.currentTimeMillis() - millisecond;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(millisecond + <span class="string">&quot;소요되었습니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="DataInputStream-DataOutputStream"><a href="#DataInputStream-DataOutputStream" class="headerlink" title="DataInputStream, DataOutputStream"></a>DataInputStream, DataOutputStream</h3><ul><li>자료가 메모리에 저장된 상태 그대로 읽거나 쓰는 스트림<ul><li>자료형, 크기를 유지하여 읽고 쓴다.</li></ul></li><li>기록한 자료형 그대로 불러와야한다.</li></ul><details><summary></summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataIOTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">             DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(fos)) &#123;</span><br><span class="line"></span><br><span class="line">            dos.writeByte(<span class="number">100</span>);</span><br><span class="line">            dos.writeChar(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            dos.writeInt(<span class="number">10</span>);</span><br><span class="line">            dos.writeFloat(<span class="number">3.14f</span>);</span><br><span class="line">            dos.writeUTF(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line">             DataInputStream dis = <span class="keyword">new</span> DataInputStream(fis))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(dis.readByte());</span><br><span class="line">            System.out.println(dis.readChar());</span><br><span class="line">            System.out.println(dis.readInt());</span><br><span class="line">            System.out.println(dis.readFloat());</span><br><span class="line">            System.out.println(dis.readUTF());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOStream </tag>
            
            <tag> 입출력 스트림 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>로그 (Log)</title>
      <link href="/08/31/Log/"/>
      <url>/08/31/Log/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="Log-로그"><a href="#Log-로그" class="headerlink" title="Log (로그)"></a>Log (로그)</h1><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><ul><li>시스템 운영에 대한 기록<ul><li>오류가 발생했을 때 오류에 대한 기록을 남겨 디버깅을 용이하게 할 수 있다.</li></ul></li><li><code>java.util.logging.Logger</code> 활용</li><li>Exception을 handling할 때 로그를 남겨주어야 한다.<ul><li>Log가 너무 많으면 빈번한 file 입출력의 오버헤드 및 백업 문제 등이 발생할 수 있다.</li></ul></li></ul><h2 id="레벨"><a href="#레벨" class="headerlink" title="레벨"></a>레벨</h2><ul><li>severe</li><li>warning</li><li>info</li><li>config</li><li>fine</li><li>finer</li><li>finest</li></ul><h2 id="사용"><a href="#사용" class="headerlink" title="사용"></a>사용</h2><ul><li>처음 System을 오픈할 때는 모든 level을 찍고, 안정화된 후에 info level부터 찍는 등 다양한 방법이 있다.</li><li>logger의 level을 ALL로 설정하면 다른 FileHandler는 모든 범위 내에서 설정이 가능하다.</li><li>같은 패키지 내에 로그 파일이 저장된다.</li></ul><details><summary>예제코드1 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.FileHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLog</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Singleton과 유사하게 인스턴스 생성</span></span><br><span class="line">    Logger logger = Logger.getLogger(<span class="string">&quot;mylogger&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyLog instance = <span class="keyword">new</span> MyLog();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 파일 이름 설정</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String errorLog = <span class="string">&quot;log.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String warningLog = <span class="string">&quot;warning.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String fineLog = <span class="string">&quot;fine.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 위 파일별 log를 설정할 FileHandler 객체 생성</span></span><br><span class="line">    <span class="comment">// 객체명은 오류 레벨과 맞춰서 설정하였음</span></span><br><span class="line">    <span class="keyword">private</span> FileHandler logFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler warningFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler fineFile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 생성자 구현</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4-1. 인스턴스 생성 (파일이름, append 여부)</span></span><br><span class="line">            logFile = <span class="keyword">new</span> FileHandler(errorLog, <span class="keyword">true</span>);</span><br><span class="line">            warningFile = <span class="keyword">new</span> FileHandler(warningLog, <span class="keyword">true</span>);</span><br><span class="line">            fineFile = <span class="keyword">new</span> FileHandler(fineLog, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4-2. Log기록의 형식 지정 (SimpleFormatter : 기본 형식)</span></span><br><span class="line">        logFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        warningFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        fineFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-3. 로그 레벨 설정</span></span><br><span class="line">        <span class="comment">// 모든 로그 레벨 기록</span></span><br><span class="line">        logger.setLevel(Level.ALL);</span><br><span class="line">        <span class="comment">// FileHandler마다 레벨을 다르게 설정할 수 있다.</span></span><br><span class="line">        warningFile.setLevel(Level.WARNING);</span><br><span class="line">        fineFile.setLevel(Level.FINE);;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-4. 4-1에서 생성한 Handler 추가</span></span><br><span class="line">        logger.addHandler(logFile);</span><br><span class="line">        logger.addHandler(warningFile);</span><br><span class="line">        logger.addHandler(fineFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4-5. getter 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyLog <span class="title">getLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 로그 기록 남기는 함수</span></span><br><span class="line">    <span class="comment">// logger에 설정한 레벨에 해당하는 log만 사용가능</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// logger가 finest level을 handle 할 수 있도록 addHandler를 해주었으므로 가능하다.</span></span><br><span class="line">        logger.finest(msg);</span><br><span class="line">        logger.finer(msg);</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">        logger.config(msg);</span><br><span class="line">        logger.info(msg);</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">        logger.severe(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5-1. fine level 메세지 출력함수</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fine</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5-2. warning level 메시지 출력함수</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>logger의 level을 INFO로 설정하면 다른 FileHandler는 INFO 내에서 설정이 가능하다.<ul><li>FileHandler 중 fineFile은 범위를 fine부터 설정하였지만 INFO 범위 내에 포함되지 않으므로 INFO 레벨부터 로그가 기록된다.</li></ul></li></ul><details><summary>예제코드2 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.FileHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLog</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. Singleton과 유사하게 인스턴스 생성</span></span><br><span class="line">    Logger logger = Logger.getLogger(<span class="string">&quot;mylogger&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyLog instance = <span class="keyword">new</span> MyLog();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 파일 이름 설정</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String errorLog = <span class="string">&quot;log.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String warningLog = <span class="string">&quot;warning.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String fineLog = <span class="string">&quot;fine.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 위 파일별 log를 설정할 FileHandler 객체 생성</span></span><br><span class="line">    <span class="comment">// 객체명은 오류 레벨과 맞춰서 설정하였음</span></span><br><span class="line">    <span class="keyword">private</span> FileHandler logFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler warningFile = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> FileHandler fineFile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 생성자 구현</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4-1. 인스턴스 생성 (파일이름, append 여부)</span></span><br><span class="line">            logFile = <span class="keyword">new</span> FileHandler(errorLog, <span class="keyword">true</span>);</span><br><span class="line">            warningFile = <span class="keyword">new</span> FileHandler(warningLog, <span class="keyword">true</span>);</span><br><span class="line">            fineFile = <span class="keyword">new</span> FileHandler(fineLog, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4-2. Log기록의 형식 지정 (SimpleFormatter : 기본 형식)</span></span><br><span class="line">        logFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        warningFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line">        fineFile.setFormatter(<span class="keyword">new</span> SimpleFormatter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-3. 로그 레벨 설정</span></span><br><span class="line">        <span class="comment">// 모든 로그 레벨 기록</span></span><br><span class="line">        logger.setLevel(Level.INFO);</span><br><span class="line">        <span class="comment">// FileHandler마다 레벨을 다르게 설정할 수 있다.</span></span><br><span class="line">        warningFile.setLevel(Level.WARNING);</span><br><span class="line">        fineFile.setLevel(Level.FINE);;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4-4. 4-1에서 생성한 Handler 추가</span></span><br><span class="line">        logger.addHandler(logFile);</span><br><span class="line">        logger.addHandler(warningFile);</span><br><span class="line">        logger.addHandler(fineFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4-5. getter 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyLog <span class="title">getLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 로그 기록 남기는 함수</span></span><br><span class="line">    <span class="comment">// logger에 설정한 레벨에 해당하는 log만 사용가능</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// logger가 finest level을 handle 할 수 있도록 addHandler를 해주었으므로 가능하다.</span></span><br><span class="line">        logger.finest(msg);</span><br><span class="line">        logger.finer(msg);</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">        logger.config(msg);</span><br><span class="line">        logger.info(msg);</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">        logger.severe(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5-1. fine level 메세지 출력함수</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fine</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        logger.fine(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5-2. warning level 메시지 출력함수</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        logger.warning(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>테스트 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Singleton으로 구현하였으므로 getLog를 통해서 호출</span></span><br><span class="line">        MyLog logger = MyLog.getLog();</span><br><span class="line">        logger.log(<span class="string">&quot;Log Test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>콘솔 파일은 Mac OS 기준으로 <code>jre 내의 conf 폴더</code>에 properties파일이 저장된다.</li><li>파일 내에서 정보 date, Thread Name 등을 설정할 수 있다.</li></ul><details><summary>콘솔 파일 내용 확인하기</summary><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#  Default Logging Configuration File</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can use a different file by specifying a filename</span></span><br><span class="line"><span class="comment"># with the java.util.logging.config.file system property.  </span></span><br><span class="line"><span class="comment"># For example java -Djava.util.logging.config.file=myfile</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#  Global properties</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># &quot;handlers&quot; specifies a comma separated list of log Handler </span></span><br><span class="line"><span class="comment"># classes.  These handlers will be installed during VM startup.</span></span><br><span class="line"><span class="comment"># Note that these classes must be on the system classpath.</span></span><br><span class="line"><span class="comment"># By default we only configure a ConsoleHandler, which will only</span></span><br><span class="line"><span class="comment"># show messages at the INFO and above levels.</span></span><br><span class="line"><span class="attr">handlers</span>= <span class="string">java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># To also add the FileHandler, use the following line instead.</span></span><br><span class="line"><span class="comment">#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Default global logging level.</span></span><br><span class="line"><span class="comment"># This specifies which kinds of events are logged across</span></span><br><span class="line"><span class="comment"># all loggers.  For any given facility this global level</span></span><br><span class="line"><span class="comment"># can be overriden by a facility specific level</span></span><br><span class="line"><span class="comment"># Note that the ConsoleHandler also has a separate level</span></span><br><span class="line"><span class="comment"># setting to limit messages printed to the console.</span></span><br><span class="line"><span class="meta">.level</span>= <span class="string">INFO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Handler specific properties.</span></span><br><span class="line"><span class="comment"># Describes specific configuration info for Handlers.</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># default file output is in user&#x27;s home directory.</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.pattern</span> = <span class="string">%h/java%u.log</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.limit</span> = <span class="string">50000</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.count</span> = <span class="string">1</span></span><br><span class="line"><span class="comment"># Default number of locks FileHandler can obtain synchronously.</span></span><br><span class="line"><span class="comment"># This specifies maximum number of attempts to obtain lock file by FileHandler</span></span><br><span class="line"><span class="comment"># implemented by incrementing the unique field %u as per FileHandler API documentation.</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.maxLocks</span> = <span class="string">100</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.formatter</span> = <span class="string">java.util.logging.XMLFormatter</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Limit the message that are printed on the console to INFO and above.</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.level</span> = <span class="string">INFO</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.formatter</span> = <span class="string">java.util.logging.SimpleFormatter</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Example to customize the SimpleFormatter output format </span></span><br><span class="line"><span class="comment"># to print one-line log message like this:</span></span><br><span class="line"><span class="comment">#     &lt;level&gt;: &lt;log message&gt; [&lt;date/time&gt;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># Facility specific properties.</span></span><br><span class="line"><span class="comment"># Provides extra control for each logger.</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># For example, set the com.xyz.foo logger to only log SEVERE</span></span><br><span class="line"><span class="comment"># messages:</span></span><br><span class="line"><span class="comment"># com.xyz.foo.level = SEVERE</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="Exception과-함께-사용"><a href="#Exception과-함께-사용" class="headerlink" title="Exception과 함께 사용"></a>Exception과 함께 사용</h2><ul><li>Exception 상황에서는 항상 적절한 level의 log를 남겨야한다.</li></ul><details><summary>Custom Exception 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentNameFormatException</span> <span class="keyword">extends</span> <span class="title">IllegalArgumentException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentNameFormatException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><details><summary>예제 클래스 </summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String studentName;</span><br><span class="line">  MyLog myLog = MyLog.getLog();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String studentName)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (studentName == <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> StudentNameFormatException(<span class="string">&quot;Name must not be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (studentName.split(<span class="string">&quot; &quot;</span>).length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> StudentNameFormatException(<span class="string">&quot;너무 긴 이름입니다.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.studentName = studentName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getStudentName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    myLog.fine(<span class="string">&quot;begin getStudentName&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> studentName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>생성자에는 Exception을 throws하지 않는다.</li><li>Custom Exception의 extends에 Exception이 아닌 <code>IllegalArgumentException</code>을 extends하여 핸들링할 수 있다.</li></ul><details><summary>테스트 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Online;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyLog myLog = MyLog.getLog();</span><br><span class="line"></span><br><span class="line">        String name = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 1. 예외상황1 테스트</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (StudentNameFormatException e) &#123;</span><br><span class="line">            myLog.warning(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 예외상황2 테스트</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student(<span class="string">&quot;Edward John Kim Test&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (StudentNameFormatException e) &#123;</span><br><span class="line">            myLog.warning(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(<span class="string">&quot;James&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>결과 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>월 <span class="number">31</span>, <span class="number">2021</span> <span class="number">3</span>:<span class="number">24</span>:<span class="number">58</span> 오후 Online.MyLog warning</span><br><span class="line">WARNING: Name must not be <span class="keyword">null</span></span><br><span class="line"><span class="number">8</span>월 <span class="number">31</span>, <span class="number">2021</span> <span class="number">3</span>:<span class="number">24</span>:<span class="number">58</span> 오후 Online.MyLog warning</span><br><span class="line">WARNING: 너무 긴 이름입니다.</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Log </tag>
            
            <tag> 로그 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>예외처리</title>
      <link href="/08/25/Exception/"/>
      <url>/08/25/Exception/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="예외처리-Exception"><a href="#예외처리-Exception" class="headerlink" title="예외처리 (Exception)"></a>예외처리 (Exception)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>Java에서 발생하는 문제는 오류(Error)와 예외(Exception)로 구분할 수 있다.</li></ul><h2 id="오류-Error"><a href="#오류-Error" class="headerlink" title="오류 (Error)"></a>오류 (Error)</h2><ul><li>시스템 오류(Error) : 가상머신에서 발생하고, 개발자가 처리할 수 없는 오류<ul><li>동적 메모리가 없는 경우, 스택 오버플로우 등</li></ul></li></ul><h3 id="컴파일-오류-Compile-Error"><a href="#컴파일-오류-Compile-Error" class="headerlink" title="컴파일 오류 (Compile Error)"></a>컴파일 오류 (Compile Error)</h3><ul><li>프로그램 코드 작성 중 발생하는 문법적인 오류</li><li>IDE에서 컴파일 오류를 detection할 수 있다.</li></ul><h3 id="실행-오류-Runtime-Error"><a href="#실행-오류-Runtime-Error" class="headerlink" title="실행 오류 (Runtime Error)"></a>실행 오류 (Runtime Error)</h3><ul><li>실행 중인 프로그램이 중단되거나 의도하지 않은 동작(bug)을 하는 오류</li></ul><h2 id="예외-Exception"><a href="#예외-Exception" class="headerlink" title="예외 (Exception)"></a>예외 (Exception)</h2><ul><li>프로그램에서 제어할 수 있는 오류</li><li>DB, Network Connection 등</li></ul><h3 id="중요성"><a href="#중요성" class="headerlink" title="중요성"></a>중요성</h3><ul><li>프로그램의 비정상적인 종료를 피할 수 있다.</li><li>log를 적절하게 남기고, 분석을 통해 원인을 파악하고 bug를 수정하여야 한다.<ul><li>상세하게 level별로 남겨야한다.</li></ul></li></ul><h3 id="예외-클래스"><a href="#예외-클래스" class="headerlink" title="예외 클래스"></a>예외 클래스</h3><blockquote><p><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html">https://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html</a></p></blockquote><h2 id="예외-처리"><a href="#예외-처리" class="headerlink" title="예외 처리"></a>예외 처리</h2><h3 id="try-catch문"><a href="#try-catch문" class="headerlink" title="try-catch문"></a>try-catch문</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    예외가 발생할 수 있는 코드</span><br><span class="line">&#125; <span class="keyword">catch</span> (처리할 예외 타입) &#123;</span><br><span class="line">    <span class="keyword">try</span> 블록 안에서 예외가 발생했을 때 예외처리 코드</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayindexExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;=<span class="number">5</span> ; i++)&#123;</span><br><span class="line">                System.out.println(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="try-catch-finally문"><a href="#try-catch-finally문" class="headerlink" title="try-catch-finally문"></a>try-catch-finally문</h3><ul><li>try()블럭이 수행되면 finally() 블럭은 항상 수행된다.<ul><li>return이 포함되어 있어도 수행된다.</li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileExceptionHandling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span> ;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="try-with-resource문"><a href="#try-with-resource문" class="headerlink" title="try-with-resource문"></a>try-with-resource문</h3><ul><li>java7 이후로 <code>FileInputStream</code>클래스가 <code>AutoCloseable</code> 인터페이스를 implement하여 close를 하지 않아도 자동으로 해제된다.</li><li>java9부터 리소스는 try() 외부에서 선언하고 try(var)와 같이 사용할 수 있다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.text&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>(fis)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileExceptionHandling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 자동으로 close가 된다.</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">        <span class="comment">// file을 불러올 때 생길 수 있는 에러</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        <span class="comment">// file을 close할 때 생길 수 있는 에러</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="예외처리-미루기"><a href="#예외처리-미루기" class="headerlink" title="예외처리 미루기"></a>예외처리 미루기</h3><ul><li>main함수에서 throws를 하게되면 VM으로 넘어가서 abort된다.</li><li>throws를 이용하여 예외를 발생시키는 문장에서 예외를 처리하게 미룰 수 있다.</li><li><code>catch(Exception e)</code> 구문을 통하여 default 처리를 할 수 있다.<ul><li>catch 구문 중 가장 아랫줄에 작성해야 다른 exception을 개별 처리할 수 있다.</li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsException</span> </span>&#123;</span><br><span class="line">  <span class="comment">// throws하여 메서드를 사용할 때 Exception을 처리하도록 한다.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Class <span class="title">loadClass</span><span class="params">(String fileName, String className)</span> <span class="keyword">throws</span> ClassNotFoundException, FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">    Class c = Class.forName(className);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThrowsException test = <span class="keyword">new</span> ThrowsException();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      test.loadClass(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">      System.out.println(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">      System.out.println(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;default Exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="사용자-정의-예외클래스"><a href="#사용자-정의-예외클래스" class="headerlink" title="사용자 정의 예외클래스"></a>사용자 정의 예외클래스</h3><ul><li>자바에서 제공되는 exception 외 필요한 exception을 생성할 수 있다.</li><li>기존 클래스 중 가장 유사한 클래스를 상속을 받거나, Exception 클래스를 상속받는다.</li><li>Exception을 정의하고, 필요한 순간에 어떠한 exception이 어느 순간에 불려야하는지 구현한다.<blockquote><p>throws</p><ul><li>예외를 호출하는 메서드에게 전가하는 것</li><li>메서드에서 상위 메서드로 예외를 던진다.</li></ul><p>throw</p><ul><li>exception을 실제로 던지는 것</li><li>메서드 내에서 상위 블럭으로 예외를 던진다.</li></ul></blockquote></li></ul><details><summary>Exception 정의하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassWordException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PassWordException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>사용자 정의 Exception</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassWordTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> <span class="keyword">throws</span> PassWordException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PassWordException(<span class="string">&quot;비밀번호는 null이 될 수 없습니다.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (password.length() &lt; <span class="number">5</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PassWordException(<span class="string">&quot;비밀번호는 5자 이상이어야 합니다..&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (password.matches(<span class="string">&quot;[a-zA-Z]+&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PassWordException(<span class="string">&quot;비밀번호는 숫자나 특수문자를 포함해야 합니다.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PassWordTest test = <span class="keyword">new</span> PassWordTest();</span><br><span class="line"></span><br><span class="line">        String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.setPassword(password);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류없음1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PassWordException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        password = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.setPassword(password);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류없음2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PassWordException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        password = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.setPassword(password);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류없음3&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PassWordException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        password = <span class="string">&quot;abcde1#&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.setPassword(password);</span><br><span class="line">            System.out.println(<span class="string">&quot;오류없음4&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PassWordException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
            <tag> Custom Exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>스트림</title>
      <link href="/08/25/Stream/"/>
      <url>/08/25/Stream/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="스트림-Stream"><a href="#스트림-Stream" class="headerlink" title="스트림 (Stream)"></a>스트림 (Stream)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>배열, collection 자료가 모여있을 때 연산의 처리를 일관성 있게 한다.<ul><li>자료 처리에 대한 추상화가 구현되었다고 한다.</li></ul></li><li>일관성 있는 연산으로 자료의 처리를 쉽고 간단하게 한다.</li><li>한번 생성하고 사용한 스트림은 재사용 할 수 없다.<ul><li>다른 연산을 수행하기 위해서는 스트림을 다시 생성해야 한다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntArrayStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line">        <span class="comment">// 모든 Array는 Arrays 클래스를 활용할 수 있다.</span></span><br><span class="line">        IntStream is = Arrays.stream(arr);</span><br><span class="line">        is.forEach(n -&gt; System.out.println(n));</span><br><span class="line">        <span class="comment">//is는 한번 소모하였으니 다시 사용할 수 없다.</span></span><br><span class="line">        <span class="comment">// 재사용하고 싶을 때 재생성</span></span><br><span class="line">        <span class="keyword">int</span> sum = Arrays.stream(arr).sum();</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="연산"><a href="#연산" class="headerlink" title="연산"></a>연산</h2><ul><li>스트림의 연산은 중간 연산과 최종 연산으로 구분된다.</li><li>중간 연산은 여러 개의 연산이 적용될 수 있지만 최종 연산은 마지마게 한 번만 적용된다.</li><li><code>지연 연산</code><ul><li>최종 연산이 호출되어야 중간 연산에 대한 수행이 이루어지고 결과가 만들어진다.</li></ul></li></ul><h3 id="중간연산"><a href="#중간연산" class="headerlink" title="중간연산"></a>중간연산</h3><ul><li><code>filter()</code> : 조건에 맞는 요소를 추출</li><li><code>map()</code> : 조건에 맞는 요소를 변환</li><li><code>sorted()</code> : 정렬</li></ul><h3 id="최종연산"><a href="#최종연산" class="headerlink" title="최종연산"></a>최종연산</h3><ul><li><code>forEach()</code> : 요소를 하나씩 꺼내옴</li><li><code>count()</code> : 요소의 개수 반환</li><li><code>sum()</code> : 요소들의 합</li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; sList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sList.add(<span class="string">&quot;Thomas&quot;</span>);</span><br><span class="line">        sList.add(<span class="string">&quot;Edward&quot;</span>);</span><br><span class="line">        sList.add(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Stream&lt;String&gt; stream = sList.stream();</span><br><span class="line">        stream.forEach(s-&gt;System.out.println(s));</span><br><span class="line"></span><br><span class="line">        sList.stream().sorted().forEach(s-&gt;System.out.print(s + <span class="string">&quot;\t&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        sList.stream().map(s-&gt;s.length()).forEach(n-&gt;System.out.print(n + <span class="string">&quot;\t&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        sList.stream().filter(s-&gt;s.length()&gt;=<span class="number">5</span>).forEach(s-&gt;System.out.print(s + <span class="string">&quot;\t&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="comment">//Thomas</span></span><br><span class="line"><span class="comment">//Edward</span></span><br><span class="line"><span class="comment">//Jack</span></span><br><span class="line"><span class="comment">//EdwardJackThomas</span></span><br><span class="line"><span class="comment">//6 64</span></span><br><span class="line"><span class="comment">//ThomasEdward</span></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce 메서드</title>
      <link href="/08/25/reduce/"/>
      <url>/08/25/reduce/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="reduce-메서드"><a href="#reduce-메서드" class="headerlink" title="reduce 메서드"></a>reduce 메서드</h1><h2 id="reduce-연산"><a href="#reduce-연산" class="headerlink" title="reduce() 연산"></a>reduce() 연산</h2><ul><li>기존에 정의된 연산이 아닌 직접 구현한 연산을 적용한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">reduce</span><span class="params">(T identify, BinaryOperator&lt;T&gt; accumulator)</span></span></span><br></pre></td></tr></table></figure></li><li>최종 연산으로 스트림을 요소를 소모하여 연산을 수행한다.</li><li>예시<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BinaryOperator;</span><br><span class="line"><span class="comment">// parameter BinaryOperator&lt;T&gt;를 구현하여 사용</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompareString</span> <span class="keyword">implements</span> <span class="title">BinaryOperator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.getBytes().length &gt;= s2.getBytes().length) <span class="keyword">return</span> s1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String greetings[] = &#123;<span class="string">&quot;안녕히계세요~~~&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Goood morning&quot;</span>, <span class="string">&quot;반갑습니다&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 직접 작성</span></span><br><span class="line">        System.out.println(Arrays.stream(greetings).reduce(<span class="string">&quot;&quot;</span>, (s1,s2)-&gt;</span><br><span class="line">            &#123;<span class="keyword">if</span> (s1.getBytes().length &gt;= s2.getBytes().length) <span class="keyword">return</span> s1;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> s2;&#125;</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. BinaryOperator&lt;T&gt;의 메서드 implement</span></span><br><span class="line">        <span class="comment">// 새로운 클래스로 생성하여 사용한다.</span></span><br><span class="line">        String str = Arrays.stream(greetings).reduce(<span class="keyword">new</span> CompareString()).get();</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>람다식 (Lambda Expression)</title>
      <link href="/08/25/Lambda/"/>
      <url>/08/25/Lambda/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="람다식-Lambda-Expression"><a href="#람다식-Lambda-Expression" class="headerlink" title="람다식 (Lambda Expression)"></a>람다식 (Lambda Expression)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>java8부터 함수형 프로그래밍 방식을 지원하고, 이를 <code>람다식</code>이라고 한다.</li><li>함수형 프로그래밍<ul><li>매개 변수만을 사용하여 만드는 함수인 <code>순수 함수</code>를 구현</li><li>외부 자료를 사용하지 않으므로 side effect가 없다</li><li>여러 자료를 동시에 처리하는 병렬처리가 가능하다.<ul><li>함수의 기능이 자료에 독립적이다.</li></ul></li></ul></li></ul><h2 id="문법"><a href="#문법" class="headerlink" title="문법"></a>문법</h2><ul><li>익명 함수 만들기</li><li>매개변수와 매개변수를 이용한 실행문으로 구현된다.</li><li>java는 OOP언어이기 때문에 람다식, 함수로만 클래스를 구성할 수 없다.<ul><li>interface의 메소드를 구현하는 방식으로 한다.</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch02;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Add</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Add add = (x, y) -&gt; &#123;<span class="keyword">return</span> x+y;&#125;;</span><br><span class="line">        System.out.println(add.add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="람다식과-OOP-방식-비교"><a href="#람다식과-OOP-방식-비교" class="headerlink" title="람다식과 OOP 방식 비교"></a>람다식과 OOP 방식 비교</h2><ul><li>람다식에서는 FunctionalInterface 익명 내부 클래스가 생성된다.</li><li>OOP 방식에서는 Interface를 implement하여 구현하고, 메서드를 호출한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringConcatTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">        <span class="comment">// OOP 방식    </span></span><br><span class="line">        StringConcatImp strImp = <span class="keyword">new</span> StringConcatImp();</span><br><span class="line">        strImp.makeString(s1, s2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 람다식 구현 방식</span></span><br><span class="line">        StringConcat concat = (s,v)-&gt; System.out.println(s+<span class="string">&quot;,&quot;</span>+v);</span><br><span class="line">        concat.makeString(s1,s2);</span><br><span class="line">        <span class="comment">// 2. 람다식 구현 방식</span></span><br><span class="line">        StringConcat concat2 = <span class="keyword">new</span> StringConcat() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">                System.out.println(s1+<span class="string">&quot;,&quot;</span>+s2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lambda </tag>
            
            <tag> 람다식 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>내부 클래스</title>
      <link href="/08/24/InnerClass/"/>
      <url>/08/24/InnerClass/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="내부-클래스"><a href="#내부-클래스" class="headerlink" title="내부 클래스"></a>내부 클래스</h1><h2 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h2><h3 id="인스턴스-instance-내부-클래스"><a href="#인스턴스-instance-내부-클래스" class="headerlink" title="인스턴스(instance) 내부 클래스"></a>인스턴스(instance) 내부 클래스</h3><ul><li>인스턴스 변수와 생성 위치, 방법, Scope가 동일하다.</li><li>내부적으로 사용할 클래스를 선언 (private으로 선언하는 것을 권장)</li><li><code>외부 클래스가 생성된 후 생성됨</code></li><li>private이 아닌 내부 클래스는 다른 외부 클래스에서 생성할 수 있다.<ul><li>문법적으로는 가능하지만 잘 사용하지 않는다.</li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch01;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sNum = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> InClass inClass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        inClass = <span class="keyword">new</span> InClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> iNum = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">inTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OutClass num = &quot;</span> +num + <span class="string">&quot;(외부 클래스의 인스턴스 변수)&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;OutClass sNum = &quot;</span> + sNum + <span class="string">&quot;(외부 클래스의 스태틱 변수)&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;InClass inNum = &quot;</span> + iNum + <span class="string">&quot;(내부 클래스의 인스턴스 변수)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">usingClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        inClass.inTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OutClass outClass = <span class="keyword">new</span> OutClass();</span><br><span class="line">        outClass.usingClass();</span><br><span class="line">        System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">        OutClass.InClass inner = outClass.<span class="function">new <span class="title">InClass</span><span class="params">()</span></span>;</span><br><span class="line">        inner.inTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="정적-static-내부-클래스"><a href="#정적-static-내부-클래스" class="headerlink" title="정적(static) 내부 클래스"></a>정적(static) 내부 클래스</h3><ul><li>정적 변수와 정적 메서드를 사용한다.</li><li>내부 클래스의 인스턴스, 스태틱 변수, 외부 클래스의 스태틱 변수를 사용할 수 있다.</li><li><code>외부 클래스 생성과 무관하게 사용할 수 있다.</code></li></ul><blockquote><ul><li>외부 클래스가 생성되지 않아도 사용할 수 있기 때문에 정적 내부 클래스에서 외부 클래스의 인스턴스 변수를 사용할 수 없다.</li><li>정적 내부 클래스의 정적 메서드는 스태틱 변수만 사용할 수 있다.</li></ul></blockquote><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InStaticClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> iNum = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> sInNum = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">inTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;inClass num = &quot;</span> +iNum + <span class="string">&quot;(외부 클래스의 인스턴스 변수)&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;OutClass sNum = &quot;</span> + sNum + <span class="string">&quot;(외부 클래스의 스태틱 변수)&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;InClass inNum = &quot;</span> + sInNum + <span class="string">&quot;(내부 클래스의 인스턴스 변수)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OutClass sNum = &quot;</span> + sNum + <span class="string">&quot;(외부 클래스의 스태틱 변수)&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;InClass inNum = &quot;</span> + sInNum + <span class="string">&quot;(내부 클래스의 인스턴스 변수)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><h3 id="지역-local-내부-클래스"><a href="#지역-local-내부-클래스" class="headerlink" title="지역(local) 내부 클래스"></a>지역(local) 내부 클래스</h3><ul><li>지역 변수와 같이 메서드 내부에서 정의하여 사용한다.</li><li>메서드의 호출이 끝나면 메서드에 사용된 지역변수의 유효성은 사라짐<blockquote><p>메서드 호출 이후 반환이 되어도 메서드의 지역 변수를 클래스를 통해 사용할 수 있으므로 <code>final</code>로 처리한다. </p></blockquote></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> outNum = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sNum = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// 메서드</span></span><br><span class="line">    <span class="function">Runnable <span class="title">getRunnable</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 지역 내부 클래스</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> localNum = <span class="number">1000</span>;</span><br><span class="line">            <span class="comment">// 재정의</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;i =&quot;</span> + i);</span><br><span class="line">                System.out.println(<span class="string">&quot;num = &quot;</span> +num);</span><br><span class="line">                System.out.println(<span class="string">&quot;localNum = &quot;</span> +localNum);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;outNum = &quot;</span> + outNum + <span class="string">&quot;(외부 클래스 인스턴스 변수)&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Outter.sNum = &quot;</span> + Outer2.sNum + <span class="string">&quot;(외부 클래스 정적 변수)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRunnable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousInnerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Outer2 out = <span class="keyword">new</span> Outer2();</span><br><span class="line">        <span class="comment">// 메서드가 Runnable한 값을 runner에 return해주고 해제되었다.</span></span><br><span class="line">        Runnable runner = out.getRunnable(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 해제된 이후 지역 내부 클래스의 메서드 사용 </span></span><br><span class="line">        <span class="comment">// final로 선언해주었기 때문에</span></span><br><span class="line">        runner.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="익명-Anonymous-내부-클래스"><a href="#익명-Anonymous-내부-클래스" class="headerlink" title="익명(Anonymous) 내부 클래스"></a>익명(Anonymous) 내부 클래스</h3><ul><li>이름이 없는 클래스<ul><li>지역 내부 클래스의 예시코드에서 클래스 이름 <code>MyRunnable</code>은 실제로 호출되지 않으므로 이를 생략한다.</li><li>하나의 인터페이스나 하나의 추상 클래스를 구현하여 반환한다.</li></ul></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch01;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> outNum = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sNum = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// 메서드</span></span><br><span class="line">    <span class="function">Runnable <span class="title">getRunnable</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 익명 내부 클래스 (바로 return값을 입력)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="keyword">int</span> localNum = <span class="number">1000</span>;</span><br><span class="line">            <span class="comment">// 재정의</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;i =&quot;</span> + i);</span><br><span class="line">                System.out.println(<span class="string">&quot;num = &quot;</span> +num);</span><br><span class="line">                System.out.println(<span class="string">&quot;localNum = &quot;</span> +localNum);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;outNum = &quot;</span> + outNum + <span class="string">&quot;(외부 클래스 인스턴스 변수)&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Outter.sNum = &quot;</span> + Outer2.sNum + <span class="string">&quot;(외부 클래스 정적 변수)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// runnable을 생성해서 바로 구현</span></span><br><span class="line">    Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Runnable class&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousInnerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Outer2 out = <span class="keyword">new</span> Outer2();</span><br><span class="line">    Runnable runner = out.getRunnable(<span class="number">100</span>);</span><br><span class="line">    runner.run();</span><br><span class="line"></span><br><span class="line">    out.runnable.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Inner Class </tag>
            
            <tag> 내부 클래스 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>클래스 프레임워크</title>
      <link href="/08/24/ClassFramework/"/>
      <url>/08/24/ClassFramework/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="컬렉션-프레임워크"><a href="#컬렉션-프레임워크" class="headerlink" title="컬렉션 프레임워크"></a>컬렉션 프레임워크</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>프로그램 구현에 필요한 자료구조를 구현해 놓은 JDK 라이브러리</li><li><code>java.util</code> 패키지에 구현되어 있다.</li></ul><h2 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h2><h3 id="Collection-인터페이스"><a href="#Collection-인터페이스" class="headerlink" title="Collection 인터페이스"></a>Collection 인터페이스</h3><ul><li>하나의 요소를 관리할 때 사용한다.</li><li>하위에 List와 Set 인터페이스가 있다.<h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4></li><li>컬렉션 프레임워크에 저장된 요소를 하나씩 차례로 참조한다.</li><li>List 인터페이스 : 순서가 정해져 있으므로 get(I)를 사용하여 참조 또한 가능하다.</li><li>Set 인터페이스 : get(I) 메서드가 제공되지 않으므로 Iterator를 활용하여 객체를 순회한다.</li><li>Iterator 함수를 호출하면 iterator가 반환이 된다.</li></ul><ul><li><code>hasNext()</code> : 이후에 요소가 더 있는지를 체크하는 메서드</li><li><code>E.next()</code> : 다음에 있는 요소를 반환</li></ul><details><summary>구현 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Member&gt; ir = arrayList.iterator();</span><br><span class="line"><span class="keyword">while</span> (ir.hasNext())&#123;</span><br><span class="line">    Member member = ir.next();</span><br><span class="line">    <span class="keyword">int</span> tempId = member.getMemberId();</span><br><span class="line">    <span class="keyword">if</span> (tempId == memberId)&#123;</span><br><span class="line">        arrayList.remove(member);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(memberId + <span class="string">&quot;가 존재하지 않습니다.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></details><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ul><li>객체를 순서에 따라 저장 및 관리할 때 필요한 메서드가 선언된 인터페이스</li><li>리스트 자료구조의 구현을 위한 인터페이스</li><li>객체의 중복을 허용한다.</li><li>ArrayList, Vector, Queue, Stack, LinkedList 등</li></ul><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><details><summary>구현 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberArrayList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Member&gt; arrayList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberArrayList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberArrayList</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(Member member)</span></span>&#123;</span><br><span class="line">        arrayList.add(member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeMember</span><span class="params">(<span class="keyword">int</span> memberId)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 중복이 가능하므로 어떤 요소를 삭제할 것인지 먼저 retrieve</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); i++)&#123;</span><br><span class="line">            Member member = arrayList.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> tempId = member.getMemberId();</span><br><span class="line">            <span class="keyword">if</span> (tempId == memberId)&#123;</span><br><span class="line">                arrayList.remove(i);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(memberId + <span class="string">&quot;가 존재하지 않습니다.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAllMember</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Member i :arrayList)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><ul><li>아이디, 주민번호, 사번 등 유일한 값들의 집합을 관리할 때 사용한다.</li><li>저정된 순서와 출력 순서가 달라질 수 있다.</li></ul><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><ul><li>검색을 위한 알고리즘인 Hash 방식으로 구성되어 있고, key</li><li>순서와 관계가 없다.</li><li>멤버의 중복 여부를 체크하기 위해 인스턴스의 동일성을 확인해야 한다.<ul><li>동일성 구현을 위해 필요에 따라 <code>equals()</code>와 <code>hashCode()</code> 메서드를 재정의함</li><li>hashCode는 객체를 구분하기 위한 unique한 값을 return하게 해준다.</li></ul></li></ul><details><summary> Override 코드 확인하기 </summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memberId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Member) &#123;</span><br><span class="line">            Member member = (Member)obj;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.memberId == member.memberId) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><ul><li>객체의 정렬에 사용하는 클래스 (중복을 허용하지 않는다.)</li><li>내부적으로 Binary Search Tree가 구현이 되어있다. (In-order traversal)</li><li>Java에서는 balance를 위해 레드-블랙 트리를 사용한다.</li><li>비교하기 위한 요소를 구현하여야한다.<ul><li>작은 값은 왼쪽으로, 큰 값은 오른쪽으로 정렬하기 위해</li><li>element를 추가할 때마다 어떻게 비교할 지 <code>comparable</code>, <code>comparator</code>인터페이스를 구현하여야한다.</li></ul></li></ul><details><summary>Comparable 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Comparable 인터페이스를 implement하여 compareTo 메서드를 오버라이딩 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Member</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// this = 삽입되는 값</span></span><br><span class="line">    <span class="comment">// this가 크면 양수를 반환하여 오른쪽으로 이동하게 구현되어 있다.</span></span><br><span class="line">    <span class="comment">// 값이 같으면 (중복되면) 0을 반환하여 삽입되지 않는다.</span></span><br><span class="line">    <span class="comment">// 내림 차순은 양수, 음수를 바꿔주면 된다.</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.memberId - member.memberId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary> Comparator 코드 확인하기 </summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Comparator 인터페이스를 implement하여 compare 메서드 오버라이딩.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Member</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Member o1, Member o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (o1.memberId - o2.memberId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Comparator를 사용할 때</span></span><br><span class="line"><span class="comment">// TreeSet의 constructor(생성자)에 comparator를 구현한 객체를 지정해주어야한다.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MemberTreeSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        treeSet = <span class="keyword">new</span> TreeSet&lt;Member&gt;(<span class="keyword">new</span> Member());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 객체에 default constructor가 있어야 사용할 수 있다.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h5 id="Comparator-활용하기"><a href="#Comparator-활용하기" class="headerlink" title="Comparator 활용하기"></a>Comparator 활용하기</h5><ul><li>이미 Comparable이 구현된 경우 Comparator로 비교 로직을 다시 구현할 수 있음</li><li>String이 제공하는 compare 메서드는 오름차순으로 정렬이 된다.</li><li>return값에 -1을 곱하여 내림차순으로 수정한다.</li></ul><details><summary>기존 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;Park&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;Kim&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;Lee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(set);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 결과 : [Kim, Lee, Park]</span></span><br></pre></td></tr></table></figure></details><details><summary>Comparator 활용 코드</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 String 클래스의 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2)*-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeSet을 생성할 때 매개변수로 Comparator를 정의한 클래스를 넣어준다.</span></span><br><span class="line">TreeSet&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> MyCompare());</span><br><span class="line">      set.add(<span class="string">&quot;Park&quot;</span>);</span><br><span class="line">              set.add(<span class="string">&quot;Kim&quot;</span>);</span><br><span class="line">              set.add(<span class="string">&quot;Lee&quot;</span>);</span><br><span class="line"></span><br><span class="line">              System.out.println(set);</span><br></pre></td></tr></table></figure></details><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li>Key와 value의 pair를 관리할 때 사용한다.</li><li>Key값은 유일하여, 중복이 허용되지 않는다.</li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul><li>Key를 이용하여 값을 저장하고, 값을 꺼내온다.</li><li>key가 되는 객체는 중복될 수 없고, 객체의 유일성을 비교하기 위해 <code>equals()</code>, <code>hashCode()</code> 메서드를 구현하여야 한다. </li><li>Key는 중복이 될 수 없으므로 Set과 같은 개념</li><li>Value는 중복이 될 수 있으므로 Collection과 같은 개념으로 보면 된다.<blockquote><p>다른 키값이라도 hash함수를 통해 같은 index가 도출될 수 있다. </p><ul><li>Collision이 발생하며 오버헤드가 발생할 수 있다.</li><li>Java에서는 hash table의 Load Balance를 약 75%로 산정하여, 이를 방지한다.<ul><li>100개가 들어갈 수 있는 테이블에 약 75개의 데이터를 수용함</li></ul></li></ul></blockquote></li></ul><details><summary>예제 코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       hashMap.put(<span class="number">1001</span>, <span class="string">&quot;Kim&quot;</span>);</span><br><span class="line">       hashMap.put(<span class="number">1002</span>, <span class="string">&quot;Lee&quot;</span>);</span><br><span class="line">       hashMap.put(<span class="number">1003</span>, <span class="string">&quot;Park&quot;</span>);</span><br><span class="line">       hashMap.put(<span class="number">1004</span>, <span class="string">&quot;Hong&quot;</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(hashMap);</span><br></pre></td></tr></table></figure></details><details><summary>새로운 객체 HashMap 생성</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberHashMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, Member&gt; hashMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemberHashMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMember</span><span class="params">(Member member)</span></span>&#123;</span><br><span class="line">        hashMap.put(member.getMemberId(), member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeMember</span><span class="params">(<span class="keyword">int</span> memberId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hashMap.containsKey(memberId))&#123;</span><br><span class="line">            hashMap.remove(memberId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;no element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Iterator&lt;Integer&gt; ir = hashMap.keySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ir.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> key = ir.next();</span><br><span class="line">            Member member = hashMap.get(key);</span><br><span class="line">            System.out.println(member);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><ul><li>키로 정렬이 되고,  tree를 사용한다.</li><li>TreeSet과 HashMap의 개념을 합한 클래스</li><li>key, value 페어 key값을 기준으로 정렬<ul><li><code>key</code>에 해당되는 class에 <code>comparable</code>, <code>comparator</code> 정렬</li><li>key가 Integer, String이면 기존 메서드 활용하고, 아니면 오버라이딩하여 사용한다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Basic </tag>
            
            <tag> 클래스 프레임워크 </tag>
            
            <tag> Class Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자바 배열 구현</title>
      <link href="/08/20/JavaArray/"/>
      <url>/08/20/JavaArray/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="Array-구현"><a href="#Array-구현" class="headerlink" title="Array 구현"></a>Array 구현</h1><ul><li>jdk 클래스 : ArrayList, Vector<h2 id="구현-함수"><a href="#구현-함수" class="headerlink" title="구현 함수"></a>구현 함수</h2></li><li>배열은 크기를 미리 정해주어야 한다.<blockquote><ul><li>ARRAY_SIZE = 배열의 크기 </li><li>count = 배열 내 요소 개수</li><li>addElement = 요소 추가 함수</li><li>insertElement = 요소 삽입 함수</li><li>removeElement = 요소 제거 함수</li><li>getSize = 배열의 크기</li><li>getElement = 검색 함수</li><li>printAll = 모든 요소 출력</li><li>removeAll = 모든 요소 삭제</li></ul></blockquote></li></ul><details><summary>예제코드 확인하기</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] intArr;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ARRAY_SIZE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR_NUM = -<span class="number">999999999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        ARRAY_SIZE = <span class="number">10</span>;</span><br><span class="line">        intArr = <span class="keyword">new</span> <span class="keyword">int</span>[ARRAY_SIZE];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        ARRAY_SIZE = size;</span><br><span class="line">        intArr = <span class="keyword">new</span> <span class="keyword">int</span>[ARRAY_SIZE];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= ARRAY_SIZE) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Not enough Memory&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        intArr[count++] = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertElement</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = count - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= ARRAY_SIZE) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Not enough Memory&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; count) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Insert Error&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &gt; index) &#123;</span><br><span class="line">            intArr[i + <span class="number">1</span>] = intArr[i];</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        intArr[index] = num;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = ERROR_NUM;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;There is no element&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= count)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;index Error&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = intArr[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i&lt;count-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            intArr[i] = intArr[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; count-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;검색 위치 오류입니다. 현재 리스트의 개수는 &quot;</span> + count + <span class="string">&quot;입니다.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ERROR_NUM;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intArr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;출력할 값이 없습니다.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; count; i++)&#123;</span><br><span class="line">            System.out.println(intArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">            intArr[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바 </tag>
            
            <tag> Array </tag>
            
            <tag> 배열 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Class 클래스</title>
      <link href="/08/19/Class/"/>
      <url>/08/19/Class/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="Class-클래스-사용하기"><a href="#Class-클래스-사용하기" class="headerlink" title="Class 클래스 사용하기"></a>Class 클래스 사용하기</h1><ul><li><p>자바의 모든 클래스와 인터페이스는 컴파일 후 class파일이 생성된다.</p><ul><li>클래스 내의 메서드, 생성자 배열 등 모든 정보가 들어있다.</li></ul></li><li><p>컴파일 된 class 파일을 로드하여 객체를 동적으로 로드하고, 정보를 가져오는 메서드가 제공된다.</p></li></ul><h2 id="클래스-동적-로딩"><a href="#클래스-동적-로딩" class="headerlink" title="클래스 동적 로딩"></a>클래스 동적 로딩</h2><h3 id="Class-forName-“클래스-이름”"><a href="#Class-forName-“클래스-이름”" class="headerlink" title="Class.forName(“클래스 이름”)"></a>Class.forName(“클래스 이름”)</h3><ul><li><code>Class c = Class.forName(&quot;java.lang.String&quot;)</code><blockquote><p>동적 로딩</p><ul><li>일반적으로 Class가 Local에 있는지 살펴보고 binding되어 type으로 정의하여 변수가 사용된다.</li><li>Compile 할 때가 아닌, 실질적으로 실행할 때 필요한 클래스를 binding하는 방법</li><li>ex) JDBC 드라이버에서 실행 전까지 DB의 라이브러리가 어떤 것인지 모르고, property파일 등을 읽을 때 변수로 갖고 있다가 Oracle 드라이버 이름을 String변수에 넣어준다.</li></ul></blockquote></li><li>장점 : 동적으로  원하는 클래스를 로딩할 수 있다.</li><li>단점 : 로딩할 때 Local에 class나 라이브러리가 없는 등 오류가 발생하면 시스템이 다운될 수 있다.</li></ul><h2 id="사용-방법"><a href="#사용-방법" class="headerlink" title="사용 방법"></a>사용 방법</h2><ul><li>주로 remote에 있는 class를 호출할 때 사용한다.<ul><li><code>Local에 클래스가 없을 때</code></li></ul></li><li>아래 코드를 <code>reflection 프로그래밍</code>이라고 한다.<details><summary>예제 코드 확인하기</summary></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package ch04;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class StringTest &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        Class c = Class.forName(&quot;java.lang.String&quot;);</span><br><span class="line">        </span><br><span class="line">        // Constructor의 목록을 배열로 가져온다.</span><br><span class="line">        Constructor[] cons = c.getConstructors();</span><br><span class="line">        for (Constructor co : cons) &#123;</span><br><span class="line">            System.out.println(co);</span><br><span class="line">        &#125;</span><br><span class="line">        // 메소드의 목록을 가져온다.</span><br><span class="line">        Method[] m = c.getMethods();</span><br><span class="line">        for (Method mth : m) &#123;</span><br><span class="line">            System.out.println(mth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="인스턴스-생성"><a href="#인스턴스-생성" class="headerlink" title="인스턴스 생성"></a>인스턴스 생성</h2><ul><li><code>reflection 프로그래밍</code><ul><li>Class 클래스를 사용하여 클래스의 정보 등을 알 수 있고, 인스턴스를 생성, 메서드를 호출하는 방식의 프로그래밍<ol><li>로컬 메모리에 객체가 없는 경우</li><li>원격 프로그래밍 (서로 다른 프로세스)</li><li>객체의 타입을 알 수 없는 경우</li></ol></li><li><code>java.lang.reflect</code> 패키지의 클래스를 활용하여 사용</li><li>자료형을 알고 있는 경우에는 사용하지 않음</li></ul></li></ul><details><summary> 예제 코드 확인하기 </summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package ch04;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line">public class ClassTest &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        // 1. Class 이름으로 invoke(호출)하기</span><br><span class="line">        Class c1 = Class.forName(&quot;ch04.Person&quot;);</span><br><span class="line">        // Person 타입으로 Casting</span><br><span class="line">        Person person = (Person)c1.newInstance();</span><br><span class="line"></span><br><span class="line">        person.setName(&quot;Lee&quot;);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 2. 이미 생성된 객체로 invoke</span><br><span class="line">        Class c2 = person.getClass();</span><br><span class="line">        // 2-1. 인스턴스화, Person타입으로 Casting</span><br><span class="line">        Person person2 = (Person)c2.newInstance();</span><br><span class="line">        person2.setName(&quot;Kim&quot;);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 3. 생성자를 호출하여 객체 생성</span><br><span class="line">        Class[] classArray = &#123;String.class&#125;;</span><br><span class="line">        Constructor cons = c2.getConstructor(classArray);</span><br><span class="line">        // 3-1. Object 배열 형태</span><br><span class="line">        Object[] initargs = &#123;&quot;Jeong&quot;&#125;;</span><br><span class="line">        // Line23에서 불러온 생성자로 객체 생성</span><br><span class="line">        Person person3 = (Person)cons.newInstance(initargs);</span><br><span class="line">        System.out.println(person3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바 </tag>
            
            <tag> Class 클래스 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자바의 클래스</title>
      <link href="/08/19/JavaClasses/"/>
      <url>/08/19/JavaClasses/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="Java의-유용한-클래스들"><a href="#Java의-유용한-클래스들" class="headerlink" title="Java의 유용한 클래스들"></a>Java의 유용한 클래스들</h1><h2 id="Object-Class"><a href="#Object-Class" class="headerlink" title="Object Class"></a>Object Class</h2><ul><li>모든 클래스의 최상위 클래스</li><li>모든 class는 Object클래스를 상속받는다.</li><li>메서드 중 일부는 필요에 의해 재정의 할 수 있다.</li><li>java.lang 패키지 안에 포함되어 있다.</li></ul><h3 id="java-lang"><a href="#java-lang" class="headerlink" title="java.lang"></a>java.lang</h3><ul><li>프로그래밍 시 자동으로 import된다</li><li>많이 사용하는 기본 클래스들이 속한 패키지</li><li>String, Integer, System 등</li></ul><h3 id="toString-메서드"><a href="#toString-메서드" class="headerlink" title="toString() 메서드"></a>toString() 메서드</h3><ul><li>객체의 정보를 String으로 바꾸어서 사용할 때 쓰인다.</li><li>재정의하여 참조변수가 멤버 변수 값을 return하게 할 수 있다.<details><summary>예제 코드 확인하기</summary></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Book&#123;</span><br><span class="line"></span><br><span class="line">    private String title;</span><br><span class="line">    private String author;</span><br><span class="line"></span><br><span class="line">    public Book(String title, String author)&#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">        this.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return title + &quot;,&quot; + author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class BookTest &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">Book book = new Book(&quot;데미안&quot;, &quot;헤르만 헤세&quot;);</span><br><span class="line">System.out.println(book);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h3 id="equals-hashCode-메서드"><a href="#equals-hashCode-메서드" class="headerlink" title="equals(), hashCode() 메서드"></a>equals(), hashCode() 메서드</h3><blockquote><p>equals() 메서드와 hashCode() 메서드는 짝을 이룬다.</p><ul><li>equals()를 overriding하면 객체가 반환하는 hash값도 overriding해줘야 한다.</li><li>equals에서 사용한 멤버 변수를 hashCode 값으로 반환해주면 된다.</li></ul></blockquote><h4 id="equals-메서드"><a href="#equals-메서드" class="headerlink" title="equals() 메서드"></a>equals() 메서드</h4><ul><li>두 인스턴스의 <code>주소 값을 비교</code>하여 true/false를 반환</li><li>인스턴스가 다르더라도 논리적으로 동일한 경우 true를 반환하도록 재정의 할 수 있다.</li><li>두 객체가 논리적으로 같다라고 하면 반환하는 Hash Code 값이 같아야한다.</li><li>Java에서 주소 값은 <code>Hash Code(해쉬 값)</code>이라고 한다.</li><li>heap 메모리를 관리하는 방식이 Hash방식이다.</li></ul><h4 id="hashCode-메서드"><a href="#hashCode-메서드" class="headerlink" title="hashCode() 메서드"></a>hashCode() 메서드</h4><ul><li>인스턴스의 저장 주소를 반환한다.</li><li>hash : 정보를 저장, 검색하는 자료 구조</li><li>자료의 특정 값(key)에 대한 저장 위치를 반환해주는 hash함수를 사용한다.</li><li><code>index(저장위치) = hash(key)</code></li></ul><details><summary> Overriding 코드 확인하기 </summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ch02;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">private int studentNum;</span><br><span class="line">private String studentName;</span><br><span class="line"></span><br><span class="line">    public Student(int StudentNum, String studentName)&#123;</span><br><span class="line">        this.studentNum = studentNum;</span><br><span class="line">        this.studentName = studentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return studentNum + &quot;,&quot; + studentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object obj) &#123;</span><br><span class="line">        if (obj instanceof Student) &#123;</span><br><span class="line">            // 다운캐스팅</span><br><span class="line">            Student std = (Student)obj;</span><br><span class="line">            if (this.studentNum == std.studentNum)&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return studentNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>예제 코드 확인하기</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package ch02;</span><br><span class="line"></span><br><span class="line">public class EqualsTest &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">        Student std1 = new Student(200, &quot;Lee&quot;);</span><br><span class="line">        Student std2 = new Student(200, &quot;Lee&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(std1==std2); //false</span><br><span class="line">        System.out.println(std1.equals(std2)); //true</span><br><span class="line">        // hashCode() 가 studentNum을 return하도록 overriding하였음.</span><br><span class="line">        System.out.println(std1.hashCode());</span><br><span class="line">        System.out.println(std2.hashCode());</span><br><span class="line"></span><br><span class="line">        // 원래 hashCode값 출력하는 방법</span><br><span class="line">        System.out.println(System.identityHashCode(std1));</span><br><span class="line">        System.out.println(System.identityHashCode(std2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="clone-메서드"><a href="#clone-메서드" class="headerlink" title="clone() 메서드"></a>clone() 메서드</h3><ul><li>객체를 생성자를 통해 생성할 때, clone()을 사용하면 원본 객체와 원본을 복제하는데 사용한다.</li><li>생성자 : 초기값을 가지고 생성이 된다.</li><li>clone() : 중간에 멤버변수가 변하면 변한 값을 그대로 복제한다.</li><li>private까지 모두 복제가 되어 객체 보호의 관점에서 위배할 수 있다.</li><li>명시적으로 clone() 메서드의 사용을 허용한다는 의미로 <code>Cloneable</code> interface를 명시해준다.</li><li><code>public class A implements Cloneable &#123;~&#125;</code></li><li>A 클래스 내에서 clone() 메서드를 Override한다.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">return super.clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>클론 코드<ul><li><code>Student copyStd = (Student)std1.clone();</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String 관련 Class</title>
      <link href="/08/19/String/"/>
      <url>/08/19/String/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="String-관련-Class"><a href="#String-관련-Class" class="headerlink" title="String 관련 Class"></a>String 관련 Class</h1><h2 id="String-클래스"><a href="#String-클래스" class="headerlink" title="String 클래스"></a>String 클래스</h2><h3 id="선언"><a href="#선언" class="headerlink" title="선언"></a>선언</h3><ol><li><code>String str = new String(“abc”);</code><ul><li>힙 메모리에 생성된다.</li></ul></li><li><code>String str2 = “abc”;</code><ul><li>상수 pool의 abc라는 String에 address가 생성된다.</li></ul></li></ol><ul><li>두 개의 인스턴스는 다르다.</li><li>힙 메모리는 생성될 때마다 다른 주소값을 가지지만, 상수 pool의 문자열은 모두 같은 주소를 가진다.</li></ul><h3 id="메모리"><a href="#메모리" class="headerlink" title="메모리"></a>메모리</h3><ul><li>한번 생성된 String은 immutable(불변)이다.</li><li>String을 연결하면 기존의 String에 연결되는 것이 아닌 새로운 문자열을 위한 메모리가 생성된다.<details><summary>예제 코드 확인하기</summary></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String java = new String(“java”); </span><br><span class="line">String android = new String(“android”); </span><br><span class="line"></span><br><span class="line">java = java.concat(android) // 위 2가지 문자열을 합해주고 java가 가리키게 한다.</span><br><span class="line"></span><br><span class="line">// 문자열 java, android, javaandroid을 위한 메모리가 계속해서 할당되어 있고, java는 “java”가 아닌 “javaandroid”를 가리킨다.</span><br><span class="line"></span><br><span class="line">// 기존 메모리에 덮어쓰는 것이 아닌 새로운 메모리를 할당한다.</span><br></pre></td></tr></table></figure></details><h2 id="StringBuilder-StringBuffer"><a href="#StringBuilder-StringBuffer" class="headerlink" title="StringBuilder, StringBuffer"></a>StringBuilder, StringBuffer</h2><blockquote><p>위 메모리 낭비를 해결하기 위해 <code>StringBuilder</code>, <code>StringBuffer</code>를 활용한다.</p></blockquote><ul><li>내부적으로 가변적인 char[]를 멤버 변수를 가진다.</li><li>새로운 인스턴스를 생성하지 않고, char[]를 변경한다.</li><li>문자열을 연결, 변경할 때 유용하게 사용할 수 있다.<h3 id="차이점"><a href="#차이점" class="headerlink" title="차이점"></a>차이점</h3></li><li>StringBuilder : 단일 쓰레드에서 사용한다.</li><li>StringBuffer : 멀티 쓰레드 프로그래밍에서 동기화를 보장한다.</li><li>두 개 이상의 쓰레드가 같은 메모리에 접근할 때 순서를 가지게 된다.<details><summary> 예제 코드 확인하기 </summary></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package ch03;</span><br><span class="line"></span><br><span class="line">public class StringBuilderTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String java = new String(&quot;java&quot;);</span><br><span class="line">String android = new String(&quot;android&quot;);</span><br><span class="line"></span><br><span class="line">        // 매개변수로 String을 받는다.</span><br><span class="line">        StringBuilder buffer = new StringBuilder(java);</span><br><span class="line">        System.out.println(System.identityHashCode(buffer));</span><br><span class="line">        // 문자열을 추가, 변경해도 메모리값은 변하지 않는다.</span><br><span class="line">        buffer.append(android);</span><br><span class="line">        System.out.println(System.identityHashCode(buffer));</span><br><span class="line"></span><br><span class="line">        System.out.println(buffer.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></details><h2 id="Text-Block-사용하기"><a href="#Text-Block-사용하기" class="headerlink" title="Text Block 사용하기"></a>Text Block 사용하기</h2><ul><li>Java 13 이상부터 제공한다.</li><li>하나의 string을 연결해서 사용할 때 사용한다.</li><li>서블릿 등 서버사이드에서 클라이언트 쪽으로 데이터를 html, json 프로토콜로  요청할 때 유용하다.</li><li><code>“”” “”” </code> 안에 string을 넣어 사용한다.<details><summary> 예제 코드 확인하기 </summary></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package ch03;</span><br><span class="line"></span><br><span class="line">public class TextBlockTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        String textBlocks = &quot;&quot;&quot;</span><br><span class="line">                Hello,</span><br><span class="line">                hi,</span><br><span class="line">                how r u</span><br><span class="line">                &quot;&quot;&quot;;</span><br><span class="line"></span><br><span class="line">        System.out.println(textBlocks);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>추상 클래스 (Abstract Class)</title>
      <link href="/08/12/20210812-Abstract/"/>
      <url>/08/12/20210812-Abstract/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="추상-클래스-Abstract-Class"><a href="#추상-클래스-Abstract-Class" class="headerlink" title="추상 클래스 (Abstract Class)"></a>추상 클래스 (Abstract Class)</h1><h2 id="의미"><a href="#의미" class="headerlink" title="의미"></a>의미</h2><blockquote><p>구현 코드없이 메서드의 선언만 있는 <code>추상 메서드를 포함한 클래스</code></p><ul><li>메서드를 생성할 때 반환값, 메서드 이름, 매개변수로 구성되어있다.</li></ul><p>구현은 상속받은 <code>자식 클래스</code>가 한다.</p><p>추상 클래스는 인스턴스화(new 로 생성) 할 수 없다.</p><ul><li>기능이 완벽하지 않기 때문</li><li>일반 클래스도 abstract 라고 명시하면 이를 생성할 수 없다.</li></ul></blockquote><ul><li>자식클래스에서 추상 메서드 중 하나라도 구현하지 않으면 자식클래스도 추상클래스가 된다.</li><li>구체적(Concrete)과 반대되는 말로, 구현부를 작성하지 않은 클래스라고 생각할 수 있다.</li><li><code>추상 클래스</code>를 생성하는 것은 <code>선언</code>이라고 한다.</li><li>어떤 기능을 할지 구현부를 작성하면 메서드를 <code>정의</code>한다고 한다.</li><li>다이어그램으로 나타낼 때 추상 메서드와 클래스는 Italic체로 작성한다.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int add(int a, intb); //선언 (추상 메서드)</span><br><span class="line">int add(int a, intb)&#123; //정의</span><br><span class="line">구현할 기능ㅔ</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바 </tag>
            
            <tag> 추상 클래스 </tag>
            
            <tag> AbstractClass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>다형성(Polymorphism)</title>
      <link href="/08/12/20210812-Polymorphism/"/>
      <url>/08/12/20210812-Polymorphism/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h1><ul><li>하나의 코드가 여러 자료형으로 구현되어 실행 되는 것</li><li>같은 코드에서 여러가지 실행 결과가 나오는 것<blockquote><p>유연하고 확장성있고, 유지보수가 편리함 프로그램을 만들 수 있다.</p></blockquote></li></ul><h2 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h2><ul><li>하위 클래스들을 상위 클래스로 형변환한다.</li><li>이를 한번에 핸들링한다.</li><li>각 인스턴스별로 다른 실행 결과를 얻을 수 있다.</li><li>결합도가 높아진다.</li></ul><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><details><summary> 모든 코드 확인하기 </summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">package polymorphismTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Animal&#123;</span><br><span class="line">// 공통된 기능을 정의 할 때 상위 클래스인 Animal에 기능을 입력한다.</span><br><span class="line">public void move() &#123;</span><br><span class="line">System.out.println(&quot;동물이 움직입니다.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Human extends Animal &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void move() &#123;</span><br><span class="line">System.out.println(&quot;사람이 두 발로 걷습니다.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void readBook() &#123;</span><br><span class="line">System.out.println(&quot;사람이 책을 읽습니다.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Tiger extends Animal &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void move() &#123;</span><br><span class="line">System.out.println(&quot;호랑이가 네 발로 뜁니다.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void hunting() &#123;</span><br><span class="line">System.out.println(&quot;호랑이가 사냥을 합니다.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Eagle extends Animal &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void move() &#123;</span><br><span class="line">System.out.println(&quot;독수리가 하늘을 납니다.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void flying() &#123;</span><br><span class="line">System.out.println(&quot;독수리가 양날개를 쭉 펴고 날아다닙니다.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class AnimalTest &#123;</span><br><span class="line"> </span><br><span class="line">public static void main (String[] args) &#123;</span><br><span class="line">// 형변환 (업캐스팅 : 상위 클래스의 타입으로 변환)</span><br><span class="line">Animal hAnimal = new Human();</span><br><span class="line">Animal tAnimal = new Tiger();</span><br><span class="line">Animal eAnimal = new Eagle();</span><br><span class="line"></span><br><span class="line">AnimalTest test = new AnimalTest();</span><br><span class="line">// 상위 클래스인 Animal로 형변환이 가능하다.</span><br><span class="line">// 각자의 가상 메서드 테이블을 갖게 된다.</span><br><span class="line">test.moveAnimal(hAnimal);</span><br><span class="line">test.moveAnimal(tAnimal);</span><br><span class="line">test.moveAnimal(eAnimal);</span><br><span class="line"></span><br><span class="line">// 세 동물을 ArrayList에 삽입하고 싶을 때</span><br><span class="line">ArrayList&lt;Animal&gt; animalList = new ArrayList&lt;&gt;();</span><br><span class="line">animalList.add(hAnimal);</span><br><span class="line">animalList.add(tAnimal);</span><br><span class="line">animalList.add(eAnimal);</span><br><span class="line">// enhanced for문을 통한 출력</span><br><span class="line">for (Animal a : animalList) &#123;</span><br><span class="line">a.move();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public void moveAnimal(Animal animal) &#123;</span><br><span class="line">animal.move();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="사용하는-이유"><a href="#사용하는-이유" class="headerlink" title="사용하는 이유"></a>사용하는 이유</h2><ul><li> 상속과 메서드의 재정의를 활용하여 확장성 있는 프로그램을 만들 수 있다.</li><li>위 예시로 보았을 때 동물을 추가하고 싶을 때 편하게 추가할 수 있다.</li><li>상위 클래스에 공통된 기능과 하위 클래스에 특정한 기능을 구분하여 코딩할 수 있다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바 </tag>
            
            <tag> 다형성 </tag>
            
            <tag> PolyMorphism </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>가상메서드(VirtualMethod)</title>
      <link href="/08/12/20210812-VirtualMethod/"/>
      <url>/08/12/20210812-VirtualMethod/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="가상-메서드"><a href="#가상-메서드" class="headerlink" title="가상 메서드"></a>가상 메서드</h1><h2 id="메서드-Method"><a href="#메서드-Method" class="headerlink" title="메서드 (Method)"></a>메서드 (Method)</h2><ul><li>명령어의 집합 (set)</li><li>Java에서 모든 메서드는 가상 메서드이다. </li><li><code>메서드의 이름</code>은 <code>주소값</code>을 나타낸다.</li><li>메서드를 호출하면 이름과 mapping되어 있는 주소값이 호출된다.<h3 id="함수-호출-방식"><a href="#함수-호출-방식" class="headerlink" title="함수 호출 방식"></a>함수 호출 방식</h3></li></ul><ol><li>프로그램이 로드되면 <code>메서드 영역(코드 영역)</code>에 <code>명령어 set</code>이 위치한다.</li><li>메서드가 호출되면 명령어 set이 위치한 주소를 찾아가 명령어가 실행된다.</li></ol><ul><li>이 때 메서드에 위치한 변수들은 stack메모리에 위치하게 된다.<blockquote><p>서로 다른 인스턴스가 동일한 메서드를 호출하면 같은 method가 호출된다.<br>인스턴스가 생성되면 변수는 heap메모리에 저장이 되지만, 메서드 명령어 set은 한 번만 로드된다.</p></blockquote></li></ul><h2 id="가상-메서드-Virtual-Method"><a href="#가상-메서드-Virtual-Method" class="headerlink" title="가상 메서드 (Virtual Method)"></a>가상 메서드 (Virtual Method)</h2><ul><li>클래스마다 가상 메서드 테이블(Virtual Method Table)에 메서드의 address를 가지고 있다.</li><li>메서드가 재정의되면 재정의된 클래스의 테이블에 address가 추가된다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바 </tag>
            
            <tag> 가상메서드 </tag>
            
            <tag> VirtualMethod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>상속(Inheritance)</title>
      <link href="/08/12/20210812-Inheritance/"/>
      <url>/08/12/20210812-Inheritance/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="Java-상속-형변환-재정의"><a href="#Java-상속-형변환-재정의" class="headerlink" title="Java 상속, 형변환, 재정의"></a>Java 상속, 형변환, 재정의</h1><h2 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h2><ul><li>구현되어 있는 기능, 속성을 <code>확장하여</code> 재사용하는 것 </li><li> class B extends A{ }</li><li>extends 뒤에는 하나의 클래스만 올 수 있다.</li><li>자바는 안정성을 위해 단일 상속만을 지원한다.</li><li>상속 하는 클래스 : 상위 클래스, parent class, child class</li><li>상속 받는 클래스 :  하위, child, sub</li></ul><h3 id="상속을-사용하는-경우"><a href="#상속을-사용하는-경우" class="headerlink" title="상속을 사용하는 경우"></a>상속을 사용하는 경우</h3><ul><li>객체 지향 프로그래밍에서는 크게 2가지 방법을 사용할 수 있다.</li><li><code>IS-A 관계 (is a relationship : inheritance)</code>, <code>HAS-A관계(composition)</code></li><li>IS-A관계에서 상속을 사용한다.</li></ul><ol><li>IS-A 관계</li></ol><ul><li>예시 : 포유류 - 인간, 호랑이, 사자 등</li><li>일반적인 개념과 구체적인 개념의 관계</li><li>뼈대를 구축하고 이를 <code>확장해서 사용할 때</code> 자주 사용된다.</li><li>상속은 클래스간의 결합도가 높은 설계이다.</li><li>계층구조가 복잡하거나 hiearchy가 높으면 좋지 않다.</li></ul><ol start="2"><li>HAS-A 관계</li></ol><ul><li>예시 : Java의 ArrayList 클래스를 사용하는 경우</li><li>클래스가 다른 클래스를 포함하는 관계 (변수로 선언)</li><li>코드 재사용의 가장 일반적인 방법</li></ul><h3 id="상속을-구현하는-경우"><a href="#상속을-구현하는-경우" class="headerlink" title="상속을 구현하는 경우"></a>상속을 구현하는 경우</h3><ul><li>일반적인 클래스로부터 보다 구체적인 클래스를 생성하고 싶을 때 사용한다.</li><li>직업 (일반 클래스) - 개발자 (구체적인 클래스)</li></ul><h3 id="하위-클래스가-생성되는-과정"><a href="#하위-클래스가-생성되는-과정" class="headerlink" title="하위 클래스가 생성되는 과정"></a>하위 클래스가 생성되는 과정</h3><ul><li>extends로 하위클래스를 생성하면 상위 클래스가 먼저 생성된다.</li><li>하위 클래스의 생성자가 상위 클래스의 생성자를 호출하게 된다.</li><li>컴파일러가  하위 클래스의 생성자 내에 <code>super()</code>를 자동으로 입력하여 <code>default 생성자</code>를 호출한다.<blockquote><p>생성자에 매개 변수가 존재할 경우, <code>super(매개변수)</code>를 이용하여 명시적으로 호출해주어야 한다.</p></blockquote></li></ul><h2 id="형변환"><a href="#형변환" class="headerlink" title="형변환"></a>형변환</h2><ul><li><p>상위 클래스로 변수를 생성하고 하위 클래스의 생성자로 인스턴스를 생성</p></li><li><p>상위 클래스 타입의 변수에 하위 클래스의 변수가 대입 (업 캐스팅)</p></li><li><p>메서드의 인자에 하위 클래스 타입을 넣어도 상위 클래스 타입으로 형변환이 가능하다.</p></li><li><p>하위 클래스는 상위 클래스의 타입을 내포하고 있으므로 묵시적 형변환이 가능하다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class B extends A &#123;&#125;</span><br><span class="line">A instanceA = new B();</span><br><span class="line">method(instanceB);</span><br><span class="line"></span><br><span class="line">type method(A instanceA)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>하위 클래스로 생성이 되었지만 type이 상위 클래스의 type이므로 하위 클래스에서 생성한 method 등에는 접근할 수 없다.</p></li></ul><h2 id="재정의-Overriding"><a href="#재정의-Overriding" class="headerlink" title="재정의 (Overriding)"></a>재정의 (Overriding)</h2><ul><li>상위 클래스에서 정의한 method를 하위 클래스에서 재정의하고 싶을 때 사용</li><li>메서드 정의 부분 (Function Signiture)은 동일하게 입력해야한다.</li><li>다르게 입력할 시 새로운 method를 정의하는 것처럼 해석된다.</li><li>사용법<blockquote><p><code>@Override</code> 를 Annotation으로 입력해준다.</p></blockquote><h4 id="Annotation-주석"><a href="#Annotation-주석" class="headerlink" title="Annotation (주석)"></a>Annotation (주석)</h4></li><li>컴파일러에게 특별한 정보를 제공해주는 역할을 한다.</li><li>Override</li><li>재정의된 메서드라는 정보 제공</li><li>FuctionalInterface</li><li>함수형 인터페이스라는 정보 제공</li><li>Deprecated</li><li>이후 버전에서 사용되지 않을 수 있는 변수</li><li>메서드에서 사용된다.</li><li>SuppressWarnings(“~”)</li><li>특정 경고가 나타나지 않도록함</li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바 </tag>
            
            <tag> 상속 </tag>
            
            <tag> Inheritance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>다운캐스팅(DownCasting)</title>
      <link href="/08/12/20210812-DownCasting/"/>
      <url>/08/12/20210812-DownCasting/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="다운캐스팅-DownCasting"><a href="#다운캐스팅-DownCasting" class="headerlink" title="다운캐스팅 (DownCasting)"></a>다운캐스팅 (DownCasting)</h1><h2 id="의미"><a href="#의미" class="headerlink" title="의미"></a>의미</h2><ul><li>업캐스팅된 클래스를 원래의 타입으로 다시 형변환하는 것</li><li>하위 클래스로의 형변환(다운캐스팅)은 명시적으로 해야한다.</li><li>클래스B가 클래스A에게 상속받는 경우<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A instance = new B(); // 묵시적</span><br><span class="line">B instanceB = (B)instance; //명시적</span><br></pre></td></tr></table></figure></li></ul><h2 id="유의-사항"><a href="#유의-사항" class="headerlink" title="유의 사항"></a>유의 사항</h2><ul><li>클래스 B와 C가 클래스 A에게 상속 받는 경우<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// A의 타입으로 B, C의 인스턴스를 생성해준다.</span><br><span class="line">A ins1 = new B();</span><br><span class="line">A ins2 = new C();</span><br><span class="line"></span><br><span class="line">// C타입을 B타입인 ins3로 생성을 시도한다.</span><br><span class="line">// 실행전까지는 에러가 나지 않지만 실행 시 에러가 발생한다.</span><br><span class="line">B ins3 = (B)ins2;</span><br></pre></td></tr></table></figure></li><li>아래와 같은 방어 코드로 에러를 방지할 수 있다.</li><li><code>instanceof</code> : in2가 B클래스로 생성된 인스턴스인지 확인한다<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ( in2 instanceof B )&#123;</span><br><span class="line">B ins3 = (B)ins2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바 </tag>
            
            <tag> 다운캐스팅 </tag>
            
            <tag> DownCasting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자바 기초</title>
      <link href="/08/12/20210812-java2/"/>
      <url>/08/12/20210812-java2/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="자바-기초"><a href="#자바-기초" class="headerlink" title="자바 기초"></a>자바 기초</h1><h2 id="객체-지향-프로그래밍-OOP-Object-Oriented-Programming"><a href="#객체-지향-프로그래밍-OOP-Object-Oriented-Programming" class="headerlink" title="객체 지향 프로그래밍 (OOP; Object Oriented Programming)"></a>객체 지향 프로그래밍 (OOP; Object Oriented Programming)</h2><ul><li>Java는 객체 지향 프로그래밍 언어 중 하나이다.<ul><li>객체 : 구체적, 추상적 데이터의 단위 (사람, 사물, 주문 등)</li></ul></li><li>객체 지향 프로그래밍 언어는 협력을 통해 기능을 수행할 수 있다.<blockquote><ol><li><p>클래스로 객체를 정의한다.</p></li><li><p>객체의 속성을 클래스 내부의 멤버 변수로 넣는다.</p></li><li><p>역할과 책임 등을 기능으로 구현한다.</p></li><li><p>클래스 간의 협력을 통해 실행한다.</p></li></ol></blockquote></li></ul><h2 id="함수-Function"><a href="#함수-Function" class="headerlink" title="함수 (Function)"></a>함수 (Function)</h2><ul><li>함수는 기능을 수행하는 단독 모듈이다.</li><li>함수를 호출하여 수행하고 반환할 수 있다.</li><li>기본형<ul><li><code>&lt;접근 제어자&gt; &lt;static | final&gt; &lt;반환형&gt; &lt;함수명&gt;</code></li></ul></li></ul><h3 id="접근-제어자-Access-Modifier"><a href="#접근-제어자-Access-Modifier" class="headerlink" title="접근 제어자 (Access Modifier)"></a>접근 제어자 (Access Modifier)</h3><ul><li><p>어떠한 범위 내에서 함수, 클래스에 대해 접근을 통제할 것인지 정의합니다.</p></li><li><p>public : 어디서든 접근 가능</p></li><li><p>private : 동일한 클래스 내에서만 접근 가능</p><ul><li>public으로 구현된 메서드를 통해 접근이 가능하다.</li></ul></li><li><p>protected : 동일한 패키지 내, 이를 상속받은 자식 클래스 내에서 접근 가능</p></li><li><p>default : 같은 패키지 내에서 접근 가능</p><ul><li>접근제어자를 입력하지 않았을 때 default가 적용된다.</li></ul></li></ul><h3 id="Static-Final"><a href="#Static-Final" class="headerlink" title="Static | Final"></a>Static | Final</h3><ul><li>static<ul><li>이 메서드를 공용으로 사용할 것인지 아닌지를 결정한다.</li><li>static을 삽입하면 공용으로 사용할 수 있다.</li><li>static으로 지정하면 static메모리 공간에 저장되어 프로그램의 시작부터 종료 시 까지 저장된다.</li></ul></li><li>Final<ul><li>상속, 제정의, 변경이 불가한 상태로 지정한다.</li><li>상수를 정의할 때도 사용된다.</li></ul></li></ul><h3 id="반환형-Return-Type"><a href="#반환형-Return-Type" class="headerlink" title="반환형 (Return Type)"></a>반환형 (Return Type)</h3><ul><li>반환형에는 자료형을 삽입할 수 있다.</li><li>생성한 class를 반환형으로 사용할 수도 있다.</li></ul><h2 id="메서드-Method"><a href="#메서드-Method" class="headerlink" title="메서드 (Method)"></a>메서드 (Method)</h2><ul><li><code>클래스</code> 안에서 <code>멤버변수</code>를 이용하여 수행한다.</li><li>메서드는 사용하는 객체에 맞게 작명하는 것이 중요하다.</li></ul><h2 id="생성자-Constructor"><a href="#생성자-Constructor" class="headerlink" title="생성자 (Constructor)"></a>생성자 (Constructor)</h2><ul><li>객체를 사용할 때 항상 생성자를 통해 생성한 후에 사용한다.</li><li>생성하면 <code>heap메모리</code>에 인스턴스가 생성된다.</li><li>생성자를 별도로 구현하지 않아도, default constructor가 생성된다.</li><li>기본 문법<ul><li>&lt;ClassName&gt;([Argument]) {<br>  [Statements]<br>  }</li></ul></li><li>생성자는 오버로딩이 가능하여, 1개 이상 존재할 수 있다.</li></ul><h3 id="오버로딩-Overloading"><a href="#오버로딩-Overloading" class="headerlink" title="오버로딩 (Overloading)"></a>오버로딩 (Overloading)</h3><ul><li>사용자의 편의성을 위해 주로 사용된다.<ul><li>예시: 회원 가입 시 필수 질문만 작성할 수 있고, 추가 정보를 작성하여 가입할 수도 있다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바 </tag>
            
            <tag> 자바 기초 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자바란 ?</title>
      <link href="/08/10/20210810-java/"/>
      <url>/08/10/20210810-java/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="자바-Java"><a href="#자바-Java" class="headerlink" title="자바 (Java)"></a>자바 (Java)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>C, C++에 비해 안정적이다.</li><li>객체 지향적 언어로 객체 간의 협력을 할 수 있다.</li><li>플랫폼에 영향을 받지 않는다.<blockquote><p>Java의 소스코드를 컴파일러가 바이트 코드로 변환하여 JVM에서 플랫폼에 맞게 다시 변환하고 실행한다.</p></blockquote></li><li>웹 서버, 안드로이드, 게임 프로그래밍에 사용된다.</li></ul><h2 id="Convention"><a href="#Convention" class="headerlink" title="Convention"></a>Convention</h2><ul><li>Class 선언 : Class는 대문자로 시작한다.</li></ul><h2 id="Hot-key"><a href="#Hot-key" class="headerlink" title="Hot key"></a>Hot key</h2><ul><li>Ctrl + D : 삭제</li><li>Ctrl + F11 : Run</li></ul><h2 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h2><h3 id="정수"><a href="#정수" class="headerlink" title="정수"></a>정수</h3><ul><li>byte (1byte)<ul><li>1바이트 단위인 음악 동영상, 실행파일 등의 자료처리를 할 때 사용된다.</li></ul></li><li>short (2byte)<ul><li>C/C++과 호환 시 사용된다.</li></ul></li><li>int (4byte)<ul><li>자바에서 정수의 기본형으로 사용된다.</li><li>프로그램에서 사용하는 모든 숫자(리터럴)는 int로 표현된다.</li></ul></li><li>long (8byte)<ul><li>int의 범위를 넘어선 -2의 63승 ~ 2의 63승 -1까지 표현</li><li>숫자의 뒤에 L 또는 l을 사용하여 long자료형임을 표시한다.</li></ul></li></ul><h3 id="실수"><a href="#실수" class="headerlink" title="실수"></a>실수</h3><ul><li>float (4byte)</li><li>double (8byte)<ul><li>자바에서 실수의 기본형으로 사용된다.<h4 id="표현"><a href="#표현" class="headerlink" title="표현"></a>표현</h4></li></ul></li><li>실수는 가수, 밑수, 지수로 나뉘어  부동 소수점 방식으로 값이 표현된다.</li><li>컴퓨터에서는 밑수를 2로 사용한다.<h4 id="정규화"><a href="#정규화" class="headerlink" title="정규화"></a>정규화</h4></li><li>가수가 밑수보다 작은 한자리까지 가수로 표현 되는 것</li><li>예시 : 컴퓨터에서는 밑수가 2로 표현되므로, 정규화를 수행하면 가수부분의 첫 번째 자리 숫자는 항상 1로 표현된다.<h4 id="오류"><a href="#오류" class="headerlink" title="오류"></a>오류</h4></li><li>부동 소수점 방식으로는 지수가 0을 표현할 수 없기 때문에 약간의 오차가 발생할 수 있다.</li></ul><h3 id="문자"><a href="#문자" class="headerlink" title="문자"></a>문자</h3><ul><li>컴퓨터에서는 문자를 표현하기 위해 <code>문자세트(Charset)</code>를 사용한다.<ul><li>문자세트 : 각 문자를 어떠한 숫자로 표현할 것인지 코드표로 나타낸 세트</li><li>종류 : ASKII, euc-kr, uft-8, utf-16 등</li></ul></li><li>자바에서는 문자를 나타내기 위해 세계 표준인 UNICODE를 사용한다.<ul><li>utf-16 인코딩을 사용하여 모든 문자를 2바이트로 표시한다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 자바 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>프림 알고리즘</title>
      <link href="/08/05/20210805-prims/"/>
      <url>/08/05/20210805-prims/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="프림-알고리즘-Prim’s-Algorithm"><a href="#프림-알고리즘-Prim’s-Algorithm" class="headerlink" title="프림 알고리즘 (Prim’s Algorithm)"></a>프림 알고리즘 (Prim’s Algorithm)</h1><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><h3 id="프림-알고리즘"><a href="#프림-알고리즘" class="headerlink" title="프림 알고리즘"></a>프림 알고리즘</h3><ul><li>가중치가 있는 연결된 무향 그래프의 모든 꼭짓점을 포함하면서 각 변의 비용의 합이 최소가 되는 부분 그래프인 트리, 즉 <code>최소 신장트리</code> 를 찾는 알고리즘이다<h3 id="최소-신장트리-Minimum-Spanning-Tree-MST"><a href="#최소-신장트리-Minimum-Spanning-Tree-MST" class="headerlink" title="최소 신장트리 (Minimum Spanning Tree, MST)"></a>최소 신장트리 (Minimum Spanning Tree, MST)</h3></li><li>신장 트리 중에서 간선의 가중치 합이 가장 작은 트리 <blockquote><p>신장트리</p><ul><li>특정한 그래프에서 모든 정점을 포함하는 그래프</li></ul></blockquote></li></ul><h2 id="프림-알고리즘-1"><a href="#프림-알고리즘-1" class="headerlink" title="프림 알고리즘"></a>프림 알고리즘</h2><blockquote><ol start="0"><li>처음에 트리는 비어있다고 가정한다.</li><li>그래프에서 정점 하나를 선택하여 트리에 포함시킨다.</li><li>1에서 포함된 정점과 인접한 노드의 간선 중에서 가중치가 가장 작은 간선을 찾아 포함시킨다.</li><li>2번을 모든 노드가 포함될 때까지 반복한다.</li></ol></blockquote><h2 id="동작-과정"><a href="#동작-과정" class="headerlink" title="동작 과정"></a>동작 과정</h2><blockquote><p>이미지 삽입 예정</p></blockquote><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><details><summary>모든 코드 확인하기</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;limits.h&gt;</span><br><span class="line">#define NODE_MAX 1001</span><br><span class="line">#define EDGE_MAX 200001 // 양방향 간선이므로 100,000개</span><br><span class="line"></span><br><span class="line">// 구조체 정의</span><br><span class="line">typedef struct &#123;</span><br><span class="line">int cost;</span><br><span class="line">int node;</span><br><span class="line">&#125; Edge;</span><br><span class="line"></span><br><span class="line">// 데이터 위치 변환을 위한 함수 구현</span><br><span class="line">void swap(Edge *a, Edge *b) &#123;</span><br><span class="line">Edge temp;</span><br><span class="line">temp.cost = a-&gt;cost;</span><br><span class="line">temp.node = a-&gt;node;</span><br><span class="line">a-&gt;cost = b-&gt;cost;</span><br><span class="line">a-&gt;node = b-&gt;node;</span><br><span class="line">b-&gt;cost = temp.cost;</span><br><span class="line">b-&gt;node = temp.node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 우선순위 큐 정의</span><br><span class="line">typedef struct &#123;</span><br><span class="line">Edge *heap[EDGE_MAX];</span><br><span class="line">int count;</span><br><span class="line">&#125; priorityQueue;</span><br><span class="line"></span><br><span class="line">// 데이터 삽입 함수</span><br><span class="line">void push(priorityQueue *pq, Edge *edge) &#123;</span><br><span class="line">    if (pq-&gt;count &gt;= EDGE_MAX) return;</span><br><span class="line">    pq-&gt;heap[pq-&gt;count] = edge;</span><br><span class="line">    int now = pq-&gt;count;</span><br><span class="line">    int parent = (pq-&gt;count - 1) / 2;</span><br><span class="line">    </span><br><span class="line">    // 새 원소를 삽입한 이후에 상향식으로 힙을 구성한다.</span><br><span class="line">    while (now &gt; 0 &amp;&amp; pq-&gt;heap[now]-&gt;cost &lt; pq-&gt;heap[parent]-&gt;cost) &#123;</span><br><span class="line">        swap(pq-&gt;heap[now], pq-&gt;heap[parent]);</span><br><span class="line">        now = parent;</span><br><span class="line">        parent = (parent - 1) / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    pq-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 데이터 추출함수 구현</span><br><span class="line">Edge* pop(priorityQueue *pq) &#123;</span><br><span class="line">if (pq-&gt;count &lt;= 0) return NULL;</span><br><span class="line">Edge *res = pq-&gt;heap[0];</span><br><span class="line">pq-&gt;count--;</span><br><span class="line">pq-&gt;heap[0] = pq-&gt;heap[pq-&gt;count];</span><br><span class="line">int now = 0, leftChild = 1, rightChild = 2;</span><br><span class="line">int target = now;</span><br><span class="line"></span><br><span class="line">// 새 원소를 추출한 이후에 하향식으로 힙을 구성합니다.</span><br><span class="line">while (leftChild &lt; pq-&gt;count) &#123;</span><br><span class="line">    if (pq-&gt;heap[target]-&gt;cost &gt; pq-&gt;heap[leftChild]-&gt;cost) target = leftChild;</span><br><span class="line">    if (pq-&gt;heap[target]-&gt;cost &gt; pq-&gt;heap[rightChild]-&gt;cost &amp;&amp; rightChild &lt; pq-&gt;count) target = rightChild;</span><br><span class="line">    if (target == now) break; // 더 이상 내려가지 않아도 될 때 종료</span><br><span class="line">    else &#123;</span><br><span class="line">        swap(pq-&gt;heap[now], pq-&gt;heap[target]);</span><br><span class="line">        now = target;</span><br><span class="line">        leftChild = now * 2 + 1;</span><br><span class="line">        rightChild = now * 2 + 2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 데이터 연결리스트 구현</span><br><span class="line">typedef struct Node &#123;</span><br><span class="line">Edge *data;</span><br><span class="line">struct Node *next;</span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">Node** adj;</span><br><span class="line">int d[NODE_MAX];</span><br><span class="line"></span><br><span class="line">// 노드 추가를 위한 함수</span><br><span class="line">void addNode(Node** target, int index, Edge* edge) &#123;</span><br><span class="line">    if (target[index] == NULL) &#123;</span><br><span class="line">        target[index] = (Node*)malloc(sizeof(Node));</span><br><span class="line">        target[index]-&gt;data = edge;</span><br><span class="line">        target[index]-&gt;next = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Node* node = (Node*)malloc(sizeof(Node));</span><br><span class="line">        node-&gt;data = edge;</span><br><span class="line">        node-&gt;next = target[index];</span><br><span class="line">        target[index] = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 알고리즘 실행</span><br><span class="line">int main(void) &#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    scanf(&quot;%d %d&quot;, &amp;n, &amp;m);</span><br><span class="line">    // 큐 초기화</span><br><span class="line">    adj = (Node**)malloc(sizeof(Node*) * (n + 1));</span><br><span class="line">    for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">    adj[i] = NULL;</span><br><span class="line">&#125;</span><br><span class="line">priorityQueue *pq;</span><br><span class="line">pq = (priorityQueue*)malloc(sizeof(priorityQueue));</span><br><span class="line">pq-&gt;count = 0;</span><br><span class="line">for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">    int a, b, c;</span><br><span class="line">    scanf(&quot;%d %d %d&quot;, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    Edge *edge1 = (Edge*)malloc(sizeof(Edge));</span><br><span class="line">    edge1-&gt;node = b;</span><br><span class="line">    edge1-&gt;cost = c;</span><br><span class="line">    addNode(adj, a, edge1);</span><br><span class="line">    Edge *edge2 = (Edge*)malloc(sizeof(Edge));</span><br><span class="line">    edge2-&gt;node = a;</span><br><span class="line">    edge2-&gt;cost = c;</span><br><span class="line">    addNode(adj, b, edge2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 프림 알고리즘 </tag>
            
            <tag> Prim&#39;s Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>해시</title>
      <link href="/08/05/20210805-hash/"/>
      <url>/08/05/20210805-hash/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="해시-Hash"><a href="#해시-Hash" class="headerlink" title="해시 (Hash)"></a>해시 (Hash)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>해시를 이용하면 메모리를 많이 소요하지만 최대 빠른 속도로 관리할 수 있다.</li><li>DB 소프트웨어에서 많이 사용된다.</li><li>수학적 연산을 통한 키를 이용하여 값에 접근한다.<ul><li>나머지를 사용하는 방법이 보편적이다.</li><li>테이블 크기를 소수로 설정하여야 충돌 확률이 낮다.</li></ul></li><li>키가 중복이 생길 경우 충돌이 생긴다고 표현하는데 이를 해결하는 방법에는 2가지가 있다.</li></ul><h2 id="충돌-해결"><a href="#충돌-해결" class="headerlink" title="충돌 해결"></a>충돌 해결</h2><h3 id="충돌-시-다른-위치에-저장하기"><a href="#충돌-시-다른-위치에-저장하기" class="headerlink" title="충돌 시 다른 위치에 저장하기"></a>충돌 시 다른 위치에 저장하기</h3><ol><li>선형 조사법</li></ol><ul><li>키가 중복이 생기면 해당 키의 다음 인덱스에 데이터를 저장한다.</li><li>다시 중복이 생기면 <code>인덱스+1</code>을 해나가며 저장한다.</li><li>단점 <ul><li>충돌이 발생하기 시작하면 유사한 값을 가지는 데이터가 밀집되는 집중 결합 문제가 발생한다.</li><li>테이블의 크기가 매우 크면, 충돌은 적어지고, 데이터에 빠르게 접근할 수 있다.</li></ul></li></ul><ol start="2"><li>이차 조사법</li></ol><ul><li>키 값이 중복되면 완전 제곱수를 더해 나가며 저장한다.</li><li><code>인덱스+1</code>, <code>인덱스+4</code> …</li></ul><blockquote><p>선형 조사법 및 이차 조사법에서 데이터의 수가 테이블 인덱스를 초과하게 되면 크기를 확장하여 유지할 수 있도록 설정하여야 한다.</p></blockquote><h3 id="충돌-시-하나의-bucket에-여러-데이터-저장하기"><a href="#충돌-시-하나의-bucket에-여러-데이터-저장하기" class="headerlink" title="충돌 시 하나의 bucket에 여러 데이터 저장하기"></a>충돌 시 하나의 bucket에 여러 데이터 저장하기</h3><ol><li>체이닝 기법</li></ol><ul><li>연결리스트를 활용하여 동일한 키를 가지는 인덱스들을 연결하여 저장한다.</li><li>연결리스트를 사용하기 때문에 삽입 삭제가 용이하다.</li><li>테이블 크기는 동적 메모리할당을 통해 해결이 가능하지만 추가적인 메모리 공간이 요구된다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 해시 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL트리</title>
      <link href="/08/05/20210805-AVLtree/"/>
      <url>/08/05/20210805-AVLtree/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="AVL-트리"><a href="#AVL-트리" class="headerlink" title="AVL 트리"></a>AVL 트리</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>‘AVL 트리’는 균형이 갖춰진 이진 트리이다.</li><li>균형을 갖추기 위해 회전(Rotation)을 통해 재구성할 수 있다.<blockquote><p>균형 </p><ul><li>균형 인수가 -1, 0, +1 인 상태</li></ul></blockquote></li></ul><blockquote><p>균형 인수</p><ul><li>왼쪽 자식의 높이 - 오른쪽 자식의 높이</li></ul></blockquote><h2 id="불균형-상태"><a href="#불균형-상태" class="headerlink" title="불균형 상태"></a>불균형 상태</h2><h3 id="LL-형식"><a href="#LL-형식" class="headerlink" title="LL 형식"></a>LL 형식</h3><ul><li>노드가 Left1-Left2로 편향되어 있는 상태<h4 id="재구성"><a href="#재구성" class="headerlink" title="재구성"></a>재구성</h4></li><li>결과적으로 편향된 노드들을 가진 노드(2)를 root가 된다.</li></ul><ol><li>노드(2)가 가지고있던 오른쪽 자식 노드들을 root(1)의 왼쪽 자식 노드로 설정한다.</li><li>기존의 root(1)는 노드(2)의 오른쪽 자식 노드로 설정한다.</li></ol><h3 id="RR-형식"><a href="#RR-형식" class="headerlink" title="RR 형식"></a>RR 형식</h3><ul><li>노드가 Right1-Right2로 편향되어 있는 상태<h4 id="재구성-1"><a href="#재구성-1" class="headerlink" title="재구성"></a>재구성</h4></li><li>LL형식의 재구성 방식을 반대로 수행한다.</li></ul><ol><li>편향된 노드의 왼쪽 자식 노드를 root의 오른쪽 노드로 설정한다.</li><li>편향된 노드의 왼쪽 자식 노드를 root로 설정한다.</li></ol><h3 id="LR-형식"><a href="#LR-형식" class="headerlink" title="LR 형식"></a>LR 형식</h3><ul><li>노드가 Left1-Right1로 편향되어 있는 상태</li></ul><ol><li>편향된 노드에 RR회전을 수행하여 불균형 노드를 왼쪽으로 몰아 넣는다.</li><li>몰아넣은 노드에 LL회전을 수행한다.</li></ol><h3 id="RL-형식"><a href="#RL-형식" class="headerlink" title="RL 형식"></a>RL 형식</h3><ul><li>노드가 Right1-Left1로 편향되어 있는 상태</li></ul><ol><li>편향된 노드에 LL회전을 수행하여 불균형 노드를 오른쪽으로 몰아 넣는다.</li><li>몰아넣은 노드에 RR회전을 수행한다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> AVL트리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>이진 탐색 트리</title>
      <link href="/08/05/20210805-BinarySearchTree/"/>
      <url>/08/05/20210805-BinarySearchTree/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="이진-탐색-트리-Binary-Search-Tree"><a href="#이진-탐색-트리-Binary-Search-Tree" class="headerlink" title="이진 탐색 트리 (Binary Search Tree)"></a>이진 탐색 트리 (Binary Search Tree)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>이진 탐색 트리에서 부모 노드는 왼쪽 자식 노드보다는 크고 오른쪽 자식 노드보다는 작다<blockquote><p>값의 크기 비교 : 왼쪽 자식 노드 &lt; 부모 노드 &lt; 오른쪽 자식 노드</p></blockquote></li><li>탐색 속도를 극대화할 수 있는 구조이다.</li><li>한 번 확인할 때 마다 탐색할 노드의 개수가 절반씩 줄어든다.</li><li>완전 이진 탐색 트리에서 실행할 경우 O(logN)의 시간복잡도를 가진다.</li></ul><h2 id="탐색"><a href="#탐색" class="headerlink" title="탐색"></a>탐색</h2><ul><li>트리 내의 데이터를 탐색한다.</li><li>탐색하고 싶은 노드를 부모 노드와 비교한다.<blockquote><p>부모 노드보다 클 경우 </p><ul><li>오른쪽 자식 노드에 포함되므로 오른쪽으로 이동한다.</li></ul></blockquote></li></ul><blockquote><p>부모 노드보다 작을 경우 </p><ul><li>왼쪽 자식 노드에 포함되므로 왼쪽으로 이동한다.</li></ul></blockquote><h2 id="삽입"><a href="#삽입" class="headerlink" title="삽입"></a>삽입</h2><ul><li>삽입하고 싶은 데이터를 부모 노드와 비교하여 탐색 프로세스와 같이 이동하며 적절한 위치에 값을 삽입한다.</li></ul><h2 id="삭제"><a href="#삭제" class="headerlink" title="삭제"></a>삭제</h2><ol><li>자식 노드가 없는 노드의 삭제</li></ol><ul><li>데이터를 탐색하여 삭제한다.</li></ul><ol start="2"><li>1개의 자식 노드가 있는 노드의 삭제</li></ol><ul><li>삭제할 노드의 자리에 자식 노드를 삽입한다.</li></ul><ol start="3"><li>2개의 자식 노드가 있는 노드의 삭제</li></ol><ul><li>삭제할 노드 다음으로 큰 노드를 삭제할 노드의 위치에 삽입한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 이진 탐색 트리 </tag>
            
            <tag> 이진 트리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>그래프 탐색</title>
      <link href="/08/05/20210805-DFS/"/>
      <url>/08/05/20210805-DFS/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="그래프-탐색"><a href="#그래프-탐색" class="headerlink" title="그래프 탐색"></a>그래프 탐색</h1><h2 id="깊이-우선-탐색-Depth-First-Search"><a href="#깊이-우선-탐색-Depth-First-Search" class="headerlink" title="깊이 우선 탐색 (Depth First Search)"></a>깊이 우선 탐색 (Depth First Search)</h2><h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><ul><li>깊은 것을 우선적으로 탐색한다. </li><li>전체 노드를 탐색하며, 모든 경우의 수를 탐색한다.</li><li>스택 자료구조에 기초하며, O(N)이 소요된다.</li></ul><h3 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h3><ul><li>모든 노드는 탐색되지 않은 상태임을 가정</li><li>스택에 삽입되면 탐색이 완료된 것으로 간주한다.</li></ul><ol><li>탐색을 시작할 노드를 스택에 삽입(탐색)한다.</li><li>시작 노드와 인접한 노드를 순차적으로 스택에 삽입(탐색)한다.</li><li>더이상 인접한 노드가 없을 때는 스택에서 순차적으로 노드를 꺼낸다.</li></ol><h2 id="너비-우선-탐색-Breadth-First-Search"><a href="#너비-우선-탐색-Breadth-First-Search" class="headerlink" title="너비 우선 탐색 (Breadth First Search)"></a>너비 우선 탐색 (Breadth First Search)</h2><h3 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h3><ul><li>너비를 우선으로 하여 탐색을 수행한다.</li><li>전체 노드를 탐색하고, DFS보다 빠르다.</li><li>큐 자료구조에 기초하며, O(N)이 소요된다.</li><li>고급 그래프 탐색 알고리즘에서 자주 활용된다.  </li></ul><h3 id="구현-1"><a href="#구현-1" class="headerlink" title="구현"></a>구현</h3><ul><li>모든 노드는 탐색되지 않은 상태임을 가정</li><li>스택에 삽입되면 탐색이 완료된 것으로 간주한다.</li></ul><ol><li>탐색을 시작할 노드를 큐에 삽입한다.</li><li>삽입한 노드를 꺼내고, 인접 노드를 삽입한다.</li><li>2를 더이상 수행할 수 없을 때까지 반복한다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> DFS </tag>
            
            <tag> 깊이 우선 탐색 </tag>
            
            <tag> BFS </tag>
            
            <tag> 너비 우선 탐색 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>그래프</title>
      <link href="/08/05/20210805-graph/"/>
      <url>/08/05/20210805-graph/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="그래프-Graph"><a href="#그래프-Graph" class="headerlink" title="그래프 (Graph)"></a>그래프 (Graph)</h1><ul><li>사물을 정점(Vertex)과 간선(Edge)로 나타내는 구조</li></ul><h2 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h2><blockquote><p>E : Edge (간선)<br>V : Vertex (정점)</p></blockquote><h3 id="무방향-비가중치-그래프"><a href="#무방향-비가중치-그래프" class="headerlink" title="무방향 비가중치 그래프"></a>무방향 비가중치 그래프</h3><ul><li>모든 노드의 연결여부를 확인하여야한다.</li><li>2차원 Matrix를 이용하여 확인하므로 O(V^2)이 소요되고, 값은 바로 확인할 수 있기 때문에 O(1)이 소요된다.<h4 id="인접-행렬-Adjacency-Matrix-을-이용한-구현"><a href="#인접-행렬-Adjacency-Matrix-을-이용한-구현" class="headerlink" title="인접 행렬(Adjacency Matrix)을 이용한 구현"></a>인접 행렬(Adjacency Matrix)을 이용한 구현</h4></li></ul><h3 id="방향-가중치-그래프"><a href="#방향-가중치-그래프" class="headerlink" title="방향 가중치 그래프"></a>방향 가중치 그래프</h3><ul><li>모든 간선이 방향을 가지고, 가중치를 가진 그래프</li><li>연결된 간선의 정보만 저장하기 때문에 공간은 O(E)가 소요되고, 노드만 확인하여 값을 확인하므로 O(V)가 소요된다.<h4 id="인접-리스트-Adjacency-List-를-이용한-구현"><a href="#인접-리스트-Adjacency-List-를-이용한-구현" class="headerlink" title="인접 리스트(Adjacency List)를 이용한 구현"></a>인접 리스트(Adjacency List)를 이용한 구현</h4></li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 그래프 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>탐색</title>
      <link href="/08/05/20210805-search/"/>
      <url>/08/05/20210805-search/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="탐색-Search"><a href="#탐색-Search" class="headerlink" title="탐색 (Search)"></a>탐색 (Search)</h1><h2 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h2><h3 id="순차-탐색-Sequential-Search"><a href="#순차-탐색-Sequential-Search" class="headerlink" title="순차 탐색 (Sequential Search)"></a>순차 탐색 (Sequential Search)</h3><ul><li>특정한 원소를 찾기위해 순차적으로 탐색을 수행한다.</li></ul><h3 id="이진-탐색-Binary-Search"><a href="#이진-탐색-Binary-Search" class="headerlink" title="이진 탐색 (Binary Search)"></a>이진 탐색 (Binary Search)</h3><ul><li>배열의 내부 데이터가 이미 정렬되어 있는 상황에서 사용한다.</li><li>탐색 범위를 절반씩 좁혀가며 탐색을 수행한다.<h4 id="구성"><a href="#구성" class="headerlink" title="구성"></a>구성</h4></li><li>start (가장 앞에 위치한 원소)</li><li>mid (중간에 위치한 원소)</li><li>end (가장 뒤에 위치한 원소)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 순차 탐색 </tag>
            
            <tag> 이진 탐색 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>우선순위 큐</title>
      <link href="/08/05/20210805-priorityQueue/"/>
      <url>/08/05/20210805-priorityQueue/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="우선순위-큐-Priority-Queue"><a href="#우선순위-큐-Priority-Queue" class="headerlink" title="우선순위 큐 (Priority Queue)"></a>우선순위 큐 (Priority Queue)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>우선 순위를 가진 데이터를 저장하는 큐</li><li>데이터 추출 시 우선순위가 높은 데이터가 추출된다.</li><li>OS의 스케줄링, 정렬, 네트워크 관리 등에 이용된다.</li></ul><h2 id="비교"><a href="#비교" class="headerlink" title="비교"></a>비교</h2><h3 id="큐-Queue"><a href="#큐-Queue" class="headerlink" title="큐 (Queue)"></a>큐 (Queue)</h3><ul><li>선형구조 및 FIFO 구조를 가진다.</li></ul><h3 id="우선순위-큐-Priority-Queue-1"><a href="#우선순위-큐-Priority-Queue-1" class="headerlink" title="우선순위 큐 (Priority Queue)"></a>우선순위 큐 (Priority Queue)</h3><ul><li>트리 구조와 유사하며, 최대 힙으로 구현한다.</li></ul><blockquote><p>최대힙 구조</p><ul><li>힙은 항상 완전 이진 트리 구조여야 한다.</li><li>부모 노드가 항상 자식노드보다 큰 값을 가진 구조</li><li>root가 최대 값을 가진다.</li></ul></blockquote><h2 id="데이터-삽입"><a href="#데이터-삽입" class="headerlink" title="데이터 삽입"></a>데이터 삽입</h2><ul><li>전체 트리가 최대힙 구조를 유지하도록 코딩할 수 있다.</li><li>삽입하는 원소는 완전 이진 트리를 유지하는 형태로 삽입한다.</li><li>삽입 후에 자식 노드보다 크고, 부모 노드보다 작을 때 까지 상향식 이동을 한다.</li></ul><h2 id="데이터-삭제"><a href="#데이터-삭제" class="headerlink" title="데이터 삭제"></a>데이터 삭제</h2><ul><li>데이터를 삭제할 때는 root를 삭제해준다.</li><li>마지막에 위치하던 노드를 root로 이동시킨다.</li><li>삭제 후에 부모 노드보다 작고, 자식 노드보다 클 때 까지 하향식으로 이동한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 큐 </tag>
            
            <tag> 우선순위 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>이진 트리</title>
      <link href="/08/04/20210804-BinaryTree/"/>
      <url>/08/04/20210804-BinaryTree/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="이진트리-Binary-Tree"><a href="#이진트리-Binary-Tree" class="headerlink" title="이진트리 (Binary Tree)"></a>이진트리 (Binary Tree)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>일반적인 트리는 한 개의 노드가 여러 개의 자식 노드를 가질 수 있다.</li><li>이진 트리는 노드 1개 당 최대 2개의 자식 노드를 가질 수 있다.</li></ul><h2 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h2><h3 id="포화-이진트리-Full-Binary-Tree"><a href="#포화-이진트리-Full-Binary-Tree" class="headerlink" title="포화 이진트리 (Full Binary Tree)"></a>포화 이진트리 (Full Binary Tree)</h3><ul><li>리프 노드(최하단 노드)를 제외한 모든 노드가 2개의 자식 노드를 가진 구조.</li></ul><h3 id="완전-이진트리-Complete-Binary-Tree"><a href="#완전-이진트리-Complete-Binary-Tree" class="headerlink" title="완전 이진트리 (Complete Binary Tree)"></a>완전 이진트리 (Complete Binary Tree)</h3><ul><li>왼쪽 노드부터 점진적으로 채워진 구조</li></ul><h3 id="높이-균형-트리-Height-Balanced-Tree"><a href="#높이-균형-트리-Height-Balanced-Tree" class="headerlink" title="높이 균형 트리 (Height Balanced Tree)"></a>높이 균형 트리 (Height Balanced Tree)</h3><ul><li>왼쪽, 오른쪽 트리의 높이의 차이가 1이하인 트리</li></ul><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><h2 id="순회"><a href="#순회" class="headerlink" title="순회"></a>순회</h2><ul><li>전, 중, 후를 root의 순서로 보면 이해하기 쉽다.</li></ul><h3 id="전위순회-Preorder"><a href="#전위순회-Preorder" class="headerlink" title="전위순회 (Preorder)"></a>전위순회 (Preorder)</h3><ul><li>순서 : root -&gt; 왼쪽 노드-&gt; 오른쪽 노드</li></ul><h3 id="중위순회-Inorder"><a href="#중위순회-Inorder" class="headerlink" title="중위순회 (Inorder)"></a>중위순회 (Inorder)</h3><ul><li>순서 : 왼쪽 노드 -&gt; root -&gt; 오른쪽 노드</li></ul><h3 id="후위순회-Postorder"><a href="#후위순회-Postorder" class="headerlink" title="후위순회 (Postorder)"></a>후위순회 (Postorder)</h3><ul><li>순서 : 왼쪽 노드 -&gt; 오른쪽 노드 -&gt; root</li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 트리 </tag>
            
            <tag> 이진트리 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>계수 및 기수 정렬</title>
      <link href="/08/04/20210804-til5/"/>
      <url>/08/04/20210804-til5/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="계수-정렬-Counting-Sort"><a href="#계수-정렬-Counting-Sort" class="headerlink" title="계수 정렬 (Counting Sort)"></a>계수 정렬 (Counting Sort)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>데이터의 크기가 한정적일 때 사용한다.</li><li>데이터를 읽어나가면서 바로 정렬한다</li><li>시간복잡도 : O(N)</li></ul><h1 id="기수-정렬-Radix-Sort"><a href="#기수-정렬-Radix-Sort" class="headerlink" title="기수 정렬 (Radix Sort)"></a>기수 정렬 (Radix Sort)</h1><h2 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h2><ul><li>자리 수를 기준으로 차례대로 데이터를 정렬한다.</li><li>자리 수는 가장 큰 값의 자리수를 기준으로 한다.</li><li>예시 ) 가장 큰 값 : 345 (1, 10, 100의 자리)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 계수정렬 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>퀵 정렬</title>
      <link href="/08/04/20210804-til4/"/>
      <url>/08/04/20210804-til4/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="퀵-정렬-Quick-Sort"><a href="#퀵-정렬-Quick-Sort" class="headerlink" title="퀵 정렬 (Quick Sort)"></a>퀵 정렬 (Quick Sort)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>C++ Algorithm 라이브러리에서 sort()를 통해 사용할 수 있다.</li><li>피벗을 기준으로 큰 값, 작은 값을 교체한다.</li><li>완전 이진 트리와 흡사한 형태를 가진다.</li></ul><h2 id="퀵정렬을-통한-오름차순-구현"><a href="#퀵정렬을-통한-오름차순-구현" class="headerlink" title="퀵정렬을 통한 오름차순 구현"></a>퀵정렬을 통한 오름차순 구현</h2><h3 id="순서"><a href="#순서" class="headerlink" title="순서"></a>순서</h3><ul><li>피벗 : 가장 왼쪽에 위치한 값이라 가정</li><li>start : 피벗 다음에 위치한 값</li><li>end : 가장 오른쪽에 위치한 값<blockquote><ol><li>start : 앞에서부터 뒤로 이동하며 피벗보다 큰 값을 찾음</li><li>end : 뒤에서 앞으로 이동하며 피벗보다 작은 값을 찾음</li><li>start와 end가 엇갈리는 시점에서 작은 값과 피벗을 교체함</li><li>피벗을 기준으로 왼쪽, 오른쪽에서 다시 퀵정렬을 수행한다.</li></ol></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 퀵정렬 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>선택 및 삽입 정렬</title>
      <link href="/08/04/20210804-til3/"/>
      <url>/08/04/20210804-til3/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="선택-정렬-Selection-Sort"><a href="#선택-정렬-Selection-Sort" class="headerlink" title="선택 정렬 (Selection Sort)"></a>선택 정렬 (Selection Sort)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>가장 작은 것을 선택해서 앞으로 보냄</li><li>시간복잡도 : 가장 작은 데이터 선택 (N) * 앞으로 보내기 (N) = O(N^2)</li></ul><h1 id="삽입-정렬"><a href="#삽입-정렬" class="headerlink" title="삽입 정렬"></a>삽입 정렬</h1><h2 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h2><ul><li>각 숫자를 적절한 위치에 삽입</li><li>일반적으로 선택 정렬보다 빠르게 동작한다.</li><li>시간복잡도 : 들어갈 위치를 선택 (N) * 데이터를 선택하는 횟수 (N) = O(N^2)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 정렬 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>큐</title>
      <link href="/08/03/20210803-til2-md/"/>
      <url>/08/03/20210803-til2-md/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="큐-Queue"><a href="#큐-Queue" class="headerlink" title="큐 (Queue)"></a>큐 (Queue)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><p><img src="/image/" alt="queue"></p><blockquote><ol><li>데이터가 뒤(rear)로 들어가서 앞(front)으로 나오는 자료</li></ol><ol start="2"><li>FIFO (First In First Out)</li></ol><ol start="3"><li>스케줄링, 탐색 알고리즘 등에서 사용된다.</li></ol></blockquote><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><h3 id="배열로-구현"><a href="#배열로-구현" class="headerlink" title="배열로 구현"></a>배열로 구현</h3><h4 id="선언"><a href="#선언" class="headerlink" title="선언"></a>선언</h4><ul><li>배열은 사전에 배열의 크기를 지정해줘야한다.</li><li>front와 rear를 선언해준다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define SIZE 10000</span><br><span class="line">#define INF 99999999</span><br><span class="line"></span><br><span class="line">int queue[SIZE];</span><br><span class="line">int front = 0;</span><br><span class="line">int rear = 0;</span><br></pre></td></tr></table></figure><h4 id="삽입"><a href="#삽입" class="headerlink" title="삽입"></a>삽입</h4><ul><li>큐는 한 쪽으로만 데이터가 들어간다.</li><li>큐의 마지막인 rear에 1을 추가하여 데이터를 삽입해준다.</li><li>배열의 크기를 초과했을 때는 큐 오버플로우를 선언해준다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void push(int data) &#123;</span><br><span class="line">   if (rear &gt;= SIZE) &#123;</span><br><span class="line">      printf(&quot;큐 오버플로우가 발생했습니다. \n&quot;);</span><br><span class="line">      return;</span><br><span class="line">   &#125;</span><br><span class="line">   queue[rear++] = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="삭제"><a href="#삭제" class="headerlink" title="삭제"></a>삭제</h4><ul><li>큐는 삽입과 같이 한 쪽에서만 데이터가 나온다.</li><li>큐의 front++를 return함으로써 front를 제거한다.</li><li>큐가 비어있을 때 시도하면 언더플로우를 선언한다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void pop() &#123;</span><br><span class="line">   if (front == rear) &#123;</span><br><span class="line">      printf(&quot;큐 언더플로우가 발생했습니다. \n&quot;);</span><br><span class="line">      return -INF;</span><br><span class="line">   &#125;</span><br><span class="line">   return queue[front++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>모든 코드 확인하기</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define SIZE 10000</span><br><span class="line">#define INF 99999999</span><br><span class="line"></span><br><span class="line">int queue[SIZE];</span><br><span class="line">int front = 0;</span><br><span class="line">int rear = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void push(int data) &#123;</span><br><span class="line">   if (rear &gt;= SIZE) &#123;</span><br><span class="line">      printf(&quot;큐 오버플로우가 발생했습니다. \n&quot;);</span><br><span class="line">      return;</span><br><span class="line">   &#125;</span><br><span class="line">   queue[rear++] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void pop() &#123;</span><br><span class="line">   if (front == rear) &#123;</span><br><span class="line">      printf(&quot;큐 언더플로우가 발생했습니다. \n&quot;);</span><br><span class="line">      return -INF;</span><br><span class="line">   &#125;</span><br><span class="line">   return queue[front++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void show() &#123;</span><br><span class="line">   printf(&quot;---큐의 앞--- \n&quot;);</span><br><span class="line">   for (int i = front; i &lt; rear; i++) &#123;</span><br><span class="line">      printf(&quot;%d\n&quot;, queue[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   printf(&quot;---큐의 뒤--- \n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">   push(7);</span><br><span class="line">   push(5);</span><br><span class="line">   push(1);</span><br><span class="line">   pop();</span><br><span class="line">   show();</span><br><span class="line">   system(&quot;pause&quot;);</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="연결리스트로-구현"><a href="#연결리스트로-구현" class="headerlink" title="연결리스트로 구현"></a>연결리스트로 구현</h3><h4 id="선언-1"><a href="#선언-1" class="headerlink" title="선언"></a>선언</h4><ul><li>data와 노드와 다음 데이터를 연결하는 next를 구조에 포함한다.</li><li>데이터가 나오는 front, 들어가는 node, 데이터 수를 담을 count를 선언한다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#define INF 99999999</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">   int data;</span><br><span class="line">   struct Node* next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">   Node* front;</span><br><span class="line">   Node* rear;</span><br><span class="line">   int count;</span><br><span class="line">&#125;Queue;</span><br></pre></td></tr></table></figure><h4 id="삽입-1"><a href="#삽입-1" class="headerlink" title="삽입"></a>삽입</h4><ul><li>새로운 node를 동적메모리에 할당해준다.</li><li>node에 데이터를 담고, next는 NULL로 초기화해준다.</li><li>조건문을 통해 큐에 데이터가 없을 시 front로 선언한다.</li><li>데이터가 존재할 시 큐의 rear가 node를 가리키게 한다.</li><li>큐의 rear를 node로 지정하고, count를 추가해준다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void push(Queue* queue, int data) &#123;</span><br><span class="line">   Node* node = (Node*)malloc(sizeof(Node));</span><br><span class="line">   node-&gt;data = data;</span><br><span class="line">   node-&gt;next = NULL;</span><br><span class="line">   if (queue-&gt;count == 0) &#123;</span><br><span class="line">      queue-&gt;front = node;</span><br><span class="line">   &#125;</span><br><span class="line">   else &#123;</span><br><span class="line">      queue-&gt;rear-&gt;next = node;</span><br><span class="line">   &#125;</span><br><span class="line">   queue-&gt;rear = node;</span><br><span class="line">   queue-&gt;count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="삭제-1"><a href="#삭제-1" class="headerlink" title="삭제"></a>삭제</h4><ul><li>큐에 데이터가 없을 시 실행하면 언더플로우를 선언해준다.</li><li>큐의 front를 담을 노드를 생성하고, 데이터도 담아준다.</li><li>큐의 front를 위 노드의 next로 선언한다.</li><li>기존의 front 다음의 데이터가 front가 되는 것</li><li>원래의 front를 담고 있던 node를 해제해주고, count를 감소시킨다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void pop(Queue* queue) &#123;</span><br><span class="line">   if (queue-&gt;count == 0) &#123;</span><br><span class="line">      printf(&quot;큐 언더플로우가 발생하였습니다. \n&quot;);</span><br><span class="line">      return -INF;</span><br><span class="line">   &#125;</span><br><span class="line">   Node* node = queue-&gt;front;</span><br><span class="line">   int data = node-&gt;data;</span><br><span class="line"></span><br><span class="line">   queue-&gt;front = node-&gt;next;</span><br><span class="line">   free(node);</span><br><span class="line">   queue-&gt;count--;</span><br><span class="line">   return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>모든 코드 확인하기</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#define INF 99999999</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">   int data;</span><br><span class="line">   struct Node* next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">   Node* front;</span><br><span class="line">   Node* rear;</span><br><span class="line">   int count;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line">void push(Queue* queue, int data) &#123;</span><br><span class="line">   Node* node = (Node*)malloc(sizeof(Node));</span><br><span class="line">   node-&gt;data = data;</span><br><span class="line">   node-&gt;next = NULL;</span><br><span class="line">   if (queue-&gt;count == 0) &#123;</span><br><span class="line">      queue-&gt;front = node;</span><br><span class="line">   &#125;</span><br><span class="line">   else &#123;</span><br><span class="line">      queue-&gt;rear-&gt;next = node;</span><br><span class="line">   &#125;</span><br><span class="line">   queue-&gt;rear = node;</span><br><span class="line">   queue-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void pop(Queue* queue) &#123;</span><br><span class="line">   if (queue-&gt;count == 0) &#123;</span><br><span class="line">      printf(&quot;큐 언더플로우가 발생하였습니다. \n&quot;);</span><br><span class="line">      return -INF;</span><br><span class="line">   &#125;</span><br><span class="line">   Node* node = queue-&gt;front;</span><br><span class="line">   int data = node-&gt;data;</span><br><span class="line"></span><br><span class="line">   queue-&gt;front = node-&gt;next;</span><br><span class="line">   free(node);</span><br><span class="line">   queue-&gt;count--;</span><br><span class="line">   return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void show(Queue* queue) &#123;</span><br><span class="line">   Node* cur = queue-&gt;front;</span><br><span class="line">   printf(&quot;---큐의 앞---\n&quot;);</span><br><span class="line">   while (cur != NULL) &#123;</span><br><span class="line">      printf(&quot;%d\n&quot;, cur-&gt;data);</span><br><span class="line">      cur = cur-&gt;next;</span><br><span class="line">   &#125;</span><br><span class="line">   printf(&quot;---큐의 뒤---&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">   Queue queue;</span><br><span class="line">   queue.front = queue.rear = NULL;</span><br><span class="line">   queue.count = 0;</span><br><span class="line">   push(&amp;queue, 7);</span><br><span class="line">   push(&amp;queue, 5);</span><br><span class="line">   push(&amp;queue, 4);</span><br><span class="line">   pop(&amp;queue);</span><br><span class="line">   push(&amp;queue, 6);</span><br><span class="line">   pop(&amp;queue);</span><br><span class="line">   show(&amp;queue);</span><br><span class="line">   system(&quot;pause&quot;);</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 큐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>연결리스트</title>
      <link href="/07/30/20210730-til1/"/>
      <url>/07/30/20210730-til1/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><span id="more"></span><!-- excerpt --><h1 id="연결리스트-Linked-List"><a href="#연결리스트-Linked-List" class="headerlink" title="연결리스트 (Linked List)"></a>연결리스트 (Linked List)</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><blockquote><ol><li>데이터를 선형적으로 저장 및 처리한다.</li></ol><ol start="2"><li>삽입과 삭제가 많은 경우 효율적이다.</li></ol><ol start="3"><li>리스트의 중간 지점에 노드의 추가/삭제가 가능하여야 한다.</li></ol><ol start="4"><li>메모리 공간을 미리 할당하는 배열을 보완하여 공간 낭비를 감소시킨다.</li></ol></blockquote><p>✚ 배열 기반의 리스트</p><ul><li><p>장점 : 즉시 접근이 가능하다.</p></li><li><p>단점 : 삽입 삭제가 비효율적이며 메모리 공간을 미리 할당한다.</p></li></ul><h2 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h2><h3 id="단일-연결리스트"><a href="#단일-연결리스트" class="headerlink" title="단일 연결리스트"></a>단일 연결리스트</h3><p><img src="/image/single.PNG" alt="one-way-list"></p><ul><li><p>단일 연결리스트는 가장 앞의 노드를 가르키는 HEAD를 갖는다.</p></li><li><p>각 노드별로 동적 메모리를 할당하여야 하며, 각 노드를 연결시켜주어야 한다.</p></li></ul><p>####︎︎ 노드 삽입<br><img src="/image/push.PNG" alt="push"></p><ul><li><p>HEAD 다음에 노드를 삽입한다고 가정</p></li><li><p>‘HEAD의 *next’가 ‘삽입 노드의 값’을 가리키게 한다.</p></li><li><p>‘삽입 노드의 *next’가 ‘기존 노드의 값’을 가리키게 한다.</p></li></ul><h4 id="노드-삭제"><a href="#노드-삭제" class="headerlink" title="노드 삭제"></a>노드 삭제</h4><p><img src="/image/pop.PNG" alt="pop"></p><ul><li><p>HEAD 다음에 위치한 노드를 삭제한다고 가정</p></li><li><p>‘HEAD의 *next’가 ‘삭제될 노드의 다음 값’을 가리키게 한다.</p></li><li><p>삭제된 노드의 동적 메모리를 해제하여 메모리 누수를 방지한다.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> 알고리즘 </tag>
            
            <tag> 리스트 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
